name: swift-corelibs

on:
  workflow_dispatch:
    inputs:
      dispatch_revision:
        description: 'swift-corelibs-libdispatch revision to build'
        required: true
        default: 'refs/heads/main'
      foundation_revision:
        description: 'swift-corelibs-foundation revision to build'
        required: true
        default: 'refs/heads/main'
      xctest_revision:
        description: 'swift-corelibs-xctest revision to build'
        required: true
        default: 'refs/heads/main'

      curl_revision:
        description: 'curl revision to build'
        required: true
        default: 'refs/tags/curl-7_77_0'
      libxml2_revision:
        description: 'libxml2 revision to build'
        required: true
        default: 'refs/tags/v2.9.12'
      llvm_revision:
        description: 'llvm revision to use'
        required: true
        default: 'refs/heads/main'
      zlib_revision:
        description: 'zlib revision to build'
        required: true
        default: 'refs/heads/master'

jobs:
  windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        include:
          - branch: swift-5.5-release
            tag: 5.5-RELEASE

    steps:
      - uses: compnerd/gha-setup-swift@main
        with:
          tag: ${{ matrix.tag }}
          branch: ${{ matrix.branch }}

      - uses: actions/checkout@v2
        with:
          repository: curl/curl
          ref: ${{ github.event.inputs.curl_revision }}
          path: ${{ github.workspace }}/curl

      - uses: actions/checkout@v2
        with:
          repository: gnome/libxml2
          ref: ${{ github.event.inputs.libxml2_revison }}
          path: ${{ github.workspace }}/libxml2

      - uses: actions/checkout@v2
        with:
          repository: madler/zlib
          ref: ${{ github.event.inputs.zlib_revision }}
          path: ${{ github.workspace }}/zlib

      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: ${{ github.event.inputs.llvm_revision }}
          path: llvm-project

      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-libdispatch
          ref: ${{ github.event.inputs.dispatch_revision }}
          path: ${{ github.workspace }}/swift-corelibs-libdispatch

      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-foundation
          ref: ${{ github.event.inputs.foundation_revision }}
          path: ${{ github.workspace }}/swift-corelibs-foundation

      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-xctest
          ref: ${{ github.event.inputs.xctest_revision }}
          path: ${{ github.workspace }}/swift-corelibs-xctest

      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      # Remove the dispatch module definition as we will be building dispatch
      - name: dispatch removal
        run: |
          del %SDKROOT%\usr\include\dispatch\module.modulemap
        shell: cmd

      # TODO(#378) homogenise the build trees
      # TODO(#379) build the stdlib

      - name: build libdispatch
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B libdispatch -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang-cl -D CMAKE_CXX_COMPILER=clang-cl -D CMAKE_MT=mt -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-libdispatch -D BUILD_TESTING=NO -D ENABLE_SWIFT=YES
          cmake --build libdispatch --config Release

      # TODO(#380) build ICU
      - name: setup ICU
        run: |
          curl.exe -sOL "https://github.com/unicode-org/icu/releases/download/release-67-1/icu4c-67_1-Win64-MSVC2017.zip"
          md ${{ github.workspace }}\Library
          unzip.exe -o icu4c-67_1-Win64-MSVC2017.zip -d ${{ github.workspace }}\Library\icu-67.1
        shell: cmd

      - name: build libxml2
        run: |
          cmake -B xml2 -D BUILD_SHARED_LIBS=NO -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=cl -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" -D CMAKE_MT=mt -D LIBXML2_WITH_ICONV=NO -D LIBXML2_WITH_ICU=NO -D LIBXML2_WITH_LZMA=NO -D LIBXML2_WITH_PYTHON=NO -D LIBXML2_WITH_TESTS=NO -D LIBXML2_WITH_THREADS=YES -D LIBXML2_WITH_ZLIB=NO -G Ninja -S ${{ github.workspace }}/libxml2 -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/Library/libxml2-2.9.12/usr
          cmake --build xml2 --config Release
          cmake --build xml2 --config Release --target install

      - name: build zlib
        run: |
          cmake -B libz -D BUILD_SHARED_LIBS=NO -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=cl -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" -D CMAKE_MT=mt -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/Library/zlib-1.2.11/usr -D SKIP_INSTALL_FILES=YES -G Ninja -S ${{ github.workspace }}/zlib
          cmake --build libz --config Release
          cmake --build libz --config Release --target install 

      - name: build curl
        run: |
          cmake -B libcurl -D BUILD_SHARED_LIBS=NO -D BUILD_TESTING=NO -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=cl -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" -D CMAKE_MT=mt -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/Library/curl-7.77.0/usr -D BUILD_CURL_EXE=NO -D CMAKE_USE_OPENSSL=NO -D CURL_CA_PATH=none -D CMAKE_USE_SCHANNEL=YES -D CMAKE_USE_LIBSSH2=NO -D HAVE_POLL_FINE=NO -D CURL_DISABLE_LDAP=YES -D CURL_DISABLE_LDAPS=YES -D CURL_DISABLE_TELNET=YES -D CURL_DISABLE_DICT=YES -D CURL_DISABLE_FILE=YES -D CURL_DISABLE_TFTP=YES -D CURL_DISABLE_RTSP=YES -D CURL_DISABLE_PROXY=YES -D CURL_DISABLE_POP3=YES -D CURL_DISABLE_IMAP=YES -D CURL_DISABLE_SMTP=YES -D CURL_DISABLE_GOPHER=YES -D CURL_ZLIB=YES -D ENABLE_UNIX_SOCKETS=NO -D ENABLE_THREADED_RESOLVER=NO -D ZLIB_ROOT=${{ github.workspace }}/Library/zlib-1.2.11/usr -D ZLIB_LIBRARY=${{ github.workspace }}/Library/zlib-1.2.11/usr/lib/zlibstatic.lib -G Ninja -S ${{ github.workspace }}/curl
          cmake --build libcurl --config Release
          cmake --build libcurl --config Release --target install

      - name: build Foundation
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B foundation -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang-cl -D CMAKE_MT=mt -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-foundation -D dispatch_DIR=${{ github.workspace }}/libdispatch/cmake/modules -D ENABLE_TESTING=NO -D ICU_ROOT=${{ github.workspace }}/Library/icu-67.1 -D ICU_UC_LIBRARY=${{ github.workspace }}/Libary/icu-67.1/usr/lib64/icuuc67.lib -D ICU_I18N_LIBRARY=${{ github.workspace }}/Library/icu-67.1/usr/lib64/icuin67.lib -D LIBXML2_LIBRARY=${{ github.workspace }}/Library/libxml2-2.9.12/usr/lib/libxml2s.lib -D LIBXML2_INCLUDE_DIR=${{ github.workspace }}/Library/libxml2-2.9.12/usr/include/libxml2 -D LIBXML2_DEFINITIONS="/DLIBXML_STATIC" -D CURL_DIR=${{ github.workspace }}\Library\curl-7.77.0\usr\lib\cmake\CURL -D ZLIB_LIBRARY=${{ github.workspace }}\Library\zlib-1.2.11\usr\lib\zlibstatic.lib -D ZLIB_INCLUDE_DIR=${{ github.workspace }}\Library\zlib-1.2.11\usr\include
          cmake --build foundation --config Release

      - name: build XCTest
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B xctest -D CMAKE_BUILD_TYPE=Release -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-xctest -D Foundation_DIR=${{ github.workspace }}/foundation/cmake/modules -D dispatch_DIR=${{ github.workspace }}/libdispatch/cmake/modules -D ENABLE_TESTING=NO
          cmake --build xctest --config Release

      - name: configure runner
        run: |
          echo "${{ github.workspace }}\Library\icu-67.1\usr\bin;$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ github.workspace }}\libdispatch;${{ github.workspace }}\foundation\Foundation;${{ github.workspace }}\xctest;$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "CTEST_OUTPUT_ON_FAILURE=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Test libdispatch
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B libdispatch -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang-cl -D CMAKE_CXX_COMPILER=clang-cl -D CMAKE_MT=mt -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-libdispatch -D BUILD_TESTING=YES -D ENABLE_SWIFT=YES
          cmake --build libdispatch --config Release
          cmake --build libdispatch --config Release --target ExperimentalTest
        continue-on-error: true

      - name: configure runner
        run: |
          echo "CTEST_PARALLEL_LEVEL=4" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Test Foundation
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B foundation -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang-cl -D CMAKE_MT=mt -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-foundation -D dispatch_DIR=${{ github.workspace }}/libdispatch/cmake/modules -D XCTest_DIR=${{ github.workspace }}/xctest/cmake/modules -D ENABLE_TESTING=YES -D ICU_ROOT=${{ github.workspace }}/Library/icu-67.1 -D ICU_UC_LIBRARY=${{ github.workspace }}/Libary/icu-67.1/usr/lib64/icuuc67.lib -D ICU_I18N_LIBRARY=${{ github.workspace }}/Library/icu-67.1/usr/lib64/icuin67.lib -D LIBXML2_LIBRARY=${{ github.workspace }}/Library/libxml2-2.9.12/usr/lib/libxml2s.lib -D LIBXML2_INCLUDE_DIR=${{ github.workspace }}/Library/libxml2-2.9.12/usr/include/libxml2 -D LIBXML2_DEFINITIONS="/DLIBXML_STATIC" -D CURL_DIR=${{ github.workspace }}\Library\curl-7.77.0\usr\lib\cmake\CURL -D ZLIB_LIBRARY=${{ github.workspace }}\Library\zlib-1.2.11\usr\lib\zlibstatic.lib -D ZLIB_INCLUDE_DIR=${{ github.workspace }}\Library\zlib-1.2.11\usr\include
          cmake --build foundation --config Release
          cmake --build foundation --config Release --target test
        continue-on-error: true

      - name: Test XCTest
        run: |
          $SDK_ROOT = cygpath -m $env:SDKROOT
          cmake -B xctest -D CMAKE_BUILD_TYPE=Release -D CMAKE_Swift_FLAGS="-sdk $SDK_ROOT" -G Ninja -S ${{ github.workspace }}/swift-corelibs-xctest -D Foundation_DIR=${{ github.workspace }}/foundation/cmake/modules -D dispatch_DIR=${{ github.workspace }}/libdispatch/cmake/modules -D LLVM_MAIN_SRC_DIR=${{ github.workspace }}/llvm-project/llvm -D ENABLE_TESTING=YES -D XCTEST_PATH_TO_LIBDISPATCH_BUILD=${{ github.workspace }}\libdispatch -D XCTEST_PATH_TO_LIBDISPATCH_SOURCE=${{ github.workspace }}\swift-corelibs-libdispatch -D XCTEST_PATH_TO_FOUNDATION_BUILD=${{ github.workspace }}\foundation
          cmake --build xctest --config Release
          cmake --build xctest --config Release --target check-xctest
        continue-on-error: true
