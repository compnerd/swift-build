name: build-llvm-binaries

on:
  workflow_dispatch:
    inputs:
      llvm_build_tag:
        description: 'LLVM Build Tag'
        required: false

      llvm_version:
        description: 'LLVM Version'
        default: '0.0.0'
        required: false
        type: string

      debug_info:
        description: 'Emit PDBs (Debug Info)'
        default: false
        type: boolean
      signed:
        description: 'Code Sign'
        default: false
        type: boolean
  workflow_call:
    inputs:
      llvm_version:
        description: 'LLVM Version'
        default: '0.0.0'
        required: false
        type: string

      debug_info:
        description: 'Emit PDBs (Debug Info)'
        default: true
        type: boolean
      signed:
        description: 'Code Sign'
        default: false
        type: boolean
    secrets:
      SYMBOL_SERVER_PAT:
        required: true
      CERTIFICATE:
        required: true
      PASSPHRASE:
        required: true

env:
  SCCACHE_DIRECT: yes

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      llvm_project_revision: ${{ steps.context.outputs.llvm_project_revision }}
      zlib_revision: ${{ steps.context.outputs.zlib_revision }}
      CMAKE_C_FLAGS: ${{ steps.context.outputs.CMAKE_C_FLAGS }}
      CMAKE_CXX_FLAGS: ${{ steps.context.outputs.CMAKE_CXX_FLAGS }}
      CMAKE_EXE_LINKER_FLAGS: ${{ steps.context.outputs.CMAKE_EXE_LINKER_FLAGS }}
      CMAKE_SHARED_LINKER_FLAGS: ${{ steps.context.outputs.CMAKE_SHARED_LINKER_FLAGS }}
      debug_info: ${{ steps.context.outputs.debug_info }}
      signed: ${{ steps.context.outputs.signed }}
      llvm_version: ${{ steps.context.outputs.llvm_version }}
      llvm_build_tag: ${{ steps.context.outputs.llvm_build_tag }}
      windows_build_runner: ${{ steps.context.outputs.windows_build_runner }}
      compilers_build_runner: ${{ steps.context.outputs.compilers_build_runner }}
    steps:
      - id: context
        name: Generate Build Context
        run: |
          # TODO(compnerd) can we make this more silent?
          sudo DEBIAN_FRONTEND=noninteractive apt-get -qq update -yq
          sudo DEBIAN_FRONTEND=noninteractive apt-get -qq -o Dpkg::Use-Pty=0 install -yq repo

          # Which branch is this workflow based on
          branch_version_string=${{ inputs.llvm_version || '0.0.0' }}
          if [[ $branch_version_string == *.* ]]; then
            branch_name=$(echo ${branch_version_string} | awk -F. '{ ver=$1"."$2; print (ver == "0.0") ? "main" : "release/"ver }')
          else
            branch_name="release/$branch_version_string"
          fi

          repo init --quiet --groups default --depth 1 -u https://github.com/hylo-lang/llvm-build -b $branch_name
          repo sync --quiet --no-clone-bundle --no-tags --jobs $(nproc --all)

          if [[ "${{ github.event_name }}" == "schedule" || "${{ inputs.debug_info }}" == "true" ]]; then
            echo debug_info=true >> ${GITHUB_OUTPUT}
            echo CMAKE_C_FLAGS="/GS- /Gw /Gy /Oi /Oy /Z7 /Zc:inline /Zc:preprocessor" >> ${GITHUB_OUTPUT}
            echo CMAKE_CXX_FLAGS="/GS- /Gw /Gy /Oi /Oy /Z7 /Zc:inline /Zc:preprocessor /Zc:__cplusplus" >> ${GITHUB_OUTPUT}
            echo CMAKE_EXE_LINKER_FLAGS="-incremental:no -debug -opt:ref -opt:icf" >> ${GITHUB_OUTPUT}
            echo CMAKE_SHARED_LINKER_FLAGS="-incremental:no -debug -opt:ref -opt:icf" >> ${GITHUB_OUTPUT}
          else
            echo debug_info=false >> ${GITHUB_OUTPUT}
            echo CMAKE_C_FLAGS="/GS- /Gw /Gy /Oi /Oy /Zc:inline /Zc:preprocessor" >> ${GITHUB_OUTPUT}
            echo CMAKE_CXX_FLAGS="/GS- /Gw /Gy /Oi /Oy /Zc:inline /Zc:preprocessor /Zc:__cplusplus" >> ${GITHUB_OUTPUT}
            echo CMAKE_EXE_LINKER_FLAGS="" >> ${GITHUB_OUTPUT}
            echo CMAKE_SHARED_LINKER_FLAGS="" >> ${GITHUB_OUTPUT}
          fi

          if [[ "${{ github.event_name }}" == "schedule" || "${{ inputs.signed }}" == "true" ]]; then
            # FIXME(compnerd) enable this when requested
            echo signed=false >> ${GITHUB_OUTPUT}
          else
            echo signed=false >> ${GITHUB_OUTPUT}
          fi

          echo llvm_version=${{ inputs.llvm_version || '0.0.0' }} | tee -a ${GITHUB_OUTPUT}
          if [[ -n "${{ inputs.llvm_build_tag }}" ]] ; then
            echo llvm_build_tag=${{ inputs.llvm_build_tag }} | tee -a ${GITHUB_OUTPUT}
          else
            if [[ "$branch_name" == "main" ]] ; then
              echo llvm_build_tag=$(date +%Y%m%d.$(date +%-H/6 | bc)) | tee -a ${GITHUB_OUTPUT}
            else
              echo llvm_build_tag=llvm-"$branch_version_string"-$(date +%Y%m%d.$(date +%-H/6 | bc)) | tee -a ${GITHUB_OUTPUT}
            fi
          fi

          echo windows_build_runner=${{ vars.WINDOWS_BUILD_RUNNER || 'windows-latest' }} >> ${GITHUB_OUTPUT}
          echo compilers_build_runner=${{ vars.COMPILERS_BUILD_RUNNER || vars.WINDOWS_BUILD_RUNNER || 'windows-latest' }} >> ${GITHUB_OUTPUT}

      - uses: actions/upload-artifact@v4
        with:
          name: stable.xml
          path: stable.xml
          if-no-files-found: ignore

  sqlite:
    needs: [context]
    runs-on: ${{ needs.context.outputs.windows_build_runner }}

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/SourceCache/llvm-build
          show-progress: false

      - name: download sqlite
        run: |
          curl.exe -sL "https://sqlite.org/2023/sqlite-amalgamation-3430200.zip" -o $env:TEMP\sqlite-amalgamation-3430200.zip
          New-Item -ItemType Directory -Path ${{ github.workspace }}\SourceCache\sqlite-3.43.2
          unzip.exe -j -o $env:TEMP\sqlite-amalgamation-3430200.zip -d ${{ github.workspace }}\SourceCache\sqlite-3.43.2

      - name: Copy CMakeLists.txt
        run: Copy-Item ${{ github.workspace }}\SourceCache\llvm-build\cmake\SQLite\CMakeLists.txt -destination ${{ github.workspace }}\SourceCache\sqlite-3.43.2\CMakeLists.txt

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 100M
          key: sccache-windows-${{ matrix.arch }}-sqlite
          variant: sccache

      - name: Configure SQLite
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/sqlite-3.43.2 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_C_FLAGS="${{ needs.context.outputs.CMAKE_C_FLAGS }}" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_FLAGS="${{ needs.context.outputs.CMAKE_CXX_FLAGS }}" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/sqlite-3.43.2/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/sqlite-3.43.2
      - name: Build SQLite
        run: cmake --build ${{ github.workspace }}/BinaryCache/sqlite-3.43.2
      - name: Install SQLite
        run: cmake --build ${{ github.workspace }}/BinaryCache/sqlite-3.43.2 --target install

      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-${{ matrix.arch }}-3.43.2
          path: ${{ github.workspace }}/BuildRoot/Library/sqlite-3.43.2/usr

  build_tools:
    needs: [context]
    runs-on: ${{ needs.context.outputs.windows_build_runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: apple/llvm-project
          ref: ${{ needs.context.outputs.llvm_project_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
          show-progress: false

      - uses: compnerd/gha-setup-vsdevenv@main

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 100M
          key: sccache-windows-amd64-build_tools
          variant: sccache

      - name: Configure Tools
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/0 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_C_FLAGS="${{ needs.context.outputs.CMAKE_C_FLAGS }}" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_FLAGS="${{ needs.context.outputs.CMAKE_CXX_FLAGS }}" `
                -D CMAKE_MT=mt `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D LLVM_ENABLE_ASSERTIONS=NO `
                -D LLVM_ENABLE_LIBEDIT=NO `
                -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb" `
                -D LLDB_ENABLE_PYTHON=NO `
                -D LLDB_INCLUDE_TESTS=NO
      - name: Build llvm-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target llvm-tblgen
      - name: Build clang-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-tblgen
      - name: Build lldb-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target lldb-tblgen
      - name: Build llvm-config
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target llvm-config
      - name: Build clang-pseudo-gen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-pseudo-gen
      - name: Build clang-tidy-confusable-chars-gen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-tidy-confusable-chars-gen

      - uses: actions/upload-artifact@v4
        with:
          name: build-tools
          path: |
            ${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/llvm-config.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-pseudo-gen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-tidy-confusable-chars-gen.exe

  compilers:
    needs: [context, build_tools]
    runs-on: ${{ needs.context.outputs.compilers_build_runner }}

    env:
      # Must be a full version string from https://www.nuget.org/packages/pythonarm64
      PYTHON_VERSION: 3.9.10

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: 'amd64'
            cpu: 'x86_64'
            triple: 'x86_64-unknown-windows-msvc'

          - arch: 'arm64'
            cpu: 'aarch64'
            triple: 'aarch64-unknown-windows-msvc'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-tools
          path: ${{ github.workspace }}/BinaryCache/0/bin

      - uses: actions/checkout@v4
        with:
          repository: apple/llvm-project
          ref: ${{ needs.context.outputs.llvm_project_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
          show-progress: false

      - name: Install Python ${{ env.PYTHON_VERSION }} (Host)
        uses: actions/setup-python@v5
        id: python
        with:
          python-version: '${{ env.PYTHON_VERSION }}'

      # TODO(lxbndr) use actions/cache to improve this step timings
      - name: Install Python ${{ env.PYTHON_VERSION }} (arm64)
        if: matrix.arch == 'arm64'
        run: |
          nuget install pythonarm64 -Version ${{ env.PYTHON_VERSION }}

      - name: Export Python Location
        run: |
          echo "PYTHON_LOCATION_amd64=$env:pythonLocation" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHON_LOCATION_arm64=${{ github.workspace }}\pythonarm64.${{ env.PYTHON_VERSION }}\tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          toolset_version: 14.37.32822
          components: 'Microsoft.VisualStudio.Component.VC.14.37.17.7.x86.x64;Microsoft.VisualStudio.Component.VC.14.37.17.7.ARM64'
          arch: ${{ matrix.arch }}

      - name: Workaround MSVC#10444970
        if: matrix.arch == 'arm64'
        run: |
          $clangTooling = "${{ github.workspace }}/SourceCache/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt"
          Set-Content $clangTooling @"
          $(Get-Content -Raw $clangTooling)
          set_source_files_properties(StandardLibrary.cpp PROPERTIES
            COMPILE_FLAGS "/Od /Gw /Oi /Oy /Gw /Ob2 /Ot /GF")
          "@

          $clangCodeGen = "${{ github.workspace }}/SourceCache/llvm-project/clang/lib/CodeGen/CMakeLists.txt"
          Set-Content $clangCodeGen @"
          $(Get-Content -Raw $clangCodeGen)
          set_source_files_properties(CGBuiltin.cpp PROPERTIES
            COMPILE_FLAGS "/Od /Gw /Oi /Oy /Gw /Ob2 /Ot /GF")
          "@

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 500M
          key: sccache-windows-${{ matrix.arch }}-compilers
          variant: sccache

      - name: Configure Compilers
        run: |
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
            $CACHE="Windows-aarch64.cmake"

          } else {
            $CACHE="Windows-x86_64.cmake"
          }

          $SDKROOT = cygpath -m ${env:SDKROOT}
          $CLANG_LOCATION = cygpath -m (Split-Path (Get-Command clang-cl).Source)
          Remove-Item env:\SDKROOT
          cmake -B ${{ github.workspace }}/BinaryCache/1 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_C_FLAGS="${{ needs.context.outputs.CMAKE_C_FLAGS }}" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_FLAGS="${{ needs.context.outputs.CMAKE_CXX_FLAGS }}" `
                -D CMAKE_MT=mt `
                -D CMAKE_EXE_LINKER_FLAGS="${{ needs.context.outputs.CMAKE_EXE_LINKER_FLAGS }}" `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_SHARED_LINKER_FLAGS="${{ needs.context.outputs.CMAKE_SHARED_LINKER_FLAGS }}" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D CLANG_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe `
                -D CLANG_TIDY_CONFUSABLE_CHARS_GEN=${{ github.workspace }}/BinaryCache/0/bin/clang-tidy-confusable-chars-gen.exe `
                -D LLDB_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe `
                -D LLVM_CONFIG_PATH=${{ github.workspace }}/BinaryCache/0/bin/llvm-config.exe `
                -D LLVM_NATIVE_TOOL_DIR=${{ github.workspace }}/BinaryCache/0/bin `
                -D LLVM_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe `
                -D LLVM_USE_HOST_TOOLS=NO `
                -D CLANG_VENDOR=compnerd.org `
                -D CLANG_VENDOR_UTI=org.compnerd.dt `
                -D PACKAGE_VENDOR=compnerd.org `
                -D LLVM_PARALLEL_LINK_JOBS=2 `
                -D LLVM_APPEND_VC_REV=NO `
                -D LLVM_VERSION_SUFFIX="" `
                -D LLDB_PYTHON_EXE_RELATIVE_PATH=python.exe `
                -D LLDB_PYTHON_EXT_SUFFIX=.pyd `
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages `
                -D Python3_EXECUTABLE=${{ steps.python.outputs.python-path }} `
                -D Python3_INCLUDE_DIR=$env:PYTHON_LOCATION_${{ matrix.arch }}\include `
                -D Python3_LIBRARY=$env:PYTHON_LOCATION_${{ matrix.arch }}\libs\python39.lib `
                -D Python3_ROOT_DIR=$env:pythonLocation

      - name: Build Compiler Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target distribution

      - name: Install Compiler Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target install-distribution-stripped

      - name: Upload Compilers
        uses: actions/upload-artifact@v4
        with:
          name: compilers-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library

      # TODO(compnerd) this takes ~1h due to the size, see if we can compress first
      - uses: actions/upload-artifact@v4
        if: false # ${{ needs.context.outputs.debug_info }}
        with:
          name: compilers-${{ matrix.arch }}-debug-info
          path: |
            ${{ github.workspace }}/BinaryCache/1/**/*.pdb

      - uses: microsoft/action-publish-symbols@v2.1.6
        if: ${{ needs.context.outputs.debug_info }}
        with:
          accountName: ${{ vars.SYMBOL_SERVER_ACCOUNT }}
          personalAccessToken: ${{ secrets.SYMBOL_SERVER_PAT }}
          symbolsFolder: ${{ github.workspace }}/BinaryCache/1

  zlib:
    needs: [context]
    runs-on: ${{ needs.context.outputs.windows_build_runner }}

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v4
        with:
          repository: madler/zlib
          ref: ${{ needs.context.outputs.zlib_revision }}
          path: ${{ github.workspace }}/SourceCache/zlib
          show-progress: false

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 100M
          key: sccache-windows-${{ matrix.arch }}-zlib
          variant: sccache

      - name: Configure zlib
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/zlib-1.3 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_C_FLAGS="${{ needs.context.outputs.CMAKE_C_FLAGS }}" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_FLAGS="${{ needs.context.outputs.CMAKE_CXX_FLAGS }}" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/zlib-1.3/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/zlib `
                -D SKIP_INSTALL_FILES=YES
      - name: Build zlib
        run: cmake --build ${{ github.workspace }}/BinaryCache/zlib-1.3
      - name: Install zlib
        run: cmake --build ${{ github.workspace }}/BinaryCache/zlib-1.3 --target install

      - uses: actions/upload-artifact@v4
        with:
          name: zlib-${{ matrix.arch }}-1.3
          path: ${{ github.workspace }}/BuildRoot/Library/zlib-1.3/usr


  sdk:
    continue-on-error: ${{ matrix.arch != 'amd64' }}
    needs: [context, compilers]
    runs-on: ${{ needs.context.outputs.windows_build_runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: 'amd64'
            cpu: 'x86_64'
            triple: 'x86_64-unknown-windows-msvc'

          - arch: 'arm64'
            cpu: 'aarch64'
            triple: 'aarch64-unknown-windows-msvc'

          - arch: 'x86'
            cpu: 'i686'
            triple: 'i686-unknown-windows-msvc'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zlib-${{ matrix.arch }}-1.3
          path: ${{ github.workspace }}/BuildRoot/Library/zlib-1.3/usr
      - name: Download Compilers
        uses: actions/download-artifact@v4
        with:
          name: compilers-amd64
          path: ${{ github.workspace }}/BuildRoot/Library

      - uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ needs.context.outputs.llvm_project_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
          show-progress: false

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure LLVM
        run: |
          Remove-Item env:\SDKROOT
          cmake -B ${{ github.workspace }}/BinaryCache/llvm `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="${{ needs.context.outputs.CMAKE_C_FLAGS }}" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="${{ needs.context.outputs.CMAKE_CXX_FLAGS }}" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D LLVM_ENABLE_ASSERTIONS=YES


      - uses: actions/upload-artifact@v4
        with:
          name: windows-sdk-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform

      - uses: microsoft/action-publish-symbols@v2.1.6
        if: ${{ needs.context.outputs.debug_info }}
        with:
          accountName: ${{ vars.SYMBOL_SERVER_ACCOUNT }}
          personalAccessToken: ${{ secrets.SYMBOL_SERVER_PAT }}
          symbolsFolder: ${{ github.workspace }}/BinaryCache

  devtools:
    needs: [context, sqlite, compilers, sdk]
    runs-on: ${{ needs.context.outputs.windows_build_runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: 'amd64'
            cpu: 'x86_64'
            triple: 'x86_64-unknown-windows-msvc'

          - arch: 'arm64'
            cpu: 'aarch64'
            triple: 'aarch64-unknown-windows-msvc'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-${{ matrix.arch }}-3.43.2
          path: ${{ github.workspace }}/BuildRoot/Library/sqlite-3.43.2/usr
      - name: Download Compilers
        uses: actions/download-artifact@v4
        with:
          name: compilers-amd64
          path: ${{ github.workspace }}/BuildRoot/Library
      - uses: actions/download-artifact@v4
        with:
          name: windows-sdk-amd64
          path: ${{ github.workspace }}/BinaryCache
      - name: Download SDK
        uses: actions/download-artifact@v4
        with:
          name: windows-sdk-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform

      - run: |
          $RTLPath = cygpath -w ${{ github.workspace }}/BinaryCache/Developer/SDKs/Windows.sdk/usr/bin
          echo ${RTLPath} | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: devtools-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot-DevTools/Library

      - uses: microsoft/action-publish-symbols@v2.1.6
        if: ${{ needs.context.outputs.debug_info }}
        with:
          accountName: ${{ vars.SYMBOL_SERVER_ACCOUNT }}
          personalAccessToken: ${{ secrets.SYMBOL_SERVER_PAT }}
          symbolsFolder: ${{ github.workspace }}/BinaryCache
