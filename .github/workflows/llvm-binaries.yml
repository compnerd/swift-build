name: build-llvm-binaries

on:
  workflow_dispatch:
    inputs:
      llvm_version:
        description: 'LLVM Version'
        default: '17.0.6'
        required: false
        type: string

      debug_info:
        description: 'Emit PDBs (Debug Info)'
        default: false
        type: boolean

env:
  SCCACHE_DIRECT: yes

jobs:
  build_tools:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{ inputs.llvm_version }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
          show-progress: false

      - uses: compnerd/gha-setup-vsdevenv@main

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 100M
          key: sccache-windows-amd64-build_tools
          variant: sccache

      - name: Configure Tools
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/0 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_MT=mt `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D LLVM_ENABLE_ASSERTIONS=NO `
                -D LLVM_ENABLE_LIBEDIT=NO `
                -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb" `
                -D LLDB_ENABLE_PYTHON=NO `
                -D LLDB_INCLUDE_TESTS=NO
      - name: Build llvm-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target llvm-tblgen
      - name: Build clang-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-tblgen
      - name: Build lldb-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target lldb-tblgen
      - name: Build llvm-config
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target llvm-config
      - name: Build clang-pseudo-gen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-pseudo-gen
      - name: Build clang-tidy-confusable-chars-gen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-tidy-confusable-chars-gen

      - uses: actions/upload-artifact@v4
        with:
          name: build-tools
          path: |
            ${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/llvm-config.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-pseudo-gen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-tidy-confusable-chars-gen.exe

  compilers:
    needs: [build_tools]
    runs-on: windows-latest

    env:
      # Must be a full version string from https://www.nuget.org/packages/pythonarm64
      PYTHON_VERSION: 3.9.10

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: 'amd64'
            cpu: 'x86_64'
            triple: 'x86_64-unknown-windows-msvc'

          - arch: 'arm64'
            cpu: 'aarch64'
            triple: 'aarch64-unknown-windows-msvc'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-tools
          path: ${{ github.workspace }}/BinaryCache/0/bin

      - uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{ inputs.llvm_version }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
          show-progress: false
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/SourceCache/llvm-build

      - name: Install Python ${{ env.PYTHON_VERSION }} (Host)
        uses: actions/setup-python@v5
        id: python
        with:
          python-version: '${{ env.PYTHON_VERSION }}'

      # TODO(lxbndr) use actions/cache to improve this step timings
      - name: Install Python ${{ env.PYTHON_VERSION }} (arm64)
        if: matrix.arch == 'arm64'
        run: |
          nuget install pythonarm64 -Version ${{ env.PYTHON_VERSION }}

      - name: Export Python Location
        run: |
          echo "PYTHON_LOCATION_amd64=$env:pythonLocation" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHON_LOCATION_arm64=${{ github.workspace }}\pythonarm64.${{ env.PYTHON_VERSION }}\tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          toolset_version: 14.37.32822
          components: 'Microsoft.VisualStudio.Component.VC.14.37.17.7.x86.x64;Microsoft.VisualStudio.Component.VC.14.37.17.7.ARM64'
          arch: ${{ matrix.arch }}

      - name: Workaround MSVC#10444970
        if: matrix.arch == 'arm64'
        run: |
          $clangTooling = "${{ github.workspace }}/SourceCache/llvm-project/clang/lib/Tooling/Inclusions/Stdlib/CMakeLists.txt"
          Set-Content $clangTooling @"
          $(Get-Content -Raw $clangTooling)
          set_source_files_properties(StandardLibrary.cpp PROPERTIES
            COMPILE_FLAGS "/Od /Gw /Oi /Oy /Gw /Ob2 /Ot /GF")
          "@

          $clangCodeGen = "${{ github.workspace }}/SourceCache/llvm-project/clang/lib/CodeGen/CMakeLists.txt"
          Set-Content $clangCodeGen @"
          $(Get-Content -Raw $clangCodeGen)
          set_source_files_properties(CGBuiltin.cpp PROPERTIES
            COMPILE_FLAGS "/Od /Gw /Oi /Oy /Gw /Ob2 /Ot /GF")
          "@

      - name: Setup sccache
        uses: compnerd/ccache-action@sccache-0.7.4
        with:
          max-size: 500M
          key: sccache-windows-${{ matrix.arch }}-compilers
          variant: sccache

      - name: Configure Compilers
        run: |
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
            $CACHE="Windows-aarch64.cmake"

          } else {
            $CACHE="Windows-x86_64.cmake"
          }

          $CLANG_LOCATION = cygpath -m (Split-Path (Get-Command clang-cl).Source)
          cmake --trace-expand -B ${{ github.workspace }}/BinaryCache/1 `
                -C ${{ github.workspace }}/SourceCache/llvm-build/cmake/caches/$CACHE `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_COMPILER_LAUNCHER=sccache `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D CLANG_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe `
                -D CLANG_TIDY_CONFUSABLE_CHARS_GEN=${{ github.workspace }}/BinaryCache/0/bin/clang-tidy-confusable-chars-gen.exe `
                -D LLDB_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe `
                -D LLVM_CONFIG_PATH=${{ github.workspace }}/BinaryCache/0/bin/llvm-config.exe `
                -D LLVM_NATIVE_TOOL_DIR=${{ github.workspace }}/BinaryCache/0/bin `
                -D LLVM_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe `
                -D LLVM_USE_HOST_TOOLS=NO `
                -D CLANG_VENDOR=compnerd.org `
                -D CLANG_VENDOR_UTI=org.compnerd.dt `
                -D PACKAGE_VENDOR=compnerd.org `
                -D LLVM_PARALLEL_LINK_JOBS=2 `
                -D LLVM_APPEND_VC_REV=NO `
                -D LLVM_VERSION_SUFFIX="" `
                -D LLDB_PYTHON_EXE_RELATIVE_PATH=python.exe `
                -D LLDB_PYTHON_EXT_SUFFIX=.pyd `
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages `
                -D Python3_EXECUTABLE=${{ steps.python.outputs.python-path }} `
                -D Python3_INCLUDE_DIR=$env:PYTHON_LOCATION_${{ matrix.arch }}\include `
                -D Python3_LIBRARY=$env:PYTHON_LOCATION_${{ matrix.arch }}\libs\python39.lib `
                -D Python3_ROOT_DIR=$env:pythonLocation

      - name: Build Compiler Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target distribution

      - name: Install Compiler Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target install-distribution-stripped

      - name: Upload Compilers
        uses: actions/upload-artifact@v4
        with:
          name: compilers-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library

      # TODO(compnerd) this takes ~1h due to the size, see if we can compress first
      - uses: actions/upload-artifact@v4
        if: false # ${{ inputs.debug_info }}
        with:
          name: compilers-${{ matrix.arch }}-debug-info
          path: |
            ${{ github.workspace }}/BinaryCache/1/**/*.pdb

      - uses: microsoft/action-publish-symbols@v2.1.6
        if: ${{ inputs.debug_info }}
        with:
          accountName: ${{ vars.SYMBOL_SERVER_ACCOUNT }}
          personalAccessToken: ${{ secrets.SYMBOL_SERVER_PAT }}
          symbolsFolder: ${{ github.workspace }}/BinaryCache/1

