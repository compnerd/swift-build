name: swift-toolchain

on:
  workflow_dispatch:
    inputs:
      # depdendencies
      icu_revision:
        description: 'ICU revision'
        required: true
        default: 'refs/heads/maint/maint-69'
      curl_revision:
        description: 'libcurl revision'
        required: true
        default: 'refs/tags/curl-7_77_0'
      libxml2_revision:
        description: 'libxml2 revision'
        required: true
        default: 'refs/tags/v2.9.12'
      zlib_revision:
        description: 'zlib revision to build'
        required: true
        default: 'refs/heads/master'

      # toolchain
      llvm_revision:
        description: 'llvm-project revision'
        required: true
        default: 'refs/heads/stable/20210726'
      swift_tag:
        description: 'swift repositories tag'
        required: true
        default: 'refs/heads/main'

      # devtools
      yams_revision:
        description: 'Yams revision'
        required: true
        default: 'refs/heads/main'
      swift_argument_parser_revision:
        description: 'swift-argument-parser revision'
        required: true
        default: 'refs/heads/main'
      swift_crypto_revision:
        description: 'swift-crypto revision'
        required: true
        default: 'refs/heads/main'
      swift_collections_revision:
        description: 'swift-collections revision'
        required: true
        default: 'refs/heads/main'

jobs:
  # TODO(compnerd) use environment variables for package version information and wire that throughout

  sqlite:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/SourceCache/swift-build

      - name: download sqlite
        run: |
          curl.exe -sL "https://sqlite.org/2021/sqlite-amalgamation-3360000.zip" -o $env:TEMP\sqlite-amalgamation-3360000.zip
          New-Item -ItemType Directory -Path ${{ github.workspace }}\SourceCache\sqlite-3.36.0
          unzip.exe -j -o $env:TEMP\sqlite-amalgamation-3360000.zip -d ${{ github.workspace }}\SourceCache\sqlite-3.36.0

      - name: Copy CMakeLists.txt
        run: Copy-Item ${{ github.workspace }}\SourceCache\swift-build\cmake\SQLite\CMakeLists.txt -destination ${{ github.workspace }}\SourceCache\sqlite-3.36.0\CMakeLists.txt

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure SQLite
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/sqlite-3.36.0 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/sqlite-3.36.0
      - name: Build SQLite
        run: cmake --build ${{ github.workspace }}/BinaryCache/sqlite-3.36.0
      - name: Install SQLite
        run: cmake --build ${{ github.workspace }}/BinaryCache/sqlite-3.36.0 --target install

      - uses: actions/upload-artifact@v2
        with:
          name: sqlite-${{ matrix.arch }}-3.36.0
          path: ${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr

  icu:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/SourceCache/swift-build

      - uses: actions/checkout@v2
        with:
          repository: unicode-org/icu
          ref: ${{ github.event.inputs.icu_revision }}
          path: ${{ github.workspace }}/SourceCache/icu

      - name: Copy CMakeLists.txt
        run: Copy-Item ${{ github.workspace }}\SourceCache\swift-build\cmake\ICU\CMakeLists69.txt -destination ${{ github.workspace }}\SourceCache\icu\icu4c\CMakeLists.txt

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure ICU
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/icu-69.1 `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TOOLS=$env:BUILD_TOOLS `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/icu/icu4c
        env:
          BUILD_TOOLS: ${{ matrix.arch == 'amd64' }}
      - name: Build ICU
        run: cmake --build ${{ github.workspace }}/BinaryCache/icu-69.1
      - name: Install ICU
        run: cmake --build ${{ github.workspace }}/BinaryCache/icu-69.1 --target install

      - uses: actions/upload-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-69.1
          path: ${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr

  build_tools:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          repository: apple/llvm-project
          ref: ${{ github.event.inputs.llvm_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-cmark
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-cmark
      - uses: actions/checkout@v2
        with:
          repository: apple/swift
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-libdispatch
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Configure Tools
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/0 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D LLVM_ENABLE_ASSERTIONS=NO `
                -D LLVM_ENABLE_LIBEDIT=NO `
                -D LLVM_ENABLE_LIBXML2=NO `
                -D LLVM_ENABLE_PROJECTS="clang;lldb" `
                -D LLVM_EXTERNAL_PROJECTS="cmark;swift" `
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift-cmark `
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift `
                -D LLDB_ENABLE_PYTHON=NO `
                -D LLDB_INCLUDE_TESTS=NO `
                -D LLDB_ENABLE_SWIFT_SUPPORT=NO `
                -D SWIFT_INCLUDE_DOCS=NO `
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch `
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO `
                -D SWIFT_BUILD_STATIC_STDLIB=NO `
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO `
                -D SWIFT_BUILD_STATIC_SDK_OVERLAY=NO
      - name: Build llvm-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target llvm-tblgen
      - name: Build clang-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target clang-tblgen
      - name: Build lldb-tblgen
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target lldb-tblgen
      - name: Build swift-def-to-yaml-converter
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target swift-def-to-yaml-converter
      - name: Build swift-serialize-diagnostics
        run: cmake --build ${{ github.workspace }}/BinaryCache/0 --target swift-serialize-diagnostics

      - uses: actions/upload-artifact@v2
        with:
          name: build-tools
          path: |
            ${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe
            ${{ github.workspace }}/BinaryCache/0/bin/swift-def-to-yaml-converter.exe
            ${{ github.workspace }}/BinaryCache/0/bin/swift-serialize-diagnostics.exe

  toolchain:
    runs-on: windows-latest
    needs: [icu, build_tools]

    env:
      PYTHON_VERSION: 3.9.7

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-69.1
          path: ${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr

      - uses: actions/download-artifact@v2
        with:
          name: build-tools
          path: ${{ github.workspace }}/BinaryCache/0/bin

      - uses: actions/checkout@v2
        with:
          repository: apple/llvm-project
          ref: ${{ github.event.inputs.llvm_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-cmark
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-cmark
      - uses: actions/checkout@v2
        with:
          repository: apple/swift
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-libdispatch
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch

      - name: Install Python ${{ env.PYTHON_VERSION }} (Host)
        uses: actions/setup-python@v2
        with:
          python-version: '${{ env.PYTHON_VERSION }}'

      # TODO(lxbndr) use actions/cache to improve this step timings
      - name: Install Python ${{ env.PYTHON_VERSION }} (arm64)
        if: matrix.arch == 'arm64'
        run: |
          nuget install pythonarm64 -Version ${{ env.PYTHON_VERSION }}

      - name: Export Python Location
        run: |
          echo "PYTHON_LOCATION_amd64=$env:pythonLocation" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHON_LOCATION_arm64=${{ github.workspace }}\pythonarm64.${{ env.PYTHON_VERSION }}\tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: 'Copy Support Files'
        run: |
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"

      # TODO(compnerd) switch this to Python 3.6.8
      - name: Configure Toolchain
        run: |
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
            $CACHE="Windows-arm64.cmake"

            # FIXME(compnerd) re-enable SourceKit after we sort out libdispatch
            $SWIFT_BUILD_SOURCEKIT="-D SWIFT_BUILD_SOURCEKIT=NO"
            (Get-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake).replace(' sourcekit-inproc', '') | Set-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake

            # FIXME(compnerd) re-enable SyntaxParser after we sort out libdispatch
            $SWIFT_BUILD_SYNTAXPARSERLIB="-D SWIFT_BUILD_SYNTAXPARSERLIB=NO"
            (Get-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake).replace(' parser-lib', '') | Set-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake

            # FIXME(compnerd) re-enable runtimes after we sort out compiler-rt
            (Get-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake).replace(' runtimes', '') | Set-Content ${{ github.workspace }}/SourceCache/swift/cmake/caches/Windows-arm64.cmake
          } else {
            $CACHE="Windows-x86_64.cmake"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/1 `
                -C ${{ github.workspace }}/SourceCache/swift/cmake/caches/${CACHE} `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D PACKAGE_VENDOR=compnerd.org `
                -D CLANG_VENDOR=compnerd.org `
                -D CLANG_VENDOR_UTI=org.compnerd.dt `
                -D SWIFT_VENDOR=compnerd.org `
                -D LLVM_APPEND_VC_REV=NO `
                -D LLVM_VERSION_SUFFIX="" `
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages `
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES `
                -D SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=YES `
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=YES `
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift `
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift-cmark `
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch `
                -D SWIFT_WINDOWS_aarch64_ICU_UC_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include/unicode `
                -D SWIFT_WINDOWS_aarch64_ICU_UC=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D SWIFT_WINDOWS_aarch64_ICU_I18N_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include `
                -D SWIFT_WINDOWS_aarch64_ICU_I18N=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib `
                -D SWIFT_WINDOWS_x86_64_ICU_UC_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include/unicode `
                -D SWIFT_WINDOWS_x86_64_ICU_UC=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D SWIFT_WINDOWS_x86_64_ICU_I18N_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include `
                -D SWIFT_WINDOWS_x86_64_ICU_I18N=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib `
                -D LLVM_USE_HOST_TOOLS=NO `
                -D LLVM_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/llvm-tblgen.exe `
                -D CLANG_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/clang-tblgen.exe `
                -D LLDB_TABLEGEN=${{ github.workspace }}/BinaryCache/0/bin/lldb-tblgen.exe `
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=${{ github.workspace }}/BinaryCache/0/bin `
                -D LLVM_PARALLEL_LINK_JOBS=2 `
                -D SWIFT_PARALLEL_LINK_JOBS=2 `
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO `
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO `
                -D Python3_ROOT_DIR=$env:pythonLocation `
                -D Python3_INCLUDE_DIR=$env:PYTHON_LOCATION_${{ matrix.arch }}\include `
                -D Python3_LIBRARY=""$Env:PYTHON_LOCATION_${{ matrix.arch }}\libs\python39.lib `
                ${SWIFT_BUILD_SOURCEKIT} `
                ${SWIFT_BUILD_SYNTAXPARSERLIB}
      - name: Build Toolchain Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target distribution
      - name: Install Toolchain Distribution
        run: cmake --build ${{ github.workspace }}/BinaryCache/1 --target install-distribution-stripped

      - uses: actions/upload-artifact@v2
        with:
          name: toolchain-${{ matrix.arch }}
          path: |
            ${{ github.workspace }}/BuildRoot/Library
            !${{ github.workspace }}/BuildRoot/Library/icu-69.1

  zlib:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v2
        with:
          repository: madler/zlib
          ref: ${{ github.event.inputs.zlib_revision }}
          path: ${{ github.workspace }}/SourceCache/zlib

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure zlib
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/zlib-1.2.11 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/zlib `
                -D SKIP_INSTALL_FILES=YES
      - name: Build zlib
        run: cmake --build ${{ github.workspace }}/BinaryCache/zlib-1.2.11
      - name: Install zlib
        run: cmake --build ${{ github.workspace }}/BinaryCache/zlib-1.2.11 --target install

      - uses: actions/upload-artifact@v2
        with:
          name: zlib-${{ matrix.arch }}-1.2.11
          path: ${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr

  curl:
    runs-on: windows-latest
    needs: zlib

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v2
        with:
          repository: curl/curl
          ref: ${{ github.event.inputs.curl_revision }}
          path: ${{ github.workspace }}/SourceCache/curl

      - uses: actions/download-artifact@v2
        with:
          name: zlib-${{ matrix.arch }}-1.2.11
          path: ${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure curl
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/curl-7.77.0 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/curl-7.77.0/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/curl `
                -D BUILD_TESTING=NO `
                -D BUILD_CURL_EXE=NO `
                -D CMAKE_USE_OPENSSL=NO `
                -D CURL_CA_PATH=none `
                -D CMAKE_USE_SCHANNEL=YES `
                -D CMAKE_USE_LIBSSH2=NO `
                -D HAVE_POLL_FINE=NO `
                -D CURL_DISABLE_LDAP=YES `
                -D CURL_DISABLE_LDAPS=YES `
                -D CURL_DISABLE_TELNET=YES `
                -D CURL_DISABLE_DICT=YES `
                -D CURL_DISABLE_FILE=YES `
                -D CURL_DISABLE_TFTP=YES `
                -D CURL_DISABLE_RTSP=YES `
                -D CURL_DISABLE_PROXY=YES `
                -D CURL_DISABLE_POP3=YES `
                -D CURL_DISABLE_IMAP=YES `
                -D CURL_DISABLE_SMTP=YES `
                -D CURL_DISABLE_GOPHER=YES `
                -D CURL_ZLIB=YES `
                -D ENABLE_UNIX_SOCKETS=NO `
                -D ENABLE_THREADED_RESOLVER=NO `
                -D ZLIB_ROOT=${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr  `
                -D ZLIB_LIBRARY=${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr/lib/zlibstatic.lib
      - name: Build curl
        run: cmake --build ${{ github.workspace }}/BinaryCache/curl-7.77.0
      - name: Install curl
        run: cmake --build ${{ github.workspace }}/BinaryCache/curl-7.77.0 --target install

      - uses: actions/upload-artifact@v2
        with:
          name: curl-${{ matrix.arch }}-7.77.0
          path: ${{ github.workspace }}/BuildRoot/Library/curl-7.77.0/usr

  libxml2:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64', 'arm64', 'x86']

    steps:
      - uses: actions/checkout@v2
        with:
          repository: gnome/libxml2
          ref: ${{ github.event.inputs.libxml2_revision }}
          path: ${{ github.workspace }}/SourceCache/libxml2

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Configure libxml2
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/libxml2-2.9.12 `
                -D BUILD_SHARED_LIBS=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/libxml2-2.9.12/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/libxml2 `
                -D LIBXML2_WITH_ICONV=NO `
                -D LIBXML2_WITH_ICU=NO `
                -D LIBXML2_WITH_LZMA=NO `
                -D LIBXML2_WITH_PYTHON=NO `
                -D LIBXML2_WITH_TESTS=NO `
                -D LIBXML2_WITH_THREADS=YES `
                -D LIBXML2_WITH_ZLIB=NO
      - name: Build libxml2
        run: cmake --build ${{ github.workspace }}/BinaryCache/libxml2-2.9.12
      - name: Install libxml2
        run: cmake --build ${{ github.workspace }}/BinaryCache/libxml2-2.9.12 --target install

      - uses: actions/upload-artifact@v2
        with:
          name: libxml2-${{ matrix.arch }}-2.9.12
          path: ${{ github.workspace }}/BuildRoot/Library/libxml2-2.9.12/usr

  sdk:
    runs-on: windows-latest
    needs: [icu, libxml2, curl, zlib, toolchain]

    # TODO(compnerd) use dictionaries to track triples for architecture and wire that in rather than powershell scripting
    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'x86']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-69.1
          path: ${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr

      - uses: actions/download-artifact@v2
        with:
          name: libxml2-${{ matrix.arch }}-2.9.12
          path: ${{ github.workspace }}/BuildRoot/Library/libxml2-2.9.12/usr

      - uses: actions/download-artifact@v2
        with:
          name: curl-${{ matrix.arch }}-7.77.0
          path: ${{ github.workspace }}/BuildRoot/Library/curl-7.77.0/usr

      - uses: actions/download-artifact@v2
        with:
          name: zlib-${{ matrix.arch }}-1.2.11
          path: ${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr

      - uses: actions/download-artifact@v2
        with:
          name: toolchain-amd64
          path: ${{ github.workspace }}/BuildRoot/Library

      - uses: actions/checkout@v2
        with:
          repository: apple/llvm-project
          ref: ${{ github.event.inputs.llvm_revision }}
          path: ${{ github.workspace }}/SourceCache/llvm-project
      - uses: actions/checkout@v2
        with:
          repository: apple/swift
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-libdispatch
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-foundation
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-corelibs-foundation
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-corelibs-xctest
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-corelibs-xctest

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: 'Copy Support Files'
        run: |
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"

      - name: Configure LLVM
        run:
          cmake -B ${{ github.workspace }}/BinaryCache/llvm `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/llvm-project/llvm `
                -D LLVM_ENABLE_ASSERTIONS=YES

      - name: Configure Swift Standard Library
        run: |
          if ( "${{ matrix.arch }}" -eq "x86" ) {
            $CACHE="Runtime-Windows-i686.cmake"
            $CMAKE_Swift_COMPILER_TARGET="i686-unknown-windows-msvc"
            $MSVC_C_ARCHITECTURE_ID="-D MSVC_C_ARCHITECTURE_ID=x86"
            $MSVC_CXX_ARCHITECTURE_ID="-D MSVC_CXX_ARCHITECTURE_ID=x86"
          } else {
            $CACHE="Runtime-Windows-x86_64.cmake"
            $CMAKE_Swift_COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          cmake -B ${{ github.workspace }}/BinaryCache/swift `
                -C ${{ github.workspace }}/SourceCache/swift/cmake/caches/${CACHE} `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr `
                ${MSVC_C_ARCHITECTURE_ID} `
                ${MSVC_CXX_ARCHITECTURE_ID} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift `
                -D CMAKE_Swift_COMPILER_TARGET=${CMAKE_Swift_COMPILER_TARGET} `
                -D LLVM_DIR=${{ github.workspace }}/BinaryCache/llvm/lib/cmake/llvm `
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin `
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch `
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES `
                -D SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=YES `
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=YES `
                -D SWIFT_WINDOWS_aarch64_ICU_UC_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include/unicode `
                -D SWIFT_WINDOWS_aarch64_ICU_UC=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D SWIFT_WINDOWS_aarch64_ICU_I18N_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include `
                -D SWIFT_WINDOWS_aarch64_ICU_I18N=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib `
                -D SWIFT_WINDOWS_i686_ICU_UC_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include/unicode `
                -D SWIFT_WINDOWS_i686_ICU_UC=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D SWIFT_WINDOWS_i686_ICU_I18N_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include `
                -D SWIFT_WINDOWS_i686_ICU_I18N=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib `
                -D SWIFT_WINDOWS_x86_64_ICU_UC_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include/unicode `
                -D SWIFT_WINDOWS_x86_64_ICU_UC=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D SWIFT_WINDOWS_x86_64_ICU_I18N_INCLUDE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/include `
                -D SWIFT_WINDOWS_x86_64_ICU_I18N=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib
      - name: Build Swift Standard Library
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift
      - name: Install Swift Standard Library
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift --target install


      - name: Configure libdispstch
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "x86" ) {
            $COMPILER_TARGET="i686-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=x86"
            $MSVC_C_ARCHITECTURE_ID="-D MSVC_C_ARCHITECTURE_ID=x86"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/libdispatch `
                -D BUILD_SHARED_LIBS=YES `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr `
                -D CMAKE_SWIFT_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                ${MSVC_C_ARCHITECTURE_ID} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-corelibs-libdispatch `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D BUILD_TESTING=NO `
                -D ENABLE_SWIFT=YES
      - name: Build libdispatch
        run: cmake --build ${{ github.workspace }}/BinaryCache/libdispatch

      - name: Configure Foundation
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "x86" ) {
            $COMPILER_TARGET="i686-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=x86"
            $MSVC_C_ARCHITECTURE_ID="-D MSVC_C_ARCHITECTURE_ID=x86"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/foundation `
                -D BUILD_SHARED_LIBS=YES `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                ${MSVC_C_ARCHITECTURE_ID} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-corelibs-foundation `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D ENABLE_TESTING=NO `
                -D dispatch_DIR=${{ github.workspace }}/BinaryCache/libdispatch/cmake/modules `
                -D ICU_ROOT=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr `
                -D ICU_UC_LIBRARY_RELEASE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuuc69.lib `
                -D ICU_I18N_LIBRARY_RELEASE=${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr/lib/icuin69.lib `
                -D LIBXML2_LIBRARY=${{ github.workspace }}/BuildRoot/Library/libxml2-2.9.12/usr/lib/libxml2s.lib `
                -D LIBXML2_INCLUDE_DIR=${{ github.workspace }}/BuildRoot/Library/libxml2-2.9.12/usr/include/libxml2 `
                -D LIBXML2_DEFINITIONS="/DLIBXML_STATIC" `
                -D CURL_DIR=${{ github.workspace }}/BuildRoot/Library/curl-7.77.0/usr/lib/cmake/CURL `
                -D ZLIB_ROOT=${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr `
                -D ZLIB_LIBRARY=${{ github.workspace }}/BuildRoot/Library/zlib-1.2.11/usr/lib/zlibstatic.lib
      - name: Build foundation
        run: cmake --build ${{ github.workspace }}/BinaryCache/foundation

      # TODO(compnerd) correctly version XCTest
      - name: Configure xctest
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "x86" ) {
            $COMPILER_TARGET="i686-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=x86"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/xctest `
                -D BUILD_SHARED_LIBS=YES `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-corelibs-xctest `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D ENABLE_TESTING=NO `
                -D dispatch_DIR=${{ github.workspace }}/BinaryCache/libdispatch/cmake/modules `
                -D Foundation_DIR=${{ github.workspace }}/BinaryCache/foundation/cmake/modules
      - name: Build xctest
        run: cmake --build ${{ github.workspace }}/BinaryCache/xctest

      - name: Install libdispatch
        run: cmake --build ${{ github.workspace }}/BinaryCache/libdispatch --target install
      - name: Install foundation
        run: cmake --build ${{ github.workspace }}/BinaryCache/foundation --target install
      - name: Install xctest
        run: cmake --build ${{ github.workspace }}/BinaryCache/xctest --target install

      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os
            import plistlib

            info_plist = r'${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Info.plist'
            with open(os.path.normpath(info_plist), 'wb') as plist:
              # TODO(compnerd) derive this from the install directory
              plistlib.dump({ 'DefaultProperties': { 'XCTEST_VERSION': 'development', 'SWIFTC_FLAGS': ['-use-ld=lld'] } }, plist)

            sdk_settings_plist = r'${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/SDKSettings.plist'
            with open(os.path.normpath(sdk_settings_plist), 'wb') as plist:
              # TODO(compnerd) derive this from the CMAKE_BUILD_TYPE for the
              # runtime.
              plistlib.dump({ 'DefaultProperties': { 'DEFAULT_USE_RUNTIME': 'MD' } }, plist)

      - uses: actions/upload-artifact@v2
        with:
          name: windows-sdk-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform

  devtools:
    runs-on: windows-latest
    needs: [sqlite, toolchain, sdk]

    # TODO(compnerd) use dictionaries to track triples for architecture and wire that in rather than powershell scripting
    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sqlite-${{ matrix.arch }}-3.36.0
          path: ${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr

      - uses: actions/download-artifact@v2
        with:
          name: toolchain-amd64
          path: ${{ github.workspace }}/BuildRoot/Library

      - uses: actions/download-artifact@v2
        with:
          name: windows-sdk-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform

      - uses: actions/checkout@v2
        with:
          repository: apple/indexstore-db
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/indexstore-db
      - uses: actions/checkout@v2
        with:
          repository: apple/sourcekit-lsp
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/sourcekit-lsp
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-argument-parser
          ref: ${{ github.event.inputs.swift_argument_parser_revision }}
          path: ${{ github.workspace }}/SourceCache/swift-argument-parser
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-collections
          ref: ${{ github.event.inputs.swift_collections_revision }}
          path: ${{ github.workspace }}/SourceCache/swift-collections
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-crypto
          ref: ${{ github.event.inputs.swift_crypto_revision }}
          path: ${{ github.workspace }}/SourceCache/swift-crypto
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-driver
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-driver
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-llbuild
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-llbuild
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-package-manager
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-package-manager
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-tools-support-core
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift-tools-support-core
      - uses: actions/checkout@v2
        with:
          repository: jpsim/Yams
          ref: ${{ github.event.inputs.yams_revision }}
          path: ${{ github.workspace }}/SourceCache/Yams
      - uses: actions/checkout@v2
        with:
          repository: apple/swift
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: 'Copy Support Files'
        run: |
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
          Copy-Item "${{ github.workspace }}\SourceCache\swift\stdlib\public\Platform\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"

      - name: Configure swift-argument-parser
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-argument-parser `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-argument-parser `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET}
      - name: Build swift-argument-parser
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-argument-parser

      - name: Configure swift-collections
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-collections `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-collections `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET}
      - name: Build swift-collections
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-collections

      - name: Configure swift-crypto
        run: |
          # Workaround CMake 3.20 issue
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-crypto `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-crypto `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET}
      - name: Build swift-crypto
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-crypto

      - name: Configure Yams
        run: |
          # Workaround CMake 3.20 issue
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/yams `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/Yams `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET}
      - name: Build Yams
        run: cmake --build ${{ github.workspace }}/BinaryCache/yams

      - name: Configure swift-llbuild
        run: |
          # Workaround CMake 3.20 issue
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-llbuild `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=cl `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code" `
                -D CMAKE_CXX_COMPILER=cl `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-llbuild `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D LLBUILD_SUPPORT_BINDINGS=Swift `
                -D SQLite3_LIBRARY=${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr/lib/SQLite3.lib `
                -D SQLite3_INCLUDE_DIR=${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr/include
      - name: Build swift-llbuild
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-llbuild

      - name: Configure swift-tools-support-core
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-tools-support-core `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-tools-support-core `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D SQLite3_LIBRARY=${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr/lib/SQLite3.lib `
                -D SQLite3_INCLUDE_DIR=${{ github.workspace }}/BuildRoot/Library/sqlite-3.36.0/usr/include
      - name: Build swift-tools-support-core
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-tools-support-core

      - name: Configure swift-driver
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-driver `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-driver `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D ArgumentParser_DIR=${{ github.workspace }}/BinaryCache/swift-argument-parser/cmake/modules `
                -D LLBuild_DIR=${{ github.workspace }}/BinaryCache/swift-llbuild/cmake/modules `
                -D TSC_DIR=${{ github.workspace }}/BinaryCache/swift-tools-support-core/cmake/modules `
                -D Yams_DIR=${{ github.workspace }}/BinaryCache/yams/cmake/modules
      - name: Build swift-driver
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-driver

      - name: Configure swift-package-manager
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/swift-package-manager `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/swift-package-manager `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D ArgumentParser_DIR=${{ github.workspace }}/BinaryCache/swift-argument-parser/cmake/modules `
                -D SwiftCollections_DIR=${{ github.workspace }}/BinaryCache/swift-collections/cmake/modules `
                -D SwiftDriver_DIR=${{ github.workspace }}/BinaryCache/swift-driver/cmake/modules `
                -D SwiftCrypto_DIR=${{ github.workspace }}/BinaryCache/swift-crypto/cmake/modules `
                -D LLBuild_DIR=${{ github.workspace }}/BinaryCache/swift-llbuild/cmake/modules `
                -D TSC_DIR=${{ github.workspace }}/BinaryCache/swift-tools-support-core/cmake/modules `
                -D Yams_DIR=${{ github.workspace }}/BinaryCache/yams/cmake/modules
      - name: Build swift-package-manager
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-package-manager

      - name: Configure IndexStoreDB
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/indexstore-db `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code -I ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -I ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/Block" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/indexstore-db `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET}
      - name: Build indexstore-db
        run: cmake --build ${{ github.workspace }}/BinaryCache/indexstore-db

      - name: Configure SourceKit-LSP
        run: |
          # Workaround CMake 3.20 issue
          $CLANG_CL = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
          $SWIFTC = cygpath -m ${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
          if ( "${{ matrix.arch }}" -eq "arm64" ) {
            $COMPILER_TARGET="aarch64-unknown-windows-msvc"

            $CMAKE_SYSTEM_NAME="-D CMAKE_SYSTEM_NAME=Windows"
            $CMAKE_SYSTEM_PROCESSOR="-D CMAKE_SYSTEM_PROCESSOR=ARM64"
          } else {
            $COMPILER_TARGET="x86_64-unknown-windows-msvc"
          }
          cmake -B ${{ github.workspace }}/BinaryCache/sourcekit-lsp `
                -D BUILD_SHARED_LIBS=YES `
                -D BUILD_TESTING=NO `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_C_COMPILER=${CLANG_CL} `
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code" `
                -D CMAKE_CXX_COMPILER=${CLANG_CL} `
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code" `
                -D CMAKE_MT=mt `
                -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/BuildRoot-DevTools/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr `
                -D CMAKE_Swift_COMPILER=${SWIFTC} `
                -D CMAKE_Swift_FLAGS="-resource-dir ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows" `
                ${CMAKE_SYSTEM_NAME} `
                ${CMAKE_SYSTEM_PROCESSOR} `
                -G Ninja `
                -S ${{ github.workspace }}/SourceCache/sourcekit-lsp `
                -D CMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_CXX_COMPILER_TARGET=${COMPILER_TARGET} `
                -D CMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} `
                -D ArgumentParser_DIR=${{ github.workspace }}/BinaryCache/swift-argument-parser/cmake/modules `
                -D IndexStoreDB_DIR=${{ github.workspace }}/BinaryCache/indexstore-db/cmake/modules `
                -D LLBuild_DIR=${{ github.workspace }}/BinaryCache/swift-llbuild/cmake/modules `
                -D SwiftCollections_DIR=${{ github.workspace }}/BinaryCache/swift-collections/cmake/modules `
                -D SwiftPM_DIR=${{ github.workspace }}/BinaryCache/swift-package-manager/cmake/modules `
                -D TSC_DIR=${{ github.workspace }}/BinaryCache/swift-tools-support-core/cmake/modules
      - name: Build SourceKit-LSP
        run: cmake --build ${{ github.workspace }}/BinaryCache/SourceKit-LSP

      - name: Install swift-argument-parser
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-argument-parser --target install
      - name: Install swift-collections
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-collections --target install
      - name: Install swift-crypto
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-crypto --target install
      - name: Install Yams
        run: cmake --build ${{ github.workspace }}/BinaryCache/yams --target install
      - name: Install swift-llbuild
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-llbuild --target install
      - name: Install swift-tools-support-core
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-tools-support-core --target install
      - name: Install swift-driver
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-driver --target install
      - name: Install swift-package-manager
        run: cmake --build ${{ github.workspace }}/BinaryCache/swift-package-manager --target install
      - name: Install IndexStoreDB
        run: cmake --build ${{ github.workspace }}/BinaryCache/indexstore-db --target install
      - name: Install SourceKit-LSP
        run: cmake --build ${{ github.workspace }}/BinaryCache/sourcekit-lsp --target install

      - uses: actions/upload-artifact@v2
        with:
          name: devtools-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot-DevTools/Library

  vscode_plugin:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          repository: apple/sourcekit-lsp
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/sourcekit-lsp

      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Build sourcekit-lsp-development.vsix
        run: |
          cd ${{ github.workspace }}/SourceCache/sourcekit-lsp/Editors/vscode
          npm install
          npm run dev-package
      - uses: actions/upload-artifact@v2
        with:
          name: sourcekit-lsp-vsix
          path: ${{ github.workspace }}/SourceCache/sourcekit-lsp/Editors/vscode/sourcekit-lsp-development.vsix

  package_icu:
    runs-on: windows-latest
    needs: [icu]

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64', 'x86']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-69.1
          path: ${{ github.workspace }}/BuildRoot/Library/icu-69.1/usr

      # TODO(compnerd) hoist the revision to an input
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-installer-scripts
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-installer-scripts

      - uses: microsoft/setup-msbuild@v1.0.3

      - name: Package
        run: |
          msbuild -nologo `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\icu\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\icu\ `
              -p:ICU_ROOT=${{ github.workspace }}/BuildRoot `
              -p:ProductVersion=69.1 `
              -p:ProductVersionMajor=69 `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/icu.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/icu/icu.msi

      - uses: actions/upload-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BinaryCache/icu/icu.msi

  package_toolchain:
    runs-on: windows-latest
    needs: [toolchain]

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: toolchain-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library

      # TODO(compnerd) hoist the revision to an input
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-installer-scripts
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-installer-scripts

      - uses: microsoft/setup-msbuild@v1.0.3

      - name: Package
        run: |
          msbuild -nologo `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\toolchain\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\toolchain\ `
              -p:TOOLCHAIN_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/toolchain.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/toolchain/toolchain.msi

      - uses: actions/upload-artifact@v2
        with:
          name: toolchain-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BinaryCache/toolchain/toolchain.msi

  package_sdk_runtime:
    runs-on: windows-latest
    needs: [sdk]

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: windows-sdk-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform

      # TODO(compnerd) hoist the revision to an input
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-installer-scripts
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-installer-scripts
      - uses: actions/checkout@v2
        with:
          repository: apple/swift
          ref: ${{ github.event.inputs.swift_tag }}
          path: ${{ github.workspace }}/SourceCache/swift

      - uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64;Microsoft.VisualStudio.Component.VC.Tools.ARM64'
          arch: ${{ matrix.arch }}

      - name: Build Installer Custom Action
        run: msbuild -nologo -restore -p:PlatformToolset=v142 -p:Configuration=Release
        working-directory: ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/CustomActions/SwiftInstaller

      - name: Package SDK
        run: |
          # TODO(compnerd) determine why PlatformToolset is set to v100 on GHA
          msbuild -nologo -restore `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\sdk\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\sdk\ `
              -p:PLATFORM_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform `
              -p:SDK_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk `
              -p:SWIFT_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift `
              -p:PlatformToolset=v142 `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/sdk.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/sdk/sdk.msi

      - name: Package Runtime
        run: |
          msbuild -nologo `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\runtime\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\runtime\ `
              -p:PLATFORM_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform `
              -p:SDK_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk `
              -p:SWIFT_SOURCE_DIR=${{ github.workspace }}/SourceCache/swift `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/runtime.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/runtime/runtime.msi

      - uses: actions/upload-artifact@v2
        with:
          name: sdk-windows-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BinaryCache/sdk/sdk.msi
      - uses: actions/upload-artifact@v2
        with:
          name: runtime-windows-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BinaryCache/runtime/runtime.msi

  package_devtools:
    runs-on: windows-latest
    needs: [devtools, vscode_plugin]

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: devtools-${{ matrix.arch }}
          path: ${{ github.workspace }}/BuildRoot/Library

      # TODO(compnerd) hoist the revision to an input
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-installer-scripts
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-installer-scripts

      - uses: microsoft/setup-msbuild@v1.0.3

      - name: Package
        run: |
          msbuild -nologo `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\devtools\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\devtools\ `
              -p:DEVTOOLS_ROOT=${{ github.workspace }}/BuildRoot/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/devtools.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/devtools/devtools.msi

      - uses: actions/upload-artifact@v2
        with:
          name: devtools-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BinaryCache/devtools/devtools.msi

  installer:
    runs-on: windows-latest
    needs: [package_icu, package_toolchain, package_sdk_runtime, package_devtools]

    strategy:
      fail-fast: false
      matrix:
        arch: ['amd64'] # , 'arm64']

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: icu-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BuildRoot
      - uses: actions/download-artifact@v2
        with:
          name: toolchain-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BuildRoot
      - uses: actions/download-artifact@v2
        with:
          name: runtime-windows-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BuildRoot
      - uses: actions/download-artifact@v2
        with:
          name: sdk-windows-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BuildRoot
      - uses: actions/download-artifact@v2
        with:
          name: devtools-${{ matrix.arch }}-msi
          path: ${{ github.workspace }}/BuildRoot

      # TODO(compnerd) hoist the revision to an input
      - uses: actions/checkout@v2
        with:
          repository: apple/swift-installer-scripts
          ref: refs/heads/main
          path: ${{ github.workspace }}/SourceCache/swift-installer-scripts

      - uses: microsoft/setup-msbuild@v1.0.3

      - name: Package
        run: |
          msbuild -nologo `
              -p:Configuration=Release `
              -p:RunWixToolsOutOfProc=true `
              -p:OutputPath=${{ github.workspace }}\BinaryCache\installer\ `
              -p:IntermediateOutputPath=${{ github.workspace }}\BinaryCache\installer\ `
              -p:MSI_LOCATION=${{ github.workspace }}/BuildRoot `
              ${{ github.workspace }}/SourceCache/swift-installer-scripts/platforms/Windows/installer.wixproj
          # codesign /f $(CERTIFICATE) /p $(PASSPHRASE) /tr http://timestamp.digicert.com /fd sha256 /td sha256 ${{ github.workspace }}/BinaryCache/installer/installer.exe

      - uses: actions/upload-artifact@v2
        with:
          name: installer-${{ matrix.arch }}
          path: ${{ github.workspace }}/BinaryCache/installer/installer.exe
