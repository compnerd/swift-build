name: "Setup sccache"
description: "Sets up sccache with S3 or local disk configuration"

inputs:
  disk-max-size:
    description: "The maximum size of the local disk cache in MB if S3 is unavailable."
    required: true
  disk-cache-key:
    description: "The key to use for the local disk cache."
    required: true
  s3-bucket:
    description: "The s3 bucket to use for cache storage."
    required: false
  s3-bucket-encryption:
    description: "Whether to enable server-side encryption for the S3 bucket."
    required: false
    default: "true"
  aws-arn:
    description: "The ARN of the AWS role to assume which has read/write access to the S3 bucket."
    required: false
  aws-region:
    description: "The region of the S3 bucket to use for the cache"
    required: false

runs:
  using: composite
  steps:
    - name: Configure Caching Enviornment
      shell: pwsh
      run: |
        # Prefer preprocessor caching; this has no effect when local caching is
        # not used.
        "SCCACHE_DIRECT=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8

        if ("$env:ACTIONS_STEP_DEBUG" -eq "true") {
          "SCCACHE_LOG_LEVEL=debug" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
        }

        $AWSArn = '${{ inputs.aws-arn }}'
        if ($AWSArn) {
          $Parameters = @{
            's3-bucket' = '${{ inputs.s3-bucket }}'
            's3-bucket-encryption' = '${{ inputs.s3-bucket-encryption }}'
            'aws-region' = '${{ inputs.aws-region }}'
          }

          foreach ($Parameter in $Prameters.GetEnumerator()) {
            if ([string]::IsNullOrEmpty($Parameter.Value)) {
              Write-Output "::error::$($Parameter.Key) input cannot be empty when aws-arn is provided"
            }
          }

          Write-Output "::info::Using S3 bucket ${{ inputs.s3-bucket }} for cache storage"
          "SCCACHE_BUCKET=${{ inputs.s3-bucket }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
          "SCCACHE_REGION=${{ inputs.aws-region }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
          "SCCACHE_S3_SERVER_SIDE_ENCRYPTION=${{ inputs.s3-bucket-encryption }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
        }

    - name: Authenticate to AWS
      id: aws-credentials
      if: inputs.aws-arn != ''
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ inputs.aws-arn }}
        role-session-name: ToolchainCISccacheAccess
        aws-region: ${{ inputs.aws-region }}

    - name: Setup sccache (remote)
      if: inputs.aws-arn != '' && steps.aws-credentials.outcome == 'success'
      uses: hendrikmuhs/ccache-action@a1209f81afb8c005c13b4296c32e363431bffea5 # v1.2.17
      with:
        variant: sccache

    - name: Setup sccache (local)
      if: inputs.aws-arn == ''
      uses: hendrikmuhs/ccache-action@a1209f81afb8c005c13b4296c32e363431bffea5 # v1.2.17
      with:
        max-size: ${{ inputs.disk-max-size }}
        key: ${{ inputs.disk-cache-key }}
        variant: sccache
