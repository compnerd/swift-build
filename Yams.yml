# Yams

pool:
  vmImage: 'windows-latest'

resources:
  repositories:
    - repository: jpsim/Yams
      type: github
      name: jpsim/Yams
      endpoint: GitHub

trigger:
  branches:
    include:
      - trunk

variables:
  toolchain.directory: $(Pipeline.Workspace)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
  sdk.directory: $(Pipeline.Workspace)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
  developer.directory: $(Pipeline.Workspace)/Library/Developer/Platforms/Windows.platform/Developer/Library

steps:
  - script: |
      git config --global --add core.autocrlf false
      git config --global --add core.symlinks true
    displayName: Configure GIT

  - checkout: jpsim/Yams
    displayName: checkout jpsim/Yams

  - script: |
      git config --global user.name builder
      git config --global user.email builder@compnerd.org

      call :ApplyPatches "%YAMS_PR%" $(Build.SourcesDirectory)

      goto :eof

      :ApplyPatches
      setlocal
      set list=%~1
      set repository=%~2
      for /F "tokens=1*" %%P in ("%list%") do (
        git -C %repository% fetch origin pull/%%P/merge
        git -C %repository% merge FETCH_HEAD
        if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
      )
    displayName: Apply Patches

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      definition: '7'
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'toolchain-windows-x64'
      targetPath: '$(Pipeline.Workspace)'

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      definition: '7'
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'sdk-windows-x64'
      targetPath: '$(Pipeline.Workspace)'

  - task: BatchScript@1
    inputs:
      filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
      arguments: -no_logo -arch=x64 -host_arch=x64
      modifyEnvironment: true

  - script: |
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/ucrt.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/visualc.modulemap" -o "%VCToolsInstallDir%\include\module.modulemap"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/visualc.apinotes" -o "%VCToolsInstallDir%\include\visualc.apinotes"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/winsdk.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
    displayName: Configure SDK

  - script: |
      echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
    displayName: Update PATH

  - task: CMake@1
    displayName: Configure Yams
    inputs:
      cmakeArgs:
        -B $(Build.BinariesDirectory)/Yams
        -D BUILD_SHARED_LIBS=YES
        -D CMAKE_BUILD_TYPE=Release
        -D CMAKE_C_COMPILER=clang-cl.exe
        -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/yams-windows-x64/Library/Yams-development/usr
        -D CMAKE_Swift_FLAGS="-sdk $(sdk.directory) -resource-dir $(sdk.directory)/usr/lib/swift -I $(sdk.directory)/usr/lib/swift -L $(sdk.directory)/usr/lib/swift/windows -I $(developer.directory)/XCTest-development/usr/lib/swift/windows/x86_64 -L $(developer.directory)/XCTest-development/usr/lib/swift/windows"
        -G Ninja
        -S $(Build.SourcesDirectory)

  - task: CMake@1
    displayName: Build Yams
    inputs:
      cmakeArgs: --build $(Build.BinariesDirectory)/Yams

  - task: CMake@1
    displayName: Install Yams
    inputs:
      cmakeArgs: --build $(Build.BinariesDirectory)/Yams --target install

  - publish: $(Build.StagingDirectory)/yams-windows-x64
    artifact: yams-windows-x64

