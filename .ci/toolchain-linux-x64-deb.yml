pr:
  branches:
    include:
      - master
  paths:
    include:
      - .ci/toolchain-linux-x64-deb.yml
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - .ci/toolchain-linux-x64-deb.yml
jobs:
  - job: linux_x64
    variables:
      toolchain.directory: $(System.ArtifactsDirectory)/toolchain/Developer/Toolchains/unknown-Asserts-development.xctoolchain
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 14
          specificBuildWithTriggering: true
          allowPartiallySucceededBuilds: true
          artifactName: 'toolchain'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install toolchain'
      - script: |
          rm $(toolchain.directory)/usr/bin/complete-test
          rm $(toolchain.directory)/usr/bin/lldb-moduleimport-test
          rm $(toolchain.directory)/usr/bin/sil-func-extractor
          rm $(toolchain.directory)/usr/bin/sil-llvm-gen
          rm $(toolchain.directory)/usr/bin/sil-nm
          rm $(toolchain.directory)/usr/bin/sil-opt
          rm $(toolchain.directory)/usr/bin/sil-passpipeline-dumper
          rm $(toolchain.directory)/usr/bin/sourcekitd-repl
          rm $(toolchain.directory)/usr/bin/sourcekitd-test
          rm $(toolchain.directory)/usr/bin/swift-api-dump.py
          rm $(toolchain.directory)/usr/bin/swift-ast-script
          rm $(toolchain.directory)/usr/bin/swift-demangle-yamldump
          rm $(toolchain.directory)/usr/bin/swift-ide-test
          rm $(toolchain.directory)/usr/bin/swift-indent
          rm $(toolchain.directory)/usr/bin/swift-llvm-opt
          rm $(toolchain.directory)/usr/bin/swift-reflection-dump
          rm $(toolchain.directory)/usr/bin/swift-remoteast-test
          rm $(toolchain.directory)/usr/bin/swift-syntax-parser-test
          rm $(toolchain.directory)/usr/bin/swift-syntax-test

          chmod +x $(toolchain.directory)/usr/bin/*
          chmod +x $(toolchain.directory)/usr/lib/*.so*

          rm -rf $(toolchain.directory)/usr/share/docs/swift

          mv $(toolchain.directory)/usr/local/include/indexstore $(toolchain.directory)/usr/include
          rmdir $(toolchain.directory)/usr/local

          cd $(toolchain.directory)/usr/lib/swift
          rm -rf clang
          ln -s ../clang/*/include clang

          cd $(toolchain.directory)/usr/lib
          rm libLTO.so ; ln -s libLTO.so.* libLTO.so
          rm libIndexStore.so ; ln -s libIndexStore.so.* libIndexStore.so
          rm libclang.so ; ln -s libclang.so.* libclang.so
          # TODO(compnerd) figure out how to update this automatically
          rm liblldb.so ; ln -s liblldb.so.9 liblldb.so
          rm liblldb.so.9 ; ln -s liblldb.so.9.0 liblldb.so.9
          rm liblldb.so.9.0 ; ln -s liblldb.so.9.0.0 liblldb.so.9.0

          cd $(toolchain.directory)/usr/bin
          rm addr2line ; ln -s llvm-symbolizer addr2line
          rm ar ; ln -s llvm-ar ar
          rm c++filt ; ln -s llvm-cxxfilt c++filt
          rm clang ; ln -s clang-[0-9]* clang
          rm clang++ ; ln -s clang-[0-9]* clang++
          rm clang-cl ; ln -s clang-[0-9]* clang-cl
          rm clang-cpp ; ln -s clang-[0-9]* clang-cpp
          rm dwp ; ln -s llvm-dwp dwp
          rm ld64.lld ; ln -s lld ld64.lld
          rm ld.lld ; ln -s lld ld.lld
          rm lld-link ; ln -s lld lld-link
          rm llvm-dlltool ; ln -s llvm-ar llvm-dlltool
          rm llvm-lib ; ln -s llvm-ar llvm-lib
          rm llvm-ranlib ; ln -s llvm-ar llvm-ranlib
          rm llvm-readelf ; ln -s llvm-readobj llvm-readelf
          rm llvm-strip ; ln -s llvm-objcopy llvm-strip
          rm nm ; ln -s llvm-nm nm
          rm objcopy ; ln -s llvm-objcopy objcopy
          rm objdump ; ln -s llvm-objdump objdump
          rm ranlib ; ln -s llvm-ranlib ranlib
          rm readelf ; ln -s llvm-readelf readelf
          rm size ; ln -s llvm-size size
          rm strings ; ln -s llvm-strings strings
          rm strip ; ln -s llvm-strip strip
          rm swift-autolink-extract ; ln -s swift swift-autolink-extract
          rm swiftc ; ln -s swift swiftc
          rm wasm-ld ; ln -s lld wasm-ld

          mkdir -p $(System.ArtifactsDirectory)/toolchain/Library
          mv $(System.ArtifactsDirectory)/toolchain/Developer $(System.ArtifactsDirectory)/toolchain/Library
        displayName: 'cleanup image'
      - script: |
          cd $(System.ArtifactsDirectory)
          mkdir toolchain/DEBIAN
          cp $(Build.SourcesDirectory)/debian/control toolchain/DEBIAN
          sed -e "s/Version:/& $(Build.BuildId)/" -i toolchain/DEBIAN/control
          fakeroot dpkg-deb --build toolchain
        displayName: 'package image'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.ArtifactsDirectory)/toolchain.deb'
          ArtifactName: 'linux-toolchain-amd64.deb'
        displayName: "Publish linux-toolchain-amd64.deb"
      - task: cURLUploader@2
        inputs:
          files: '$(System.ArtifactsDirectory)/toolchain.deb'
          authType: 'UserAndPass'
          username: 'compnerd'
          password: '$(BINTRAY_PASSWORD)'
          url: 'https://api.bintray.com/content/compnerd/swift/swift-toolchain/$(Build.BuildId)/pool/main/s/swift-toolchain/swift-toolchain_$(Build.BuildId)_amd64.deb;deb_distribution=bionic;deb_component=main;deb_architecture=amd64;publish=1'
          remotePath: 
        displayName: 'Upload to bintray'
      - script: |
          cp $(System.ArtifactsDirectory)/toolchain.deb $(System.ArtifactsDirectory)/swift-toolchain_$(Build.BuildId)_amd64.deb
          cd $(System.ArtifactsDirectory)
          curl -F swift-toolchain=@swift-toolchain_$(Build.BuildId)_amd64.deb https://$(GEMFURY_PASSWORD)@push.fury.io/compnerd
        displayName: 'Upload to gemfury'
