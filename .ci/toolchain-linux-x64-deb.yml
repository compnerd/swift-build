pr:
  branches:
    include:
      - master
  paths:
    include:
      - .ci/toolchain-linux-x64-deb.yml
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - .ci/toolchain-linux-x64-deb.yml
jobs:
  - job: linux_x64
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
      toolchain.directory: $(Build.StagingDirectory)/toolchain/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 14
          specificBuildWithTriggering: true
          allowPartiallySucceededBuilds: true
          artifactName: 'toolchain-linux-x64'
        displayName: 'Install toolchain'
      - script: |
          mkdir -p $(Build.StagingDirectory)/toolchain/Library
          cp -rv $(Pipeline.Workspace)/Library/Developer $(Build.StagingDirectory)/toolchain/Library/Developer

          # remove testing binaries
          rm -v $(toolchain.directory)/usr/bin/complete-test
          rm -v $(toolchain.directory)/usr/bin/lldb-moduleimport-test
          rm -v $(toolchain.directory)/usr/bin/sil-func-extractor
          rm -v $(toolchain.directory)/usr/bin/sil-llvm-gen
          rm -v $(toolchain.directory)/usr/bin/sil-nm
          rm -v $(toolchain.directory)/usr/bin/sil-opt
          rm -v $(toolchain.directory)/usr/bin/sil-passpipeline-dumper
          rm -v $(toolchain.directory)/usr/bin/sourcekitd-repl
          rm -v $(toolchain.directory)/usr/bin/sourcekitd-test
          rm -v $(toolchain.directory)/usr/bin/swift-api-dump.py
          rm -v $(toolchain.directory)/usr/bin/swift-ast-script
          rm -v $(toolchain.directory)/usr/bin/swift-demangle-yamldump
          rm -v $(toolchain.directory)/usr/bin/swift-ide-test
          rm -v $(toolchain.directory)/usr/bin/swift-indent
          rm -v $(toolchain.directory)/usr/bin/swift-llvm-opt
          rm -v $(toolchain.directory)/usr/bin/swift-reflection-dump
          rm -v $(toolchain.directory)/usr/bin/swift-remoteast-test
          rm -v $(toolchain.directory)/usr/bin/swift-syntax-parser-test
          rm -v $(toolchain.directory)/usr/bin/swift-syntax-test

          # remove swift docs
          rm -vrf $(toolchain.directory)/usr/share/docs/swift

          # make IndexStore headers part of `/usr` instead of `/usr/local`
          mv -v $(toolchain.directory)/usr/local/include/indexstore $(toolchain.directory)/usr/include/indexstore
          rmdir -v $(toolchain.directory)/usr/local

          # symlink in clang resource headers
          cd $(toolchain.directory)/usr/lib/swift
          rm -vrf clang
          ln -vs ../clang/*/include clang

          # fix file permissions
          chmod -v +x $(toolchain.directory)/usr/bin/*
          chmod -v +x $(toolchain.directory)/usr/lib/*.so*

          # fixup the symlinks being replaced with binaries
          cd $(toolchain.directory)/usr/lib
          rm -v libLTO.so ; ln -vs libLTO.so.* libLTO.so
          rm -v libIndexStore.so ; ln -vs libIndexStore.so.* libIndexStore.so
          rm -v libclang.so ; ln -vs libclang.so.* libclang.so
          # TODO(compnerd) figure out how to update this automatically
          rm -v liblldb.so ; ln -vs liblldb.so.9 liblldb.so
          rm -v liblldb.so.9 ; ln -vs liblldb.so.9.0 liblldb.so.9
          rm -v liblldb.so.9.0 ; ln -vs liblldb.so.9.0.0 liblldb.so.9.0

          cd $(toolchain.directory)/usr/bin
          rm -v addr2line ; ln -vs llvm-symbolizer addr2line
          rm -v ar ; ln -vs llvm-ar ar
          rm -v c++filt ; ln -vs llvm-cxxfilt c++filt
          rm -v clang ; ln -vs clang-[0-9]* clang
          rm -v clang++ ; ln -vs clang-[0-9]* clang++
          rm -v clang-cl ; ln -vs clang-[0-9]* clang-cl
          rm -v clang-cpp ; ln -vs clang-[0-9]* clang-cpp
          rm -v dwp ; ln -vs llvm-dwp dwp
          rm -v ld64.lld ; ln -vs lld ld64.lld
          rm -v ld.lld ; ln -vs lld ld.lld
          rm -v lld-link ; ln -vs lld lld-link
          rm -v llvm-dlltool ; ln -vs llvm-ar llvm-dlltool
          rm -v llvm-lib ; ln -vs llvm-ar llvm-lib
          rm -v llvm-ranlib ; ln -vs llvm-ar llvm-ranlib
          rm -v llvm-readelf ; ln -vs llvm-readobj llvm-readelf
          rm -v llvm-strip ; ln -vs llvm-objcopy llvm-strip
          rm -v nm ; ln -vs llvm-nm nm
          rm -v objcopy ; ln -vs llvm-objcopy objcopy
          rm -v objdump ; ln -vs llvm-objdump objdump
          rm -v ranlib ; ln -vs llvm-ranlib ranlib
          rm -v readelf ; ln -vs llvm-readelf readelf
          rm -v size ; ln -vs llvm-size size
          rm -v strings ; ln -vs llvm-strings strings
          rm -v strip ; ln -vs llvm-strip strip
          rm -v swift-autolink-extract ; ln -vs swift swift-autolink-extract
          rm -v swiftc ; ln -vs swift swiftc
          rm -v wasm-ld ; ln -vs lld wasm-ld

        displayName: 'cleanup image'
      - script: |
          cd $(Build.StagingDirectory)
          mkdir toolchain/DEBIAN
          cp $(Build.SourcesDirectory)/debian/control toolchain/DEBIAN
          sed -e "s/Version:/& $(Build.BuildId)/" -i toolchain/DEBIAN/control
          fakeroot dpkg-deb --build toolchain
        displayName: 'package image'
      - task: PublishPipelineArtifact@1
        inputs:
          path: '$(Build.StagingDirectory)/toolchain.deb'
          artifact: 'linux-toolchain-amd64.deb'
        displayName: "Publish linux-toolchain-amd64.deb"
      - task: cURLUploader@2
        inputs:
          files: '$(Build.StagingDirectory)/toolchain.deb'
          authType: 'UserAndPass'
          username: 'compnerd'
          password: '$(BINTRAY_PASSWORD)'
          url: 'https://api.bintray.com/content/compnerd/swift/swift-toolchain/$(Build.BuildId)/pool/main/s/swift-toolchain/swift-toolchain_$(Build.BuildId)_amd64.deb;deb_distribution=bionic;deb_component=main;deb_architecture=amd64;publish=1'
          remotePath: 
        displayName: 'Upload to bintray'
      - script: |
          mv $(Build.StagingDirectory)/toolchain.deb $(Build.StagingDirectory)/swift-toolchain_$(Build.BuildId)_amd64.deb
          cd $(Build.StagingDirectory)
          curl -F swift-toolchain=@swift-toolchain_$(Build.BuildId)_amd64.deb https://$(GEMFURY_PASSWORD)@push.fury.io/compnerd
        displayName: 'Upload to gemfury'
