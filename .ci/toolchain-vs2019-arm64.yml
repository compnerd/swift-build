name: swift
schedules:
  - cron: "0 0 * * *"
    branches:
      include:
        - master
    always: true
    displayName: "Daily Build"
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - .ci/toolchain-vs2019-arm64.yml
variables:
  Install.Directory: $(Build.StagingDirectory)\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr
jobs:
  - job: windows
    # NOTE(compnerd) this is an open source project built on hosted machines, so
    # this time out is actually 6 hours.  Sadly, this is not very long given the
    # complexity of this build and the speed of the hosted machines
    timeoutInMinutes: 0
    pool:
      vmImage: 'windows-2019'
    steps:
      - script: |
          git config --global core.autocrlf false

          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          git clone --quiet --depth 1 --single-branch --branch swift/master https://github.com/apple/llvm-project toolchain

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-cmark toolchain/cmark
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch toolchain/swift-corelibs-libdispatch
          git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift toolchain/swift
        displayName: 'Fetch Sources'
      - task: BatchScript@1
        inputs:
          fileName: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          arguments: -no_logo -arch=x64 -host_arch=x64
          modifyEnvironment: true
        displayName: 'vcvarsall.bat'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llvm-tools
          cmakeArgs: $(Build.SourcesDirectory)\toolchain\llvm -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_ENABLE_ASSERTIONS=NO -DLLVM_ENABLE_PROJECTS="clang"
        displayName: 'Configure LLVM Build Tools'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llvm-tools --target llvm-tblgen
        displayName: 'Build LLVM Build Tools'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llvm-tools --target clang-tblgen
        displayName: 'Build Clang Build Tools'
      - task: BatchScript@1
        inputs:
          filename: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          arguments: -no_logo -arch=arm64 -host_arch=x64
          modifyEnvironment: true
        displayName: 'vcvarsall.bat'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - script: |
          mklink "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap" "$(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\ucrt.modulemap"
          mklink "%VCToolsInstallDir%\include\module.modulemap" "$(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.modulemap"
          mklink "%VCToolsInstallDir%\include\visualc.apinotes" "$(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.apinotes"
          mklink "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap" "$(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\winsdk.modulemap"
        displayName: 'Configure SDK'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/toolchain
          # NOTE(compnerd) DIA does not contain ARM64 diaguids.lib
          cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/Windows-aarch64.cmake -C $(Build.SourcesDirectory)\cmake\caches\org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)\toolchain\llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Install.Directory) -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-unknown-windows-msvc -DLLVM_USE_HOST_TOOLS=NO -DLLVM_TABLEGEN=$(Build.StagingDirectory)\llvm-tools\bin\llvm-tblgen.exe -DCLANG_TABLEGEN=$(Build.StagingDirectory)\llvm-tools\bin\clang-tblgen.exe -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;cmark;swift;lldb" -DLLVM_EXTERNAL_PROJECTS="cmark;swift" -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/toolchain/swift-corelibs-libdispatch -DLLVM_ENABLE_ASSERTIONS=YES -DLLVM_ENABLE_DIA_SDK=NO -DSWIFT_INCLUDE_TESTS=NO -DSWIFT_BUILD_SYNTAXPARSERLIB=NO -DSWIFT_BUILD_SOURCEKIT=NO -DSWIFT_ENABLE_SOURCEKIT_TESTS=NO
        displayName: 'Configure toolchain'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/toolchain --target distribution
        displayName: 'Build toolchain'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/toolchain --target install-distribution-stripped
        displayName: 'Install toolchain'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)\Library
          artifactName: toolchain
