name: swift
variables:
  Install.Directory: $(Build.StagingDirectory)\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr
jobs:
  - job: windows
    # NOTE(compnerd) this is an open source project built on hosted machines, so
    # this time out is actually 6 hours.  Sadly, this is not very long given the
    # complexity of this build and the speed of the hosted machines
    timeoutInMinutes: 0
    pool:
      name: Default
    steps:
      - script: |
          git config --global core.autocrlf false

          git config --global user.name 'root'
          git config --global user.email 'root@compnerd.org'

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-cmark cmark
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm
          git clone --quiet --depth 1 --single-branch -b release_70 https://github.com/llvm-mirror/lld lld

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-lldb lldb
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-clang clang
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift swift
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
        displayName: 'Fetch Sources'
      - powershell: |
          (New-Object System.Net.WebClient).DownloadFile("http://download.icu-project.org/files/icu4c/63.1/icu4c-63_1-Win64-MSVC2017.zip", "$(Build.StagingDirectory)\\icu4c-63_1-Win64-MSVC2017.zip")
          Add-Type -A System.IO.Compression.FileSystem
          [IO.Compression.ZipFile]::ExtractToDirectory("$(Build.StagingDirectory)\\icu4C-63_1-Win64-MSVC2017.zip", "$(Build.StagingDirectory)\\icu-63.1")
        displayName: 'Fetch ICU'
      - script: choco install -y gnuwin32-coreutils.install
        displayName: 'Install GNU coreutils'
      - script: choco install -y diffutils
        displayName: 'Install GNU diffutils'
      - script: choco install -y grep
        displayName: 'Install GNU grep'
      - script: choco install -y sed
        displayName: 'Install GNU sed'
      - task: BatchScript@1
        inputs:
          filename: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\VsDevCmd.bat
          arguments: -no_logo -arch=x64
          modifyEnvironment: true
        displayName: 'vcvarsall.bat'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\llvm
          cmakeArgs: $(Build.SourcesDirectory)\llvm -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_CXX_FLAGS="/GS- /Oy" -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_SHARED_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_INSTALL_PREFIX=$(Install.Directory) -DLLVM_ENABLE_ASSERTIONS=YES -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-windows-msvc -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_INSTALL_TOOLCHAIN_ONLY=YES -DLLVM_TOOLCHAIN_TOOLS="dsymutil;llvm-ar;llvm-cov;llvm-cvtres;llvm-cxxdump;llvm-cxxfilt;llvm-dlltool;llvm-dwp;llvm-ranlib;llvm-lib;llvm-mt;llvm-nm;llvm-objdump;llvm-pdbutil;llvm-profdata;llvm-rc;llvm-readelf;llvm-readobj;llvm-size;llvm-strip;llvm-symbolizer;llvm-undname"
        displayName: 'Configure LLVM/clang'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llvm
        displayName: 'Build LLVM/clang'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llvm --target install
        displayName: 'Install LLVM/clang'
      - script: |
          echo "##vso[task.setvariable variable=PATH]%PATH%;$(Install.Directory)\\bin"
        displayName: 'Update PATH'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\cmark
          cmakeArgs: $(Build.SourcesDirectory)\cmark -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_SHARED_LINKER_FLAGS="/INCREMENTAL:NO -DCMAKE_INSTALL_PREFIX="
        displayName: 'Configure CMark'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\cmark
        displayName: 'Build CMark'
      - script: |
          del "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap" "%VCToolsInstallDir%\include\module.modulemap" "%VCToolsInstallDir%\include\visualc.apinotes" "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
          mklink "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap" "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap"
          mklink "%VCToolsInstallDir%\include\module.modulemap" "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap"
          mklink "%VCToolsInstallDir%\include\visualc.apinotes" "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes"
          mklink "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap" "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap"
        displayName: 'Configure SDK'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\swift
          cmakeArgs: $(Build.SourcesDirectory)\swift -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_CXX_FLAGS="-Wno-c++98-compat -Wno-c++98-compat-pedantic /GS- /Oy" -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_SHARED_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_INSTALL_PREFIX=$(Install.Directory) -DSWIFT_PATH_TO_CLANG_BUILD=$(Build.StagingDirectory)\llvm -DSWIFT_PATH_TO_CLANG_SOURCE=$(Build.SourcesDirectory)\clang -DSWIFT_PATH_TO_CMARK_BUILD=$(Build.StagingDirectory)\cmark -DSWIFT_PATH_TO_CMARK_SOURCE=$(Build.SourcesDirectory)\cmark -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)\swift-corelibs-libdispatch -DSWIFT_PATH_TO_LLVM_BUILD=$(Build.StagingDirectory)\llvm -DSWIFT_PATH_TO_LLVM_SOURCE=$(Build.SourcesDirectory)\llvm -DSWIFT_INCLUDE_DOCS=NO -DSWIFT_WINDOWS_x86_64_ICU_UC_INCLUDE=$(Build.StagingDirectory)\icu-63.1\include\unicode -DSWIFT_WINDOWS_x86_64_ICU_UC=$(Build.StagingDirectory)\icu-63.1\lib64\icuuc.lib -DSWIFT_WINDOWS_x86_64_ICU_I18N_INCLUDE=$(Build.StagingDirectory)\icu-63.1\include -DSWIFT_WINDOWS_x86_64_ICU_I18N=$(Build.StagingDirectory)\icu-63.1\lib64\icuin.lib -DSWIFT_BUILD_STATIC_STDLIB=NO -DSWIFT_BUILD_STATIC_SDK_OVERLAY=NO -DLLVM_INSTALL_TOOLCHAIN_ONLY=YES -DSWIFT_BUILD_SOURCEKIT=YES -DSWIFT_ENABLE_SOURCEKIT_TESTS=NO -DSWIFT_INSTALL_COMPONENTS="autolink-driver;compiler;clang-resource-dir-symlink;stdlib;sdk-overlay;editor-integration;tools;sourcekit-inproc;swift-remote-mirror;swift-remote-mirror-headers"
        displayName: 'Configure swift'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift
        displayName: 'Build swift'
        enabled: false
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift --target install
        displayName: 'Install swift'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\lldb
          cmakeArgs: $(Build.SourcesDirectory)\lldb -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_CXX_FLAGS="/GS- /Oy" -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_SHARED_LINKER_FLAGS="/INCREMENTAL:NO" -DCMAKE_INSTALL_PREFIX=$(Install.Directory) -DLLDB_PATH_TO_CMARK_SOURCE=$(Build.SourcesDirectory)/cmark -DLLDB_PATH_TO_CLANG_SOURCE=$(Build.SourcesDirectory)/clang -DLLDB_PATH_TO_LLVM_SOURCE=$(Build.SourcesDirectory)/llvm -DLLDB_PATH_TO_SWIFT_SOURCE=$(Build.SourcesDirectory)/swift -DLLDB_PATH_TO_CMARK_BUILD=$(Build.StagingDirectory)/cmark -DLLDB_PATH_TO_CLANG_BUILD=$(Build.StagingDirectory)/llvm -DLLDB_PATH_TO_LLVM_BUILD=$(Build.StagingDirectory)/llvm -DLLDB_PATH_TO_SWIFT_BUILD=$(Build.StagingDirectory)/swift -DLLVM_ENABLE_ASSERTIONS=YES
        displayName: 'Configure lldb'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\lldb
        displayName: 'Build lldb'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\lldb --target install
        displayName: 'Install lldb'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\swift-corelibs-libdispatch
          cmakeArgs: $(Build.SourcesDirectory)\swift-corelibs-libdispatch -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_SWIFT_COMPILER=$(Install.Directory)\\bin\\swiftc.exe -DSwift_DIR=$(Build.StagingDirectory)\\swift\\lib\\cmake\\swift -DCMAKE_CXX_FLAGS="/GS- /Oy" -DCMKE_SHARED_LINKER_FLAGS="/INCRMENTAL:NO" -DCMAKE_INSTALL_PREFIX=$(Install.Directory) -DBUILD_SHARED_LIBS=YES -DENABLE_TESTING=NO -DCMAKE_C_COMPILER_TARGET=x86_64-unknown-windows-msvc -DENABLE_SWIFT=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-corelibs-libdispatch
        displayName: 'Build libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-corelibs-libdispatch --target install
        displayName: 'Install libdispatch'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)\Library
          artifactName: toolchain
      - script: |
          heat dir $(Build.StagingDirectory)\llvm\lib\clang -nologo -indent 2 -cg CLANG_RESOURCES -gg -scom -sreg -sfrag -srd -dr USR_LIB_CLANG -g1 -var var.CLANG_BUILD_DIR_LIB_CLANG -out $(Build.StagingDir)\MSIs\clang-resource-dir.wxs
          candle -nologo -dCLANG_BUILD_DIR_LIB_CLANG=$(Build.StagingDir)\lib\clang $(Build.StagingDir)\MSIs\clang-resource-dir.wxs -out $(Build.StagingDirectory)\MSIs\clang-resource-dir.wixobj

          heat dir $(Build.StagingDirectory)\swift\lib\swift\shims -nologo -indent 2 -cg SWIFT_SHIMS -gg -scom -sreg -sfrag -srd -dr USR_LIB_SWIFT_SHIMS -g1 -var var.SWIFT_BUILD_DIR_LIB_SWIFT_SHIMS -out $(Build.StagingDir)\MSIs\swift-shims.wxs
          candle -nologo -dSWIFT_BUILD_DIR_LIB_SWIFT_SHIMS=$(Build.StagingDir)\swift\lib\swift\shims $(Build.StagingDir)\MSIs\swift-shims.wxs -out $(Build.StagingDirectory)\MSIs\swift-shims.wixobj

          candle -nologo -dCLANG_BUILD_DIR=$(Build.StagingDirectory)\llvm -dLLDB_BUILD_DIR=$(Build.StagingDirectory)\lldb -dLLVM_BUILD_DIR=$(Build.StagingDirectory)\llvm -dSWIFT_BUILD_DIR=$(Build.StagingDirectory)\swift $(Build.SourcesDirectory)\installer\windows-toolchain.wxs -out $(Build.StagingDirectory)\MSIs\windows-toolchain.wixobj
          light -nologo -out $(Build.StagingDirectory)\windows-toolchain-amd64.msi $(Build.StagingDirectory)\MSIs\windows-toolchain.wixobj $(Build.StagingDirectory)\MSIs\clang-resource-dir.wixobj $(Build.StagingDirectory)\MSIs\swift-shims.wixobj

          candle -nologo -dCLANG_BUILD_DIR=$(Build.StagingDirectory)\llvm -dLLDB_BUILD_DIR=$(Build.StagingDirectory)\lldb -dLLVM_BUILD_DIR=$(Build.StagingDirectory)\llvm -dSWIFT_BUILD_DIR=$(Build.StagingDirectory)\swift $(Build.SourcesDirectory)\installer\windows-runtime.wxs -out $(Build.StagingDirectory)\MSIs\windows-runtime.wixobj
          light -nologo -out $(Build.StagingDirectory)\windows-runtime-amd64.msi $(Build.StagingDirectory)\MSIs\windows-runtime.wixobj

          candle -nologo -dCLANG_BUILD_DIR=$(Build.StagingDirectory)\llvm -dLLDB_BUILD_DIR=$(Build.StagingDirectory)\lldb -dLLVM_BUILD_DIR=$(Build.StagingDirectory)\llvm -dSWIFT_BUILD_DIR=$(Build.StagingDirectory)\swift $(Build.SourcesDirectory)\installer\windows-runtime.wxs -out $(Build.StagingDirectory)\MSIs\windows-sdk.wixobj
          light -nologo -out $(Build.StagingDirectory)\windows-sdk.msi $(Build.StagingDirectory)\MSIs\windows-sdk.wixobj
        displayName: 'Build MSIs'
        enabled: false
      - task: PublishBuildArtifacts@1
        inputs:
            pathtoPublish: $(Build.StagingDirectory)\windows-toolchain-amd64.msi
            artifactName: windows-toolchain-installer
      - task: PublishBuildArtifacts@1
        inputs:
            pathtoPublish: $(Build.StagingDirectory)\windows-sdk.msi
            artifactName: windows-sdk-installer
      - task: PublishBuildArtifacts@1
        inputs:
            pathtoPublish: $(Build.StagingDirectory)\windows-runtime-amd64.msi
            artifactName: windows-runtime-installer
      - script: |
          echo "##vso[task.setvariable variable=PATH]%PATH%;$(Build.StagingDirectory)\\icu-63.1\\bin64;%ProgramFiles(x86)%\\GnuWin32\bin;%ALLUSERSPROFILE%\\chocolatey\\lib\\diffutils\\tools;%ALLUSERSPROFILE%\\chocolatey\\lib\\grep\\tools\\install;%ALLUSERSPROFILE%\\chocolatey\\lib\\sed\tools"
        displayName: 'Update PATH'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift --target check-swift
        displayName: 'test swift'
        continueOnError: true
