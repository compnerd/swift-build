jobs:
  - job: ${{ parameters.host }}
    pool: ${{ parameters.pool }}
    timeoutInMinutes: 0
    variables:
      icu.version: 64
      icu.directory: $(System.ArtifactsDirectory)/icu-${{ parameters.platform }}-${{ parameters.host }}/icu-$(icu.version)

      install.directory: $(Build.StagingDirectory)/toolchain-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
    steps:
      - task: DownloadGitHubRelease@0
        inputs:
          connection: 'GitHub'
          userRepository: 'ninja-build/ninja'
          defaultVersionType: 'specificVersion'
          version: '15273896'
          itemPattern: 'ninja-mac.zip'
          downloadPath: '$(System.ArtifactsDirectory)'
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: 'download Ninja'
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(System.ArtifactsDirectory)/ninja-mac.zip'
          destinationFolder: '$(Agent.ToolsDirectory)/ninja-1.9.0'
          cleanDestinationFolder: false
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: 'extract Ninja'
      - task: Bash@3
        inputs:
          targetType: inline
          script: echo "##vso[task.prependpath]$(Agent.ToolsDirectory)/ninja-1.9.0"
        condition: eq( variables['Agent.OS'], 'Darwin' )
        displayName: 'edit PATH'
      - task: Bash@3
        inputs:
          targetType: inline
          script: '/usr/bin/sccache --start-server || true'
        env: { 'SCCACHE_REDIS': 'redis://localhost' }
        condition: eq( variables['Agent.Name'], 'swift-ci' )
        displayName: 'enable redis'
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbols, disable line ending conversion'
      - checkout: self
      - checkout: apple/llvm-project
        path: s/toolchain
      - checkout: apple/swift-cmark
        path: s/toolchain/cmark
      - checkout: apple/swift-corelibs-libdispatch
      - checkout: apple/swift
        path: s/toolchain/swift
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 9
          artifactName: 'icu-${{ parameters.platform }}-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        condition: not( eq( variables['Agent.OS'], 'Darwin' ) )
        displayName: 'Install ICU'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=x64 -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/llvm-tools
          cmakeArgs: -C $(Build.SourcesDirectory)/windows-swift/cmake/caches/${{ parameters.platform }}-x86_64.cmake -G Ninja $(Build.SourcesDirectory)/toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=NO -DLLVM_ENABLE_PROJECTS="clang;lldb" -DLLDB_DISABLE_PYTHON=YES -DLLDB_INCLUDE_TESTS=NO
        displayName: 'Configure LLVM Build Tools'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llvm-tools --target llvm-tblgen
        displayName: 'Build LLVM Build Tools'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llvm-tools --target clang-tblgen
        displayName: 'Build Clang Build Tools'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llvm-tools --target lldb-tblgen
        displayName: 'Build LLDB Build Tools'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - script: |
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Configure SDK'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
        name: python
        condition: not( eq( variables['Agent.Name'], 'swift-ci' ) )
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/toolchain
          cmakeArgs: -C $(Build.SourcesDirectory)/windows-swift/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -C $(Build.SourcesDirectory)/windows-swift/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory)/usr -DLLVM_DEFAULT_TARGET_TRIPLE=${{ parameters.triple }} -DLLVM_USE_HOST_TOOLS=NO -DLLVM_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/llvm-tblgen.exe -DCLANG_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/clang-tblgen.exe -DLLDB_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/lldb-tblgen.exe -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;cmark;swift;lldb;lld" -DLLVM_EXTERNAL_PROJECTS="cmark;swift" -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch ${{ parameters.LLVM_OPTIONS }} ${{ parameters.LLDB_OPTIONS }} ${{ parameters.SWIFT_OPTIONS }}
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Configure toolchain'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/toolchain
          cmakeArgs: -C $(Build.SourcesDirectory)/windows-swift/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -C $(Build.SourcesDirectory)/windows-swift/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory)/usr -DLLVM_DEFAULT_TARGET_TRIPLE=${{ parameters.triple }} -DLLVM_USE_HOST_TOOLS=NO -DLLVM_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/llvm-tblgen -DCLANG_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/clang-tblgen -DLLDB_TABLEGEN=$(Build.BinariesDirectory)/llvm-tools/bin/lldb-tblgen -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;cmark;swift;lldb;lld" -DLLVM_EXTERNAL_PROJECTS="cmark;swift" -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch ${{ parameters.LLVM_OPTIONS }} ${{ parameters.LLDB_OPTIONS }} ${{ parameters.SWIFT_OPTIONS }}
        condition: not( eq( variables['Agent.OS'], 'Windows_NT' ) )
        displayName: 'Configure toolchain'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/toolchain --target distribution
        displayName: 'Build toolchain'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/toolchain --target install-distribution-stripped
        displayName: 'Install toolchain'
      - task: PublishPipelineArtifact@1
        inputs:
          path: $(Build.StagingDirectory)/toolchain-${{ parameters.platform }}-${{ parameters.host }}
          artifact: toolchain-${{ parameters.platform }}-${{ parameters.host }}
      - script: |
          echo ##vso[task.setvariable variable=PATH]$(icu.directory)/usr/bin;$(install.directory)/usr/bin;$(Build.StagingDirectory)/swift/libdispatch-prefix/bin;%PATH%;%ProgramFiles%/Git/usr/bin
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( '${{ parameters.tests }}', 'true' ) )
        displayName: 'Update PATH'
      - script: |
          echo ##vso[task.setvariable variable=LD_LIBRARY_PATH]$(icu.directory)/usr/lib:$(install.directory)/usr/lib:$(Build.StagingDirectory)/swift/libdispatch-prefix/lib:${LD_LIBRARY_PATH}
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( '${{ parameters.tests }}', 'true' ) )
        displayName: 'Update LD_LIBRARY_PATH'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/toolchain --target check-swift
        condition: eq( '${{ parameters.tests }}', 'true' )
        displayName: 'check-swift'
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(Build.BinariesDirectory)/toolchain/swift-test-results/*/*.xml'
          buildPlatform: ${{ parameters.platform }}-${{ parameters.arch }}
          buildConfiguration: ${{ parameters.VisualStudio }}
        condition: eq( '${{ parameters.tests }}', 'true' )
