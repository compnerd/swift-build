steps:
  - script: |
      git config --global user.name 'builder'
      git config --global user.email 'builder@compnerd.org'

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-cmark cmark
      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm

      # NOTE(compnerd) this cannot be a shallow clone since we need to go back in time to around
      # when the branch was cut
      git clone --quiet --single-branch https://github.com/llvm-mirror/lld lld
      git -C lld checkout a2d223a75197784c0d7f4f525e8ab3365bbe682f
      git -C lld cherry-pick bc987e7310ce4b8c9af42187b21f3b90cc80e1b6
      git -C lld cherry-pick 31d5cdbe7714d545c7513b2587f56045f7ff3efb
      git -C lld revert 15a306219ce5425c77f0f2afb17870c89e560cae

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-lldb lldb
      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-clang clang
      git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift
      # PR26388 - cascading runtime support SDK
      #git -C swift fetch origin pull/26388/head
      #git -C swift cherry-pick FETCH_HEAD~3..FETCH_HEAD

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
    displayName: 'Fetch Sources'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/llvm
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -C $(Build.SourcesDirectory)/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DLLVM_DEFAULT_TARGET_TRIPLE=$(triple)
    displayName: 'Configure LLVM/clang'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llvm
    displayName: 'Build LLVM/clang'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llvm --target install
    displayName: 'Install LLVM/clang'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/cmark
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -G Ninja $(Build.SourcesDirectory)/cmark -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=""
    displayName: 'Configure CMark'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/cmark
    displayName: 'Build CMark'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/swift
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -C $(Build.SourcesDirectory)/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/swift -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DClang_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/clang -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DSWIFT_PATH_TO_CMARK_BUILD=$(Build.StagingDirectory)/cmark -DSWIFT_PATH_TO_CMARK_SOURCE=$(Build.SourcesDirectory)/cmark -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch $(swift.extra_cmake_flags)
    displayName: 'Configure swift'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/swift
    displayName: 'Build swift'
    enabled: false
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/swift --target install
    displayName: 'Install swift'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/lldb
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -C $(Build.SourcesDirectory)/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/lldb -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DClang_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/clang -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DSwift_DIR=$(Build.StagingDirectory)/swift/lib/cmake/swift -DLLDB_PATH_TO_CMARK_SOURCE=$(Build.SourcesDirectory)/cmark -DLLDB_PATH_TO_CMARK_BUILD=$(Build.StagingDirectory)/cmark
    displayName: 'Configure lldb'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/lldb
    displayName: 'Build lldb'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/lldb --target install
    displayName: 'Install lldb'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.StagingDirectory)/Library
      parallel: true
      parallelCount: 8
      artifactName: toolchain
