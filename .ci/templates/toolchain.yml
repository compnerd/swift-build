steps:
  - script: |
      git config --global user.name 'builder'
      git config --global user.email 'builder@compnerd.org'

      git clone --quiet --depth 1 --single-branch --branch swift/master https://github.com/apple/llvm-project toolchain

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-cmark toolchain/cmark
      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch toolchain/swift-corelibs-libdispatch
      git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift toolchain/swift
    displayName: 'Fetch Sources'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/llvm-tools
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -G Ninja $(Build.SourcesDirectory)/toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=NO -DLLVM_ENABLE_PROJECTS="clang"
    displayName: 'Configure LLVM Build Tools'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llvm-tools --target llvm-tblgen
    displayName: 'Build LLVM Build Tools'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llvm-tools --target clang-tblgen
    displayName: 'Build Clang Build Tools'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/toolchain
      cmakeArgs: -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -C $(Build.SourcesDirectory)/cmake/caches/org.compnerd.dt.cmake -G Ninja $(Build.SourcesDirectory)/toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DLLVM_DEFAULT_TARGET_TRIPLE=$(triple) -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;cmark;swift;lldb" -DLLVM_EXTERNAL_PROJECTS="cmark;swift" -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/toolchain/swift-corelibs-libdispatch $(llvm.extra_cmake_flags) $(lldb.extra_cmake_flags) $(swift.extra_cmake_flags)
    displayName: 'Configure toolchain'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/toolchain --target distribution
    displayName: 'Build toolchain'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/toolchain --target install
    displayName: 'Install toolchain'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.StagingDirectory)/Library
      parallel: true
      parallelCount: 8
      artifactName: toolchain
