parameters:
  - name: SWIFT_OPTIONS
    type: string
    default: ''

  - name: VisualStudio
    type: string
    default: ''

  - name: arch
    type: string

  - name: host
    type: string

  - name: platform
    type: string

  - name: triple
    type: string

  - name: os
    type: string

  - name: proc
    type: string

jobs:
  - job: ${{ parameters.host }}
    # NOTE(compnerd) disable non-x64 builds as they are currently broken :(
    condition: eq( '${{ parameters.host }}', 'x64' )
    variables:
      toolchain.directory: $(Pipeline.Workspace)/toolchain-windows-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain

      curl.version: development
      icu.version: 64
      xml2.version: development
      zlib.version: 1.2.11

      curl.directory: $(Pipeline.Workspace)/curl/curl-${{ parameters.platform }}-${{ parameters.host }}/Library/libcurl-$(curl.version)
      icu.directory: $(Pipeline.Workspace)/icu/icu-${{ parameters.platform }}-${{ parameters.host }}/Library/icu-$(icu.version)
      xml2.directory: $(Pipeline.Workspace)/xml2/xml2-${{ parameters.platform }}-${{ parameters.host }}/Library/libxml2-$(xml2.version)
      zlib.directory: $(Pipeline.Workspace)/zlib/zlib-${{ parameters.platform }}-${{ parameters.host }}/Library/zlib-$(zlib.version)

      platform.directory: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/Windows.platform
      sdk.directory: $(platform.directory)/Developer/SDKs/Windows.sdk

      install.directory: $(sdk.directory)/usr
      xctest.install.directory: $(platform.directory)/Developer/Library/XCTest-development/usr
    steps:
      - download: current
        artifact: toolchain-windows-x64
        displayName: 'download toolchain'
      - download: icu
        artifact: icu-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download ICU'
      - download: xml2
        artifact: xml2-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download XML2'
      - download: curl
        artifact: curl-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download CURL'
      - download: zlib
        artifact: zlib-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download zlib'
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbolic links, disable line ending conversion'
      - checkout: self
      - checkout: apple/llvm-project
        displayName: 'checkout apple/llvm-project'
      - checkout: apple/swift
        displayName: 'checkout apple/swift'
      - checkout: apple/swift-corelibs-libdispatch
        displayName: 'checkout apple/swift-corelibs-libdispatch'
      - checkout: apple/swift-corelibs-foundation
        displayName: 'checkout apple/swift-corelibs-foundation'
      - checkout: apple/swift-corelibs-xctest
        displayName: 'checkout apple/swift-corelibs-xctest'
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%DISPATCH_PR%" swift-corelibs-libdispatch
          call :ApplyPatches "%FOUNDATION_PR%" swift-corelibs-foundation
          call :ApplyPatches "%XCTEST_PR%" swift-corelibs-xctest

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/head
            git -C %repository% cherry-pick FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: 'Apply Patches'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - task: CmdLine@2
        inputs:
          script: |
            echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Update PATH'
      - script: |
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Configure SDK'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
        name: python
        continueOnError: true
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/llvm
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)/llvm-project/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_HOST_TRIPLE=${{ parameters.triple }}
        displayName: 'Configure LLVM'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/swift-stdlib
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -C $(Build.SourcesDirectory)/swift-build/cmake/caches/swift-stdlib-${{ parameters.platform }}-${{ parameters.arch }}.cmake $(Build.SourcesDirectory)/swift -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(Build.BinariesDirectory)/llvm/lib/cmake/llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin -DCMAKE_INSTALL_PREFIX=$(install.directory) ${{ parameters.SWIFT_OPTIONS }}
        displayName: 'Configure Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib
        displayName: 'Build Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib --target install
        displayName: 'Install Swift Standard Library'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/libdispatch
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-libdispatch -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DBUILD_TESTING=YES -DENABLE_SWIFT=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch
        displayName: 'Build libdispatch'
      - script: |
          echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Configure CTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch --target ExperimentalTest
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Test libdispatch'
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: cTest
          testResultsFiles: $(Build.BinariesDirectory)/libdispatch/Testing/*/Test.xml
        condition: and( eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' ), succeededOrFailed() )
        displayName: 'Publish libdispatch test results'
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/libdispatch
          contents: swiftDispatch.lib
          targetFolder: $(Build.BinariesDirectory)/libdispatch/src/swift
        displayName: 'Workaround CMake<3.16'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/foundation
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-foundation -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib -DZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -Ddispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules -DCURL_DIR=$(curl.directory)/usr/lib/cmake/CURL -DENABLE_TESTING=NO
        displayName: 'Configure Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation
        displayName: 'Build Foundation'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/xctest
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake $(Build.SourcesDirectory)/swift-corelibs-xctest -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory) -DENABLE_TESTING=NO -DFoundation_DIR=$(Build.BinariesDirectory)/foundation/cmake/modules -Ddispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
        displayName: 'Configure XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest
        displayName: 'Build XCTest'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/foundation
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake -G Ninja $(Build.SourcesDirectory)/swift-corelibs-foundation -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib -DZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -Ddispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules -DCURL_DIR=$(curl.directory)/usr/lib/cmake/CURL -DENABLE_TESTING=YES -DXCTest_DIR=$(Build.BinariesDirectory)/xctest/cmake/modules
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Re-Configure Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Re-build Foundation'
      - script: |
          echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Configure CTest'
      - script: |
          echo ##vso[task.setvariable variable=PATH]$(icu.directory)/usr/bin;$(Build.BinariesDirectory)/swift-stdlib/bin;$(Build.BinariesDirectory)/libdispatch;$(Build.BinariesDirectory)/foundation/Foundation;$(Build.BinariesDirectory)/xctest;%PATH%;%ProgramFiles%\Git\usr\bin
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Update PATH'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation --target test
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: 'Test Foundation'
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: cTest
          testResultsFiles: $(Build.BinariesDirectory)/foundation/Testing/*/Test.xml
        condition: and( eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' ), succeededOrFailed() )
        displayName: 'Publish Foundation test results'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation --target install
        displayName: 'Install Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest --target install
        displayName: 'Install XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch --target install
        displayName: 'Install libdispatch'

      - publish: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
