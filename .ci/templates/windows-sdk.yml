# parameters:
# arch: [ 'aarch64' | 'x86_64' ]
# build: [ 'arm64' | 'x64' ]
# triple: [ 'aarch64-unknown-windows-msvc' | 'x86_64-unknown-windows-msvc' ]

steps:
  - script: |
      git config --global user.name 'builder'
      git config --global user.email 'builder@compnerd.org'

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm

      git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift
      call :ApplyPatches "%SWIFT_PR%" swift

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
      call :ApplyPatches "%DISPATCH_PR%" swift-corelibs-libdispatch

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
      call :ApplyPatches "%FOUNDATION_PR%" swift-corelibs-foundation

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest
      call :ApplyPatches "%XCTEST_PR%" swift-corelibs-xctest

      git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llbuild llbuild
      call :ApplyPatches "%LLBUILD_PR%" llbuild

      goto :eof

      :ApplyPatches
      setlocal
      set list=%~1
      set repository=%~2
      for /F "tokens=1*" %%P in ("%list%") do (
        git -C %repository% fetch origin pull/%%P/head
        git -C %repository% cherry-pick FETCH_HEAD
        if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
      )
      endlocal
      goto :eof
    displayName: 'Fetch Sources'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      allowPartiallySucceededBuilds: true
      pipeline: 1
      artifactName: 'toolchain'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install toolchain'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      allowPartiallySucceededBuilds: true
      pipeline: 9
      artifactName: 'icu-$(platform)-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install ICU'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      pipeline: 10
      allowPartiallySucceededBuilds: true
      artifactName: 'xml2-$(platform)-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install XML2'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      pipeline: 11
      allowPartiallySucceededBuilds: true
      artifactName: 'curl-$(platform)-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install CURL'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      pipeline: 12
      allowPartiallySucceededBuilds: true
      artifactName: 'sqlite-$(platform)-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install SQLite3'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      pipeline: 16
      allowPartiallySucceededBuilds: true
      artifactName: 'zlib-$(platform)-$(host)'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Install ZLIB'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.7.x'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/llvm
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/llvm -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DLLVM_HOST_TRIPLE=$(triple)
    displayName: 'Configure LLVM'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/stdlib
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swift -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch)-clang.cmake -C $(Build.SourcesDirectory)/cmake/caches/swift-stdlib-$(platform)-$(arch).cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin -DSWIFT_WINDOWS_$(arch)_ICU_UC_INCLUDE=$(icu.directory)/usr/include/unicode -DSWIFT_WINDOWS_$(arch)_ICU_UC=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DSWIFT_WINDOWS_$(arch)_ICU_I18N_INCLUDE=$(icu.directory)/usr/include -DSWIFT_WINDOWS_$(arch)_ICU_I18N=$(icu.directory)/usr/lib/icuin$(icu.version).lib
    displayName: 'Configure Swift Standard Library'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/stdlib
    displayName: 'Build Swift Standard Library'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/stdlib --target install
    displayName: 'Install Swift Standard Library'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/libdispatch
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swift-corelibs-libdispatch -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch)-clang.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc -DENABLE_SWIFT=YES
    displayName: 'Configure libdispatch'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/libdispatch
    displayName: 'Build libdispatch'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/foundation
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swift-corelibs-foundation -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch)-clang.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc -DZLIB_ROOT=$(zlib.directory)/usr -DZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib -DCURL_DIR=$(curl.directory)/usr/lib/cmake/CURL -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
    displayName: 'Configure Foundation'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/foundation
    displayName: 'Build Foundation'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/xctest
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swift-corelibs-xctest -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch)-clang.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory) -DCMAKE_SWIFT_COMPILER=swiftc -DENABLE_TESTING=NO -DXCTEST_PATH_TO_FOUNDATION_BUILD=$(Build.StagingDirectory)/foundation -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch
    displayName: 'Configure XCTest'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/xctest
    displayName: 'Build XCTest'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/foundation
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swift-corelibs-foundation -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch)-clang.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DCMAKE_SWIFT_COMPILER=swiftc -DZLIB_ROOT=$(zlib.directory)/usr -DZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib -DCURL_DIR=$(curl.directory)/usr/lib/cmake/CURL -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=$(Build.StagingDirectory)/libdispatch -DFOUNDATION_PATH_TO_XCTEST_BUILD=$(Build.StagingDirectory)/xctest -DENABLE_TESTING=YES
    displayName: 'Re-configure Foundation'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/foundation
    displayName: 'Re-build Foundation'
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.StagingDirectory)/llbuild
      cmakeArgs: -G Ninja $(Build.SourcesDirectory)/llbuild -C $(Build.SourcesDirectory)/cmake/caches/$(platform)-$(arch).cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(llbuild.install.directory) -DLLBUILD_SUPPORT_BINDINGS=Swift -DFOUNDATION_BUILD_DIR=$(Build.StagingDirectory)/foundation -DLIBDISPATCH_BUILD_DIR=$(Build.StagingDirectory)/libdispatch -DLIBDISPATCH_SOURCE_DIR=$(Build.SourcesDirectory)/swift-corelibs-libdispatch -DSQLite3_LIBRARY=$(sqlite.directory)/usr/lib/SQLite3.lib -DSQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include
    displayName: 'Configure llbuild'
    continueOnError: true
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llbuild
    displayName: 'Build llbuild'
    continueOnError: true
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/libdispatch --target install
    displayName: 'Install libdispatch'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/foundation --target install
    displayName: 'Install Foundation'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/xctest --target install
    displayName: 'Install XCTest'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/llbuild --target install
    displayName: 'Install llbuild'
    continueOnError: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.StagingDirectory)/Library
      artifactName: sdk-$(platform)-$(host)
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/libdispatch --target ExperimentalTest
    displayName: 'Test libdispatch'
    continueOnError: true
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: cTest
      testResultsFiles: $(Build.StagingDirectory)/libdispatch/Testing/*/Test.xml
    condition: succeededOrFailed()
    displayName: Publish test results
  - script: |
      echo ##vso[task.setvariable variable=PATH]$(icu.directory)/usr/bin;$(Build.StagingDirectory)/libdispatch;$(Build.StagingDirectory)/libdispatch/src;$(Build.StagingDirectory)/foundation;$(Build.StagingDirectory)/xctest;%PATH%;%ProgramFiles(x86)%\GnuWin32\bin;%ProgramFiles%\Git\usr\bin
    displayName: 'Update PATH'
  - script: |
      echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
    displayName: 'Configure CTest'
  - task: CMake@1
    inputs:
      cmakeArgs: --build $(Build.StagingDirectory)/foundation --target test
    displayName: 'Test Foundation'
    continueOnError: true
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: cTest
      testResultsFiles: $(Build.StagingDirectory)/libdispatch/Testing/*/Test.xml
    condition: succeededOrFailed()
    displayName: Publish test results
