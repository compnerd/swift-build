parameters:
  - name: SWIFT_OPTIONS
    type: string
    default: ''

  - name: TENSORFLOW
    type: boolean
    default: false

  - name: VisualStudio
    type: string
    default: ''

  - name: PythonVersion
    type: string
    default: '3.7.x'

  - name: arch
    type: string

  - name: host
    type: string

  - name: platform
    type: string

  - name: triple
    type: string

  - name: os
    type: string

  - name: proc
    type: string

  - name: ICU_VERSION
    type: string

  - name: VERSION
    type: string
    default: 'trunk'

jobs:
  - job: ${{ parameters.host }}
    # NOTE(compnerd) disable non-x64 builds as they are currently broken :(
    condition: eq( '${{ parameters.host }}', 'x64' )
    # NOTE(compnerd) the build times seem to have increased :-(
    timeoutInMinutes: 120
    variables:
      toolchain.directory: $(Pipeline.Workspace)/toolchain-windows-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain

      curl.version: development
      icu.version: ${{ parameters.ICU_VERSION }}
      tensorflow.version: 2.3.0
      xml2.version: development
      zlib.version: 1.2.11

      curl.directory: $(Pipeline.Workspace)/curl/curl-${{ parameters.platform }}-${{ parameters.host }}/Library/libcurl-$(curl.version)
      icu.directory: $(Pipeline.Workspace)/icu/icu-${{ parameters.platform }}-${{ parameters.host }}/Library/icu-$(icu.version)
      tensorflow.directory: $(Pipeline.Workspace)/tensorflow/tensorflow-${{ parameters.platform }}-${{ parameters.host }}/Library/tensorflow-$(tensorflow.version)
      xml2.directory: $(Pipeline.Workspace)/xml2/xml2-${{ parameters.platform }}-${{ parameters.host }}/Library/libxml2-$(xml2.version)
      zlib.directory: $(Pipeline.Workspace)/zlib/zlib-${{ parameters.platform }}-${{ parameters.host }}/Library/zlib-$(zlib.version)

      platform.directory: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform
      sdk.directory: $(platform.directory)/Developer/SDKs/${{ parameters.os }}.sdk

      install.directory: $(sdk.directory)/usr
      xctest.install.directory: $(platform.directory)/Developer/Library/XCTest-development/usr
    workspace:
      clean: outputs
    steps:
      - download: current
        artifact: toolchain-windows-x64
        displayName: download toolchain

      - download: icu
        artifact: icu-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download ICU

      - download: xml2
        artifact: xml2-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download XML2

      - download: curl
        artifact: curl-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download CURL

      - download: zlib
        artifact: zlib-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download zlib

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - download: tensorflow
          artifact: tensorflow-${{ parameters.platform }}-${{ parameters.host }}
          displayName: download TensorFlow

      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Enable symbolic links, disable line ending conversion

      # The checkout list has to match with the toolchain.yml checkout list.
      # Otherwise Azure will create different directories for each build.
      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project

      - checkout: apple/swift
        displayName: checkout apple/swift

      - checkout: apple/swift-cmark
        displayName: checkout apple/swift-cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams

      - checkout: apple/swift-argument-parser
        displayName: checkout apple/swift-argument-parser

      - checkout: apple/swift-driver
        displayName: checkout apple/swift-driver

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - checkout: apple/sourcekit-lsp
        displayName: checkout apple/sourcekit-lsp

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - checkout: tensorflow/swift-apis
          displayName: checkout tensorflow/swift-apis

        - checkout: pvieito/PythonKit
          displayName: checkout pvieito/PythonKit

      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%DISPATCH_PR%" swift-corelibs-libdispatch
          call :ApplyPatches "%FOUNDATION_PR%" swift-corelibs-foundation
          call :ApplyPatches "%XCTEST_PR%" swift-corelibs-xctest

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/merge
            git -C %repository% merge FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: Apply Patches

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - script: |
            call :ApplyPatches "%SWIFT_APIS_PR%" swift-apis
            call :ApplyPatches "%PYTHONKIT_PR%" PythonKit

            goto :eof

            :ApplyPatches
            setlocal
            set list=%~1
            set repository=%~2
            for /F "tokens=1*" %%P in ("%list%") do (
              git -C %repository% fetch origin pull/%%P/merge
              git -C %repository% merge FETCH_HEAD
              if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
            )
            endlocal
            goto :eof
          displayName: Apply Patches

      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'

      - task: CmdLine@2
        inputs:
          script: |
            echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Update PATH'

      - script: |
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Configure SDK'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}
        name: python
        continueOnError: true

      - task: CMake@1
        displayName: Configure LLVM
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/llvm
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D LLVM_HOST_TRIPLE=${{ parameters.triple }}
            -D LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=YES
            -G Ninja
            -S $(Build.SourcesDirectory)/llvm-project/llvm

      - task: CMake@1
        displayName: Configure Swift Standard Library
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/swift-stdlib-${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D LLVM_DIR=$(Build.BinariesDirectory)/llvm/lib/cmake/llvm
            -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            ${{ parameters.SWIFT_OPTIONS }}
            -G Ninja
            -S $(Build.SourcesDirectory)/swift

      - ${{ if eq(parameters.VERSION,'5.3') }}:
        - script: |
            mklink "$(Build.BinariesDirectory)/swift-stdlib/bin/swiftc" "$(toolchain.directory)/usr/bin/swiftc.exe"

      - task: CMake@1
        displayName: Build Swift Standard Library
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib

      - task: CMake@1
        displayName: Configure libdispatch
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/libdispatch
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-libdispatch
            -B $(Build.BinariesDirectory)/libdispatch
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D SWIFT_STDLIB_DIR=$(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D BUILD_TESTING=NO
            -D ENABLE_SWIFT=YES

      - task: CMake@1
        displayName: Build libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch

      - task: CopyFiles@2
        displayName: 'Workaround CMake<3.16'
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/libdispatch
          contents: swiftDispatch.lib
          targetFolder: $(Build.BinariesDirectory)/libdispatch/src/swift

      - task: CMake@1
        displayName: Configure Foundation
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/foundation
          cmakeArgs:
            -G Ninja
            -B $(Build.BinariesDirectory)/foundation
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D SWIFT_STDLIB_DIR=$(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D ZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib
            -D ZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include
            -D CURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib
            -D CURL_INCLUDE_DIR=$(curl.directory)/usr/include
            -D ICU_INCLUDE_DIR=$(icu.directory)/usr/include
            -D ICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib
            -D ICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib
            -D ICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib
            -D ICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib
            -D LIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib
            -D LIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2
            -D dispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
            -D CURL_NO_CURL_CMAKE=YES
            -D CURL_DIR=$(curl.directory)/usr/lib/cmake/CURL
            -D ENABLE_TESTING=NO
            -S $(Build.SourcesDirectory)/swift-corelibs-foundation

      - task: CMake@1
        displayName: Build Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation

      - task: CMake@1
        displayName: Configure XCTest
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/xctest
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-xctest
            -B $(Build.BinariesDirectory)/xctest
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D SWIFT_STDLIB_DIR=$(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(xctest.install.directory)
            -D ENABLE_TESTING=NO
            -D dispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
            -D Foundation_DIR=$(Build.BinariesDirectory)/foundation/cmake/modules

      - task: CMake@1
        displayName: Build XCTest
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest

      - task: CMake@1
        displayName: Install Swift Standard Library
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib --target install

      - task: CMake@1
        displayName: Install Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation --target install

      - task: CMake@1
        displayName: Install XCTest
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest --target install

      - task: CMake@1
        displayName: Install libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch --target install

      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.7.x
        name: python3
        continueOnError: true

      - task: PythonScript@0
        inputs:
          scriptSource: inline
          script: |
            import os, plistlib

            info_plist = r'$(platform.directory)/Info.plist'
            with open(os.path.normpath(info_plist), 'wb') as plist:
              # TODO(compnerd) derive this from the install directory
              plistlib.dump({ 'DefaultProperties': { 'XCTEST_VERSION': 'development', 'SWIFTC_FLAGS': ['-use-ld=lld'] } }, plist)

            sdk_settings_plist = r'$(sdk.directory)/SDKSettings.plist'
            with open(os.path.normpath(sdk_settings_plist), 'wb') as plist:
              # TODO(compnerd) derive this from the CMAKE_BUILD_TYPE for the
              # runtime.
              plistlib.dump({ 'DefaultProperties': { 'DEFAULT_USE_RUNTIME': 'MD' } }, plist)

      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}
        continueOnError: true

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - task: CMake@1
          displayName: Configure PythonKit
          inputs:
            cmakeArgs:
              -B $(Build.BinariesDirectory)/PythonKit
              -D BUILD_SHARED_LIBS=YES
              -D BUILD_TESTING=NO
              -D CMAKE_BUILD_TYPE=Release
              -D CMAKE_INSTALL_PREFIX=$(install.directory)
              -D CMAKE_Swift_FLAGS="-sdk $(sdk.directory) -resource-dir $(sdk.directory)/usr/lib/swift -L $(sdk.directory)/usr/lib/swift/${{ parameters.platform }}"
              -G Ninja
              -S $(Build.SourcesDirectory)/PythonKit

        - task: CMake@1
          displayName: Build PythonKit
          inputs:
            cmakeArgs: --build $(Build.BinariesDirectory)/PythonKit

        - task: CMake@1
          displayName: Install PythonKit
          inputs:
            cmakeArgs: --build $(Build.BinariesDirectory)/PythonKit --target install

        - task: CMake@1
          displayName: Configure tensorflow-swift-apis
          inputs:
            cmakeArgs:
              -B $(Build.BinariesDirectory)/tensorflow-swift-apis
              -D BUILD_SHARED_LIBS=YES
              -D BUILD_TESTING=NO
              -D CMAKE_BUILD_TYPE=Release
              -D CMAKE_INSTALL_PREFIX=$(install.directory)
              -D CMAKE_Swift_FLAGS="-sdk $(sdk.directory) -resource-dir $(sdk.directory)/usr/lib/swift -L $(sdk.directory)/usr/lib/swift/${{ parameters.platform }}"
              -D BUILD_X10=YES
              -D X10_LIBRARY=$(tensorflow.directory)/usr/lib/x10.lib
              -D X10_INCLUDE_DIRS=$(tensorflow.directory)/usr/include
              -G Ninja
              -S $(Build.SourcesDirectory)/swift-apis

        - task: CMake@1
          displayName: Build tensorflow-swift-apis
          inputs:
            cmakeArgs: --build $(Build.BinariesDirectory)/tensorflow-swift-apis

        - task: CMake@1
          displayName: Install tensorflow-swift-apis
          inputs:
            cmakeArgs: --build $(Build.BinariesDirectory)/tensorflow-swift-apis --target install

      - publish: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}

      - task: CMake@1
        displayName: Reconfigure libdispatch
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/libdispatch
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-libdispatch
            -B $(Build.BinariesDirectory)/libdispatch
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D SWIFT_STDLIB_DIR=$(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D BUILD_TESTING=YES
            -D ENABLE_SWIFT=YES

      - task: CMake@1
        displayName: Rebuild libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch

      - script: |
          echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: Configure CTest

      - task: CMake@1
        displayName: Test libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch --target ExperimentalTest
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        continueOnError: true

      - task: PublishTestResults@2
        condition: and( eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' ), succeededOrFailed() )
        displayName: Publish libdispatch test results
        inputs:
          testResultsFormat: cTest
          testResultsFiles: $(Build.BinariesDirectory)/libdispatch/Testing/*/Test.xml

      - script: |
          echo ##vso[task.setvariable variable=PATH]$(icu.directory)/usr/bin;$(Build.BinariesDirectory)/swift-stdlib/bin;$(Build.BinariesDirectory)/libdispatch;$(Build.BinariesDirectory)/foundation/Foundation;$(Build.BinariesDirectory)/xctest;%PATH%;%ProgramFiles%\Git\usr\bin
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: Update PATH

      - task: CMake@1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        continueOnError: true
        displayName: Reconfigure Foundation
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/foundation
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-foundation
            -B $(Build.BinariesDirectory)/foundation
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D SWIFT_STDLIB_DIR=$(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D ZLIB_LIBRARY=$(zlib.directory)/usr/lib/zlibstatic.lib
            -D ZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include
            -D CURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.lib
            -D CURL_INCLUDE_DIR=$(curl.directory)/usr/include
            -D ICU_INCLUDE_DIR=$(icu.directory)/usr/include
            -D ICU_UC_LIBRARY=$(icu.directory)/usr/lib/icuuc$(icu.version).lib
            -D ICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuuc$(icu.version).lib
            -D ICU_I18N_LIBRARY=$(icu.directory)/usr/lib/icuin$(icu.version).lib
            -D ICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/icuin$(icu.version).lib
            -D LIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2s.lib
            -D LIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2
            -D dispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
            -D ENABLE_TESTING=YES
            -D XCTest_DIR=$(Build.BinariesDirectory)/xctest/cmake/modules

      - task: CMake@1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: Rebuild Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation

      - script: |
          echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        displayName: Configure CTest

      - task: CMake@1
        condition: eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' )
        continueOnError: true
        displayName: Test Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation --target test

      - task: PublishTestResults@2
        condition: and( eq( variables['Agent.OSArchitecture'], '${{ parameters.host }}' ), succeededOrFailed() )
        displayName: Publish Foundation test results
        inputs:
          testResultsFormat: cTest
          testResultsFiles: $(Build.BinariesDirectory)/foundation/Testing/*/Test.xml
