jobs:
  - job: swift_icu__${{ parameters.proc }}_deb
    pool: ${{ parameters.pool }}
    steps:
      - checkout: self
      - download: icu
        artifact: icu-linux-${{ parameters.host }}
      - script: |
          rsync -v -a -l $(Pipeline.Workspace)/icu-linux-${{ parameters.host }}/Library $(Build.StagingDirectory)/swift-icu/Library

          # ensure that the library path is searched in
          mkdir -p $(Build.StagingDirectory)/swift-icu/etc/ld.so.conf.d
          echo '/Library/icu-64/usr/lib' > $(Build.StagingDirectory)/swift-icu/etc/ld.so.conf.d/swift-icu.conf

          # do not distribute the headers
          rm -v -r -f $(Build.StagingDirectory)/swift-icu/Library/icu-64/usr/include
        displayName: 'cleanup image'
      - script: |
          mkdir -p $(Build.StagingDirectory)/swift-icu/DEBIAN
          sed -e "s/Version:/& $(Build.BuildId)/" $(Build.SourcesDirectory)/debian/linux-icu > $(Build.StagingDirectory)/swift-icu/DEBIAN/control

          cd $(Build.StagingDirectory)
          fakeroot dpkg-deb --build swift-icu $(Build.StagingDirectory)
        displayName: 'package'
      - publish: $(Build.StagingDirectory)/swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb
        artifact: swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb
      - script: |
          cd $(Build.StagingDirectory)
          curl -F swift-icu=@swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb https://$(GEMFURY_PASSWORD)@push.fury.io/compnerd
        displayName: 'upload to gemfury'
        enabled: false
