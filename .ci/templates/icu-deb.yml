jobs:
  - job: swift_icu__${{ parameters.proc }}_deb
    variables:
      icu.version: ${{ parameters.ICU_VERSION }}
    steps:
      - download: icu
        artifact: icu-linux-${{ parameters.host }}

      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Enable symbolic links, disable line ending conversion

      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project

      - checkout: apple/swift
        displayName: checkout apple/swift

      - checkout: apple/swift-cmark
        displayName: checkout apple/swift-cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams

      - checkout: apple/swift-argument-parser
        displayName: checkout apple/swift-argument-parser

      - checkout: apple/swift-driver
        displayName: checkout apple/swift-driver

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - checkout: apple/sourcekit-lsp
        displayName: checkout apple/sourcekit-lsp

      - script: |
          mkdir -p $(Build.StagingDirectory)/swift-icu
          rsync -v -a -l $(Pipeline.Workspace)/icu/icu-linux-${{ parameters.host }}/Library $(Build.StagingDirectory)/swift-icu/Library

          # ensure that the library path is searched in
          mkdir -p $(Build.StagingDirectory)/swift-icu/etc/ld.so.conf.d
          echo '/Library/icu-$(icu.version)/usr/lib' > $(Build.StagingDirectory)/swift-icu/etc/ld.so.conf.d/swift-icu.conf

          # do not distribute the headers
          rm -v -r -f $(Build.StagingDirectory)/swift-icu/Library/icu-$(icu.version)/usr/include
        displayName: 'cleanup image'

      - script: |
          mkdir -p $(Build.StagingDirectory)/swift-icu/DEBIAN
          sed -e "s/Version:/& $(Build.BuildId)/" $(Build.SourcesDirectory)/swift-build/debian/linux-icu > $(Build.StagingDirectory)/swift-icu/DEBIAN/control

          cd $(Build.StagingDirectory)
          fakeroot dpkg-deb --build swift-icu $(Build.StagingDirectory)
        displayName: 'package'

      - publish: $(Build.StagingDirectory)/swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb
        artifact: swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb

      - script: |
          cd $(Build.StagingDirectory)
          curl -F swift-icu=@swift-icu_$(Build.BuildId)_${{ parameters.proc }}.deb https://$(GEMFURY_PASSWORD)@push.fury.io/compnerd
        displayName: 'upload to gemfury'
