jobs:
  - job: ${{ parameters.host }}
    variables:
      zlib.version: 1.2.11
      
      zlib.directory: $(Pipeline.Workspace)/zlib/zlib-${{ parameters.platform }}-${{ parameters.host }}/Library/zlib-$(zlib.version)
      install.directory: $(Build.StagingDirectory)/curl-${{ parameters.platform }}-${{ parameters.host }}/Library/libcurl-development
      
    steps:
      - download: zlib
        artifact: zlib-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download zlib'
      - checkout: self
        displayName: 'checkout compnerd/swift-build'
      - checkout: curl/curl
        displayName: 'checkout curl/curl'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - script: |
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
          sudo apt-get update
          sudo apt-get -y install cmake ninja-build
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: 'Install Dependencies'
      - script: |
          /usr/bin/cmake -B $(Build.BinariesDirectory)/curl -C $(Build.SourcesDirectory)/swift-build/cmake/caches/curl.cmake -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -G Ninja $(Build.SourcesDirectory)/curl -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=$(install.directory)/usr -DZLIB_ROOT=$(zlib.directory)/usr -DBUILD_SHARED_LIBS=NO -DBUILD_TESTING=NO
        # NOTE(compnerd) workaround old cmake installation on hosted agents
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: 'Configure curl'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/curl
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/curl.cmake -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -G Ninja $(Build.SourcesDirectory)/curl -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=$(install.directory)/usr -DZLIB_ROOT=$(zlib.directory)/usr -DBUILD_SHARED_LIBS=NO -DBUILD_TESTING=NO
        # NOTE(compnerd) workaround old cmake installation on hosted agents
        condition: not( eq( variables['Agent.OS'], 'Linux' ) )
        displayName: 'Configure curl'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/curl
        displayName: 'Build CURL'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/curl --target install
        displayName: 'Install CURL'
      - publish: $(Build.StagingDirectory)/curl-${{ parameters.platform }}-${{ parameters.host }}
        artifact: curl-${{ parameters.platform }}-${{ parameters.host }}
