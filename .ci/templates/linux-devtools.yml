jobs:
  - job: ${{ parameters.host }}
    variables:
      sqlite.directory: $(Pipeline.Workspace)/sqlite/sqlite-${{ parameters.platform }}-${{ parameters.host }}/Library/sqlite-3.30.1
      toolchain.directory: $(Pipeline.Workspace)/toolchain-linux-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      sdk.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform/Developer/SDKs/${{ parameters.os }}.sdk

      platform.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform

      llbuild.version: development
      tsc.version: development
      IndexStoreDB.version: development
      SwiftPM.version: development
    steps:
      - download: current
        artifact: toolchain-linux-x64
        displayName: download toolchain

      - download: current
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download SDK

      - download: sqlite
        artifact: sqlite-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download SQLite

      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Enable symbolic links, disable line ending conversion

      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project

      - checkout: apple/swift
        displayName: checkout apple/swift

      - checkout: apple/swift-cmark
        displayName: checkout apple/swift-cmark
        path: s/toolchain/cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild
        path: s/llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core
        path: s/tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams
        path: s/Yams

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager
        path: s/swiftpm

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - checkout: tensorflow/swift-apis
          displayName: checkout tensorflow/swift-apis
          path: s/tensorflow-swift-apis

        - checkout: pvieito/PythonKit
          displayName: checkout pvieito/PythonKit

      - script: |
          function ApplyPatches() {
            local repository=${1} ; shift
            for PR in "${@}" ; do
              git -C ${repository} fetch origin pull/${PR}/head
              git -C ${repository} cherry-pick FETCH_HEAD
            done
          }

          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          ApplyPatches llbuild ${LLBUILD_PR}
          ApplyPatches tools-support-core ${TSC_PR}
          ApplyPatches swiftpm ${SPM_PR}
          ApplyPatches indexstore-db ${INDEXSTOREDB_PR}
        displayName: 'Apply Patches'
      - script: |
          chmod +x $(toolchain.directory)/usr/bin/ar
          chmod +x $(toolchain.directory)/usr/bin/clang
          chmod +x $(toolchain.directory)/usr/bin/clang++
          chmod +x $(toolchain.directory)/usr/bin/ranlib
          chmod +x $(toolchain.directory)/usr/bin/swift-autolink-extract
          chmod +x $(toolchain.directory)/usr/bin/swiftc
          chmod +x $(toolchain.directory)/usr/bin/ld.lld
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: 'Correct File Modes'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llbuild
          cmakeArgs: -G Ninja -S $(Build.SourcesDirectory)/llbuild -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang -DCMAKE_CXX_COMPILER=$(toolchain.directory)/usr/bin/clang++ -DCMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc -DCMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld" -DCMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/llbuild-$(llbuild.version)/usr -DLLBUILD_SUPPORT_BINDINGS=Swift -DSQLite3_LIBRARY=$(sqlite.directory)/usr/lib/libSQLite3.a -DSQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include
        displayName: 'Configure llbuild'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llbuild
        displayName: 'Build llbuild'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llbuild --target install
        displayName: 'Install llbuild'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/tsc
          cmakeArgs: -G Ninja -S $(Build.SourcesDirectory)/tools-support-core -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang -DCMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc -DCMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld" -DCMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/Library/TSC-$(tsc.version)/usr -DBUILD_SHARED_LIBS=YES
        displayName: 'Configure tools-support-core'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/tsc
        displayName: 'Build tools-support-core'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/tsc --target install
        displayName: 'Install tools-support-core'
        enabled: false
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/spm
          cmakeArgs: -G Ninja $(Build.SourcesDirectory)/swiftpm -C $(Build.SourcesDirectory)/swift-build/cmake/caches/linux-${{ parameters.arch }}.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang -DCMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc -DCMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld" -DCMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/swiftpm-$(SwiftPM.version)/usr -DBUILD_SHARED_LIBS=YES -DTSC_DIR=$(Build.StagingDirectory)/tsc/cmake/modules -DLLBuild_DIR=$(Build.StagingDirectory)/llbuild/cmake/modules
        displayName: 'Configure swift-package-manager'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/spm
        displayName: 'Build swift-package-manager'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/spm --target install
        displayName: 'Install swift-package-manager'
        enabled: false
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/indexstore-db
          cmakeArgs: -G Ninja $(Build.SourcesDirectory)/indexstore-db -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=$(toolchain.directory)/usr/bin/clang++ -DCMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc -DCMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld" -DCMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/IndexStoreDB-$(IndexStoreDB.version)/usr -DBUILD_SHARED_LIBS=YES -DCMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES="$(sdk.directory)/usr/lib/swift;$(sdk.directory)/usr/lib/swift/Block"
        displayName: 'Configure IndexStoreDB'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/indexstore-db
        displayName: 'Build IndexStoreDB'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/indexstore-db --target install
        displayName: 'Install IndexStoreDB'
      - publish: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}
        artifact: devtools-${{ parameters.platform }}-${{ parameters.host }}
