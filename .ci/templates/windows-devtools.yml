parameters:
  - name: VisualStudio
    type: string
    default: ''

  - name: PythonVersion
    type: string
    default: '3.7.x'

  - name: arch
    type: string

  - name: host
    type: string

  - name: platform
    type: string

  - name: os
    type: string

  - name: proc
    type: string

  - name: ICU_VERSION
    type: string

  - name: SQLITE_VERSION
    type: string

  - name: TENSORFLOW
    default: false

  - name: USE_PREBUILT_TOOLCHAIN
    default: false

jobs:
  - job: ${{ parameters.host }}

    # NOTE(compnerd) disable non-x64 builds as they are currently broken :(
    condition: eq( '${{ parameters.host }}', 'x64' )

    workspace:
      clean: outputs

    variables:
      toolchain.directory: $(Pipeline.Workspace)/toolchain-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      sdk.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform/Developer/SDKs/${{ parameters.os }}.sdk
      developer_library.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform/Developer/Library

      icu.directory: $(Pipeline.Workspace)/icu/icu-${{ parameters.platform }}-${{ parameters.host }}/Library/icu-${{ parameters.ICU_VERSION }}
      sqlite.directory: $(Pipeline.Workspace)/sqlite/sqlite-${{ parameters.platform }}-${{ parameters.host }}/Library/sqlite-${{ parameters.SQLITE_VERSION }}

      devtools.toolchain.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      devtools.platform.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform

    steps:
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        displayName: Enable symbolic links, disable line ending conversion

      - ${{ if eq(parameters.USE_PREBUILT_TOOLCHAIN, true) }}:
        - task: DownloadPipelineArtifact@2
          displayName: download toolchain
          inputs:
            buildType: specific
            project: 3133d6ab-80a8-4996-ac4f-03df25cd3224
            definition: 7
            buildVersionToDownload: latest
            allowPartiallySucceededBuilds: true
            specificBuildWithTriggering: true
            artifact: toolchain-${{ parameters.platform }}-${{ parameters.host }}
            targetPath: $(Pipeline.Workspace)/toolchain-${{ parameters.platform }}-${{ parameters.host }}

        - task: DownloadPipelineArtifact@2
          displayName: download SDK
          inputs:
            buildType: specific
            project: 3133d6ab-80a8-4996-ac4f-03df25cd3224
            definition: 7
            buildVersionToDownload: latest
            allowPartiallySucceededBuilds: true
            specificBuildWithTriggering: true
            artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
            targetPath: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}

      - ${{ if not(eq(parameters.USE_PREBUILT_TOOLCHAIN, true)) }}:
        - download: current
          artifact: toolchain-${{ parameters.platform }}-${{ parameters.host }}
          displayName: download toolchain

        - download: current
          artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
          displayName: download SDK

      - download: icu
        artifact: icu-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download ICU

      - download: sqlite
        artifact: sqlite-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download SQLite

      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project
        fetchDepth: 1

      - checkout: apple/swift
        displayName: checkout apple/swift
        fetchDepth: 1

      - checkout: apple/swift-cmark
        displayName: checkout apple/siwft-cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams

      - checkout: apple/swift-argument-parser
        displayName: checkout apple/swift-argument-parser

      - checkout: apple/swift-driver
        displayName: checkout apple/swift-driver

      - checkout: apple/swift-crypto
        displayName: checkout apple/swift-crypto

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - checkout: apple/sourcekit-lsp
        displayName: checkout apple/sourcekit-lsp

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - checkout: tensorflow/swift-apis
          displayName: checkout tensorflow/swift-apis

      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%LLBUILD_PR%" swift-llbuild
          call :ApplyPatches "%TSC_PR%" swift-tools-support-core
          call :ApplyPatches "%SPM_PR%" swift-package-manager
          call :ApplyPatches "%SWIFTDRIVER_PR%" swift-driver
          call :ApplyPatches "%INDEXSTOREDB_PR%" indexstore-db
          call :ApplyPatches "%SOURCEKITLSP_PR%" sourcekit-lsp

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/merge
            git -C %repository% merge FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: Apply Patches

      - task: BatchScript@1
        displayName: VsDevCmd
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true

      - script: |
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        displayName: Configure SDK

      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}
        name: python
        continueOnError: true

      - script: |
          echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        displayName: Update PATH

      - task: CMake@1
        displayName: Configure swift-llbuild
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-llbuild
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -D LLBUILD_SUPPORT_BINDINGS=Swift
            -D SQLite3_LIBRARY=$(sqlite.directory)/usr/lib/SQLite3.lib
            -D SQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-llbuild

      - task: CMake@1
        displayName: Build swift-llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-llbuild

      - task: CMake@1
        displayName: Install swift-llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-llbuild --target install

      - task: CMake@1
        displayName: Configure swift-tools-support-core
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-tools-support-core
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -D SQLite3_LIBRARY=$(sqlite.directory)/usr/lib/SQLite3.lib
            -D SQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-tools-support-core

      - task: CMake@1
        displayName: Build swift-tools-support-core
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-tools-support-core

      - task: CMake@1
        displayName: Install swift-tools-support-core
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-tools-support-core --target install

      - task: CMake@1
        displayName: Configure Yams
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/Yams
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D BUILD_TESTING=NO
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_C_COMPILER=cl
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -G Ninja
            -S $(Build.SourcesDirectory)/Yams

      - task: CMake@1
        displayName: Build Yams
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/Yams

      - task: CMake@1
        displayName: Install Yams
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/Yams --target install

      - task: CMake@1
        displayName: Configure swift-argument-parser
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-argument-parser
            -D BUILD_SHARED_LIBS=YES
            -D BUILD_TESTING=NO
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-argument-parser

      - task: CMake@1
        displayName: Build swift-argument-parser
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-argument-parser

      - task: CMake@1
        displayName: Install swift-argument-parser
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-argument-parser --target install

      - task: CMake@1
        displayName: Configure swift-driver
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-driver
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D BUILD_TESTING=NO
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -D ArgumentParser_DIR=$(Build.BinariesDirectory)/swift-argument-parser/cmake/modules
            -D LLBuild_DIR=$(Build.BinariesDirectory)/swift-llbuild/cmake/modules
            -D TSC_DIR=$(Build.BinariesDirectory)/swift-tools-support-core/cmake/modules
            -D Yams_DIR=$(Build.BinariesDirectory)/Yams/cmake/modules
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-driver

      - task: CMake@1
        displayName: Build swift-driver
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-driver

      - task: CMake@1
        displayName: Install swift-driver
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-driver --target install

      - task: CMake@1
        displayName: Configure swift-crypto
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-crypto
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D BUILD_TESTING=NO
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-crypto

      - task: CMake@1
        displayName: Build swift-crypto
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-crypto

      - task: CMake@1
        displayName: Install swift-crypto
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-crypto --target install

      - task: CMake@1
        displayName: Configure swift-package-manager
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/swift-package-manager
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -D LLBuild_DIR=$(Build.BinariesDirectory)/swift-llbuild/cmake/modules
            -D TSC_DIR=$(Build.BinariesDirectory)/swift-tools-support-core/cmake/modules
            -D Yams_DIR=$(Build.BinariesDirectory)/Yams/cmake/modules
            -D SwiftDriver_DIR=$(Build.BinariesDirectory)/swift-driver/cmake/modules
            -D ArgumentParser_DIR=$(Build.BinariesDirectory)/swift-argument-parser/cmake/modules
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-package-manager

      - task: CMake@1
        displayName: Build swift-package-manager
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-package-manager

      - task: CMake@1
        displayName: Install swift-package-manager
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-package-manager --target install

      - task: CMake@1
        displayName: Configure IndexStoreDB
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/indexstore-db
            -D CMAKE_CXX_FLAGS="-I $(sdk.directory)/usr/lib/swift -I $(sdk.directory)/usr/lib/swift/Block"
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D BUILD_SHARED_LIBS=YES
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -G Ninja
            -S $(Build.SourcesDirectory)/indexstore-db

      - task: CMake@1
        displayName: Build IndexStoreDB
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db

      - task: CMake@1
        displayName: Install IndexStoreDB
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db --target install

      - task: CMake@1
        displayName: Configure SourceKit-LSP
        inputs:
          cmakeArgs:
            -B $(Build.BinariesDirectory)/sourcekit-lsp
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D BUILD_SHARED_LIBS=YES
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(devtools.toolchain.directory)/usr
            -D LLBuild_DIR=$(Build.BinariesDirectory)/swift-llbuild/cmake/modules
            -D TSC_DIR=$(Build.BinariesDirectory)/swift-tools-support-core/cmake/modules
            -D SwiftPM_DIR=$(Build.BinariesDirectory)/swift-package-manager/cmake/modules
            -D ArgumentParser_DIR=$(Build.BinariesDirectory)/swift-argument-parser/cmake/modules
            -D IndexStoreDB_DIR=$(Build.BinariesDirectory)/indexstore-db/cmake/modules
            -G Ninja
            -S $(Build.SourcesDirectory)/sourcekit-lsp

      - task: CMake@1
        displayName: Install SourceKit-LSP
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/sourcekit-lsp --target install

      - script: |
          echo ##vso[task.prependpath]$(icu.directory)/usr/bin;$(sdk.directory)/usr/bin;$(Build.BinariesDirectory)/swift-llbuild/bin;$(Build.BinariesDirectory)/swift-tools-support-core/bin;$(Build.BinariesDirectory)/Yams/bin;$(Build.BinariesDirectory)/swift-driver/bin;$(Build.BinariesDirectory)/swift-argument-parser/bin;$(Build.BinariesDirectory)/swift-package-manager/bin
        displayName: Update PATH

      - script: |
          echo ##vso[task.setvariable variable=SWIFTPM_PD_LIBS]$(Build.BinariesDirectory)/swift-package-manager/pm
        displayName: Set SWIFTPM_PD_LIBS

      - script: |
          swift-build -Xmanifest -sdk -Xmanifest $(sdk.directory) -Xmanifest -I$(sdk.directory)/usr/lib/swift -Xmanifest -L$(sdk.directory)/usr/lib/swift/windows -Xswiftc -sdk -Xswiftc $(sdk.directory) -Xswiftc -I$(sdk.directory)/usr/lib/swift -Xswiftc -L$(sdk.directory)/usr/lib/swift/windows -Xswiftc -I$(developer_library.directory)/XCTest-development/usr/lib/swift/windows/x86_64 -Xswiftc -L$(developer_library.directory)/XCTest-development/usr/lib/swift/windows  -Xcc -I$(sqlite.directory)/usr/include -Xswiftc -L$(sqlite.directory)/usr/lib -Xswiftc -libc -Xswiftc MD -Xcc -Xclang -Xcc --dependent-lib=msvcrt -Xcc -D_MT -Xcc -D_DLL -Xlinker /INCREMENTAL:NO
        continueOnError: true
        displayName: self-host swift-package-manager
        workingDirectory: $(Build.SourcesDirectory)/swift-package-manager

      - publish: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}
        artifact: devtools-${{ parameters.platform }}-${{ parameters.host }}
