
jobs:
  - job: ${{ parameters.host }}
    # NOTE(compnerd) disable non-x64 builds as they are currently broken :(
    condition: eq( '${{ parameters.host }}', 'x64' )
    variables:
      sqlite.directory: $(Pipeline.Workspace)/sqlite/sqlite-${{ parameters.platform }}-${{ parameters.host }}/Library/sqlite-3.30.1
      toolchain.directory: $(Pipeline.Workspace)/toolchain-windows-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      sdk.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform/Developer/SDKs/${{ parameters.os }}.sdk

      platform.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform

      llbuild.version: development
      tsc.version: development
      IndexStoreDB.version: development
      SwiftPM.version: development
    steps:
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Enable symbolic links, disable line ending conversion

      - download: current
        artifact: toolchain-windows-x64
        displayName: download toolchain

      - download: current
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download SDK

      - download: sqlite
        artifact: sqlite-${{ parameters.platform }}-${{ parameters.host }}
        displayName: download SQLite

      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project
        path: s/toolchain

      - checkout: apple/swift
        displayName: checkout apple/swift
        path: s/toolchain/swift

      - checkout: apple/swift-cmark
        displayName: checkout apple/siwft-cmark
        path: s/toolchain/cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild
        path: s/llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core
        path: s/tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams
        path: s/Yams

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager
        path: s/swiftpm

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - checkout: tensorflow/swift-apis
          displayName: checkout tensorflow/swift-apis
          path: s/tensorflow-swift-apis

        - checkout: pvieito/PythonKit
          displayName: checkout pvieito/PythonKit

      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%LLBUILD_PR%" llbuild
          call :ApplyPatches "%TSC_PR%" tools-support-core
          call :ApplyPatches "%SPM_PR%" swiftpm
          call :ApplyPatches "%INDEXSTOREDB_PR%" indexstore-db

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/head
            git -C %repository% cherry-pick FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: Apply Patches

      - task: BatchScript@1
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: VsDevCmd
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true

      - script: |
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\toolchain\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Configure SDK

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
        name: python
        continueOnError: true

      - script: |
          echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Update PATH

      - task: CMake@1
        displayName: Configure llbuild
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/llbuild
            -B $(Build.BinariesDirectory)/llbuild
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/llbuild-$(llbuild.version)/usr
            -D LLBUILD_SUPPORT_BINDINGS=Swift
            -D SQLite3_LIBRARY=$(sqlite.directory)/usr/lib/SQLite3.lib
            -D SQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include

      - task: CMake@1
        displayName: Build llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llbuild

      - task: CMake@1
        displayName: Install llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llbuild --target install

      - task: CMake@1
        displayName: Configure tools-support-core
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/tools-support-core
            -B $(Build.BinariesDirectory)/tsc
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/Library/TSC-$(tsc.version)/usr

      - task: CMake@1
        displayName: Build tools-support-core
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/tsc

      - task: CMake@1
        displayName: Install tools-support-core
        enabled: false
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/tsc --target install

      - task: CMake@1
        displayName: Configure IndexStoreDB
        enabled: false
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/indexstore-db
            -B $(Build.BinariesDirectory)/indexstore-db
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)/IndexStoreDB-development/usr
            -D BUILD_SHARED_LIBS=YES
            -D CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES="$(sdk.directory)/usr/lib/swift;$(sdk.directory)/usr/lib/swift/Block"
            -D CMAKE_CXX_FLAGS="-Xclang -fno-split-cold-code"

      - task: CMake@1
        displayName: Build IndexStoreDB
        enabled: false
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db

      - task: CMake@1
        displayName: Install IndexStoreDB
        enabled: false
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db --target install

      - publish: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}
        artifact: devtools-${{ parameters.platform }}-${{ parameters.host }}
