jobs:
  - job: swift_toolchain__${{ parameters.proc }}_deb
    variables:
      toolchain.directory: $(Build.StagingDirectory)/swift-toolchain/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
    steps:
      - download: current
        artifact: toolchain-linux-${{ parameters.host }}

      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Enable symbolic links, disable line ending conversion

      - checkout: self
        displayName: checkout compnerd/swift-build

      - checkout: apple/llvm-project
        displayName: checkout apple/llvm-project

      - checkout: apple/swift
        displayName: checkout apple/swift

      - checkout: apple/swift-cmark
        displayName: checkout apple/swift-cmark
        path: s/toolchain/cmark

      - checkout: apple/swift-corelibs-libdispatch
        displayName: checkout apple/swift-corelibs-libdispatch

      - checkout: apple/swift-corelibs-foundation
        displayName: checkout apple/swift-corelibs-foundation

      - checkout: apple/swift-corelibs-xctest
        displayName: checkout apple/swift-corelibs-xctest

      - checkout: apple/swift-llbuild
        displayName: checkout apple/swift-llbuild
        path: s/llbuild

      - checkout: apple/swift-tools-support-core
        displayName: checkout apple/swift-tools-support-core
        path: s/tools-support-core

      - checkout: jpsim/Yams
        displayName: checkout jpsim/Yams
        path: s/Yams

      - checkout: apple/swift-package-manager
        displayName: checkout apple/swift-package-manager
        path: s/swiftpm

      - checkout: apple/indexstore-db
        displayName: checkout apple/indexstore-db

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - checkout: tensorflow/swift-apis
          displayName: checkout tensorflow/swift-apis
          path: s/tensorflow-swift-apis

        - checkout: pvieito/PythonKit
          displayName: checkout pvieito/PythonKit

      - script: |
          mkdir -p $(Build.StagingDirectory)/swift-toolchain
          rsync -v -a -l $(Pipeline.Workspace)/toolchain-linux-${{ parameters.host }}/Library $(Build.StagingDirectory)/swift-toolchain

          # remove testing binaries
          rm -v $(toolchain.directory)/usr/bin/complete-test
          rm -v $(toolchain.directory)/usr/bin/lldb-moduleimport-test
          rm -v $(toolchain.directory)/usr/bin/sil-func-extractor
          rm -v $(toolchain.directory)/usr/bin/sil-llvm-gen
          rm -v $(toolchain.directory)/usr/bin/sil-nm
          rm -v $(toolchain.directory)/usr/bin/sil-opt
          rm -v $(toolchain.directory)/usr/bin/sil-passpipeline-dumper
          rm -v $(toolchain.directory)/usr/bin/sourcekitd-repl
          rm -v $(toolchain.directory)/usr/bin/sourcekitd-test
          rm -v $(toolchain.directory)/usr/bin/swift-api-dump.py
          rm -v $(toolchain.directory)/usr/bin/swift-ast-script
          rm -v $(toolchain.directory)/usr/bin/swift-demangle-yamldump
          rm -v $(toolchain.directory)/usr/bin/swift-ide-test
          rm -v $(toolchain.directory)/usr/bin/swift-indent
          rm -v $(toolchain.directory)/usr/bin/swift-llvm-opt
          rm -v $(toolchain.directory)/usr/bin/swift-reflection-dump
          rm -v $(toolchain.directory)/usr/bin/swift-remoteast-test
          rm -v $(toolchain.directory)/usr/bin/swift-syntax-parser-test
          rm -v $(toolchain.directory)/usr/bin/swift-syntax-test

          # remove swift docs
          rm -v -r -f $(toolchain.directory)/usr/share/docs/swift

          # make IndexStore headers part of `/usr` instead of `/usr/local`
          mv -v $(toolchain.directory)/usr/local/include/indexstore $(toolchain.directory)/usr/include/indexstore
          rmdir -v $(toolchain.directory)/usr/local

          # symlink in clang resource headers
          cd $(toolchain.directory)/usr/lib/swift
          rm -v -r -f clang
          ln -v -s ../clang/*/include clang

          # fix file permissions
          chmod -v +x $(toolchain.directory)/usr/bin/*
          chmod -v +x $(toolchain.directory)/usr/lib/*.so*

          # fixup the symlinks being replaced with binaries
          cd $(toolchain.directory)/usr/lib
          rm -v libLTO.so ; ln -vs libLTO.so.* libLTO.so
          rm -v libIndexStore.so ; ln -vs libIndexStore.so.* libIndexStore.so
          rm -v libclang.so ; ln -vs libclang.so.* libclang.so
          # TODO(compnerd) figure out how to update this automatically
          rm -v liblldb.so ; ln -vs liblldb.so.9 liblldb.so
          rm -v liblldb.so.9 ; ln -vs liblldb.so.9.0 liblldb.so.9
          rm -v liblldb.so.9.0 ; ln -vs liblldb.so.9.0.0 liblldb.so.9.0

          cd $(toolchain.directory)/usr/bin
          rm -v addr2line ; ln -vs llvm-symbolizer addr2line
          rm -v ar ; ln -vs llvm-ar ar
          rm -v c++filt ; ln -vs llvm-cxxfilt c++filt
          rm -v clang ; ln -vs clang-[0-9]* clang
          rm -v clang++ ; ln -vs clang-[0-9]* clang++
          rm -v clang-cl ; ln -vs clang-[0-9]* clang-cl
          rm -v clang-cpp ; ln -vs clang-[0-9]* clang-cpp
          rm -v dwp ; ln -vs llvm-dwp dwp
          rm -v ld64.lld ; ln -vs lld ld64.lld
          rm -v ld.lld ; ln -vs lld ld.lld
          rm -v lld-link ; ln -vs lld lld-link
          rm -v llvm-dlltool ; ln -vs llvm-ar llvm-dlltool
          rm -v llvm-lib ; ln -vs llvm-ar llvm-lib
          rm -v llvm-ranlib ; ln -vs llvm-ar llvm-ranlib
          rm -v llvm-readelf ; ln -vs llvm-readobj llvm-readelf
          rm -v llvm-strip ; ln -vs llvm-objcopy llvm-strip
          rm -v nm ; ln -vs llvm-nm nm
          rm -v objcopy ; ln -vs llvm-objcopy objcopy
          rm -v objdump ; ln -vs llvm-objdump objdump
          rm -v ranlib ; ln -vs llvm-ranlib ranlib
          rm -v readelf ; ln -vs llvm-readelf readelf
          rm -v size ; ln -vs llvm-size size
          rm -v strings ; ln -vs llvm-strings strings
          rm -v strip ; ln -vs llvm-strip strip
          rm -v swift-autolink-extract ; ln -vs swift swift-autolink-extract
          rm -v swiftc ; ln -vs swift swiftc
          rm -v wasm-ld ; ln -vs lld wasm-ld
        displayName: 'cleanup image'
      - script: |
          mkdir -p $(Build.StagingDirectory)/swift-toolchain/DEBIAN
          sed -e "s/Version:/& $(Build.BuildId)/" $(Build.SourcesDirectory)/swift-build/debian/control > $(Build.StagingDirectory)/swift-toolchain/DEBIAN/control

          cd $(Build.StagingDirectory)
          fakeroot dpkg-deb --build swift-toolchain $(Build.StagingDirectory)
        displayName: 'package'
      - publish: $(Build.StagingDirectory)/swift-toolchain_$(Build.BuildId)_${{ parameters.proc }}.deb
        artifact: swift-toolchain_$(Build.BuildId)_${{ parameters.proc }}.deb
      - script: |
          cd $(Build.StagingDirectory)
          curl -F swift-toolchain=@swift-toolchain_$(Build.BuildId)_${{ parameters.proc }}.deb https://$(GEMFURY_PASSWORD)@push.fury.io/compnerd
        displayName: 'upload to gemfury'
