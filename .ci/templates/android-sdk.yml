parameters:
  - name: SWIFT_OPTIONS
    type: string
    default: ''

  - name: VisualStudio
    type: string
    default: ''

  - name: arch
    type: string

  - name: host
    type: string

  - name: platform
    type: string

  - name: triple
    type: string

  - name: os
    type: string

  - name: proc
    type: string

jobs:
  - job: ${{ parameters.host }}
    variables:
      toolchain.directory: $(Pipeline.Workspace)/toolchain-windows-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain

      curl.version: development
      icu.version: 64
      xml2.version: development
      zlib.version: 1.2.11

      curl.directory: $(Pipeline.Workspace)/curl/curl-${{ parameters.platform }}-${{ parameters.host }}/Library/libcurl-$(curl.version)
      icu.directory: $(Pipeline.Workspace)/icu/icu-${{ parameters.platform }}-${{ parameters.host }}/Library/icu-$(icu.version)
      xml2.directory: $(Pipeline.Workspace)/xml2/xml2-${{ parameters.platform }}-${{ parameters.host }}/Library/libxml2-$(xml2.version)
      zlib.directory: $(Pipeline.Workspace)/zlib/zlib-${{ parameters.platform }}-${{ parameters.host }}/Library/zlib-$(zlib.version)

      platform.directory: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform
      sdk.directory: $(platform.directory)/Developer/SDKs/${{ parameters.os }}.sdk

      install.directory: $(sdk.directory)/usr
      xctest.install.directory: $(platform.directory)/Developer/Library/XCTest-development/usr
    steps:
      - download: current
        artifact: toolchain-windows-x64
        displayName: 'download toolchain'
      - download: icu
        artifact: icu-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download ICU'
      - download: xml2
        artifact: xml2-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download XML2'
      - download: curl
        artifact: curl-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download CURL'
      - download: zlib
        artifact: zlib-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download zlib'
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbolic links, disable line ending conversion'
      - checkout: self
      - checkout: apple/llvm-project
        displayName: 'checkout apple/llvm-project'
      - checkout: apple/swift
        displayName: 'checkout apple/swift'
      - checkout: apple/swift-corelibs-libdispatch
        displayName: 'checkout apple/swift-corelibs-libdispatch'
      - checkout: apple/swift-corelibs-foundation
        displayName: 'checkout apple/swift-corelibs-foundation'
      - checkout: apple/swift-corelibs-xctest
        displayName: 'checkout apple/swift-corelibs-xctest'
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%DISPATCH_PR%" swift-corelibs-libdispatch
          call :ApplyPatches "%FOUNDATION_PR%" swift-corelibs-foundation
          call :ApplyPatches "%XCTEST_PR%" swift-corelibs-xctest

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/head
            git -C %repository% cherry-pick FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: 'Apply Patches'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - task: CmdLine@2
        inputs:
          script: |
            echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Update PATH'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
        name: python
        continueOnError: true

      - task: CMake@1
        displayName: Configure LLVM
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/llvm-project/llvm
            -B $(Build.BinariesDirectory)/llvm
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D ANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -D CMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D LLVM_HOST_TRIPLE=${{ parameters.triple }}

      - task: CMake@1
        displayName: Configure Swift Standard Library
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift
            -B $(Build.BinariesDirectory)/swift-stdlib
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/swift-stdlib-${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D ANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -D CMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D LLVM_DIR=$(Build.BinariesDirectory)/llvm/lib/cmake/llvm
            -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            ${{ parameters.SWIFT_OPTIONS }}

      - task: CMake@1
        displayName: Build Swift Standard Library
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib

      - task: CMake@1
        displayName: Install Swift Standard Library
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/swift-stdlib --target install

      - task: CMake@1
        displayName: Configure libdispatch
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/libdispatch
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-libdispatch
            -B $(Build.BinariesDirectory)/libdispatch
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D ANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -D CMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D BUILD_TESTING=NO
            -D ENABLE_SWIFT=YES
            -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES

      - task: CMake@1
        displayName: Build libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch

      - task: CMake@1
        displayName: Configure Foundation
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/foundation
          cmakeArgs:
            -G Ninja
            -B $(Build.BinariesDirectory)/foundation
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D ANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -D CMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(install.directory)
            -D ZLIB_LIBRARY=$(zlib.directory)/usr/lib/libz.a
            -D ZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include
            -D CURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.a
            -D CURL_INCLUDE_DIR=$(curl.directory)/usr/include
            -D ICU_INCLUDE_DIR=$(icu.directory)/usr/include
            -D ICU_UC_LIBRARY=$(icu.directory)/usr/lib/libicuuc$(icu.version).so
            -D ICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuuc$(icu.version).so
            -D ICU_I18N_LIBRARY=$(icu.directory)/usr/lib/libicuin$(icu.version).so
            -D ICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuin$(icu.version).so
            -D LIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2.a
            -D LIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2
            -D dispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
            -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES
            -D CMAKE_HAVE_LIBC_PTHREAD=YES
            -S $(Build.SourcesDirectory)/swift-corelibs-foundation

      - task: CMake@1
        displayName: Build Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation

      - task: CMake@1
        displayName: Configure XCTest
        inputs:
          workingDirectory: $(Build.BinariesDirectory)/xctest
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swift-corelibs-xctest
            -B $(Build.BinariesDirectory)/xctest
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_Swift_SDK=$(sdk.directory)
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake
            -D ANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr
            -D CMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_INSTALL_PREFIX=$(xctest.install.directory)
            -D ENABLE_TESTING=NO
            -D Foundation_DIR=$(Build.BinariesDirectory)/foundation/cmake/modules
            -D dispatch_DIR=$(Build.BinariesDirectory)/libdispatch/cmake/modules
            -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES

      - task: CMake@1
        displayName: Build XCTest
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest

      - task: CMake@1
        displayName: Install Foundation
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/foundation --target install

      - task: CMake@1
        displayName: Install XCTest
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/xctest --target install

      - task: CMake@1
        displayName: Install libdispatch
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/libdispatch --target install

      - publish: $(Build.StagingDirectory)/sdk-${{ parameters.platform }}-${{ parameters.host }}
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
