# parameters:
# arch: [ 'armv7' | 'aarch64' | 'x86_64' ]
# host: [ 'arm' | 'arm64' | 'x64' ]
# triple: [ 'armv7-unknown-linux-gnu' | 'aarch64-unknown-linux-android' | 'x86_64-unknown-linux-android' ]

jobs:
  - job: ${{ parameters.host }}
    pool: ${{ parameters.pool }}
    variables:
      toolchain.directory: $(Pipeline.Workspace)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      curl.directory: $(Pipeline.Workspace)/Library/libcurl-development
      icu.version: 64
      icu.directory: $(System.ArtifactsDirectory)/icu-android-${{ parameters.host }}/ICU-$(icu.version)
      xml2.directory: $(Pipeline.Workspace)/Library/libxml2-development
      zlib.directory: $(Pipeline.Workspace)/Library/zlib-1.2.11
      install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk/usr
      xctest.install.directory: $(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/Library/XCTest-development/usr
    steps:
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbolic links, disable line ending conversion'
      - checkout: self
      - checkout: apple/llvm-project
        displayName: 'checkout apple/llvm-project'
      - checkout: apple/swift
        displayName: 'checkout apple/swift'
      - checkout: apple/swift-corelibs-libdispatch
        displayName: 'checkout apple/swift-corelibs-libdispatch'
      - checkout: apple/swift-corelibs-foundation
        displayName: 'checkout apple/swift-corelibs-foundation'
      - checkout: apple/swift-corelibs-xctest
        displayName: 'checkout apple/swift-corelibs-xctest'
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%DISPATCH_PR%" swift-corelibs-libdispatch
          call :ApplyPatches "%FOUNDATION_PR%" swift-corelibs-foundation
          call :ApplyPatches "%XCTEST_PR%" swift-corelibs-xctest

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/head
            git -C %repository% cherry-pick FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: 'Fetch Sources'
      - task: DownloadPipelineArtifact@2
        inputs:
          source: 'specific'
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: ${{ parameters.toolchain }}
          runVersion: 'latest'
          artifactName: 'toolchain-windows-x64'
        displayName: 'Install toolchain'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 9
          artifactName: 'icu-android-${{ parameters.host }}'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install ICU'
      - task: DownloadPipelineArtifact@2
        inputs:
          source: 'specific'
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 10
          runVersion: 'latest'
          artifactName: 'xml2-android-${{ parameters.host }}'
        displayName: 'Install XML2'
      - task: DownloadPipelineArtifact@2
        inputs:
          source: 'specific'
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 16
          runVersion: 'latest'
          artifactName: 'zlib-android-${{ parameters.host }}'
        displayName: 'Install ZLIB'
      - task: DownloadPipelineArtifact@2
        inputs:
          source: 'specific'
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          pipeline: 11
          runVersion: 'latest'
          artifactName: 'curl-android-${{ parameters.host }}'
        displayName: 'Install CURL'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - script: |
          echo "##vso[task.setvariable variable=PATH]$(toolchain.directory)/usr/bin;%PATH%"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Update PATH'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llvm
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}.cmake -G Ninja $(Build.SourcesDirectory)/llvm-project/llvm -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_HOST_TRIPLE=${{ parameters.triple }}
        displayName: 'Configure LLVM'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/swift-stdlib
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}.cmake -C $(Build.SourcesDirectory)/swift-build/cmake/caches/swift-stdlib-android-${{ parameters.arch }}.cmake -G Ninja $(Build.SourcesDirectory)/swift -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_DIR=$(Build.StagingDirectory)/llvm/lib/cmake/llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)/usr/bin -DCMAKE_INSTALL_PREFIX=$(install.directory) -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC_INCLUDE=$(icu.directory)/usr/include/unicode -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_UC=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N_INCLUDE=$(icu.directory)/usr/include -DSWIFT_ANDROID_${{ parameters.arch }}_ICU_I18N=$(icu.directory)/usr/lib/libicuin$(icu.version).so
        displayName: 'Configure Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib
        displayName: 'Build Swift Standard Library'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/swift-stdlib --target install
        displayName: 'Install Swift Standard Library'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/libdispatch
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}.cmake -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake -G Ninja $(Build.SourcesDirectory)/swift-corelibs-libdispatch -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(install.directory) -DBUILD_TESTING=NO -DENABLE_SWIFT=YES -DCMAKE_BUILD_WITH_INSTALL_RPATH=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch
        displayName: 'Build libdispatch'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/foundation
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}.cmake -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake -G Ninja $(Build.SourcesDirectory)/swift-corelibs-foundation -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(install.directory) -DZLIB_LIBRARY=$(zlib.directory)/usr/lib/libz.a -DZLIB_INCLUDE_DIR=$(zlib.directory)/usr/include -DCURL_LIBRARY=$(curl.directory)/usr/lib/libcurl.a -DCURL_INCLUDE_DIR=$(curl.directory)/usr/include -DICU_INCLUDE_DIR=$(icu.directory)/usr/include -DICU_UC_LIBRARY=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DICU_UC_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuuc$(icu.version).so -DICU_I18N_LIBRARY=$(icu.directory)/usr/lib/libicuin$(icu.version).so -DICU_I18N_LIBRARY_RELEASE=$(icu.directory)/usr/lib/libicuin$(icu.version).so -DLIBXML2_LIBRARY=$(xml2.directory)/usr/lib/libxml2.a -DLIBXML2_INCLUDE_DIR=$(xml2.directory)/usr/include/libxml2 -Ddispatch_DIR=$(Build.StagingDirectory)/libdispatch/cmake/modules -DCMAKE_BUILD_WITH_INSTALL_RPATH=YES
        displayName: 'Configure Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation
        displayName: 'Build Foundation'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/xctest
          cmakeArgs: -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}.cmake -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)/Library/Developer/Platforms/Android.platform/Developer/SDKs/Android.sdk -C $(Build.SourcesDirectory)/swift-build/cmake/caches/android-${{ parameters.arch }}-swift-flags.cmake -G Ninja $(Build.SourcesDirectory)/swift-corelibs-xctest -DANDROID_ALTERNATE_TOOLCHAIN=$(toolchain.directory)/usr -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/swift-build/cmake/toolchains/android.toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$(xctest.install.directory) -DENABLE_TESTING=NO -DFoundation_DIR=$(Build.StagingDirectory)/foundation/cmake/modules -Ddispatch_DIR=$(Build.StagingDirectory)/libdispatch/cmake/modules -DCMAKE_BUILD_WITH_INSTALL_RPATH=YES
        displayName: 'Configure XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest
        displayName: 'Build XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/foundation --target install
        displayName: 'Install Foundation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/xctest --target install
        displayName: 'Install XCTest'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/libdispatch --target install
        displayName: 'Install libdispatch'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)/Library
          artifactName: sdk-android-${{ parameters.host }}
