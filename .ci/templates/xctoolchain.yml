jobs:
  - job: xctoolchain
    variables:
      tensorflow.version: 2.1.0-rc1
      tensorflow.directory: $(Pipeline.Workspace)/tensorflow/tensorflow-${{ parameters.platform }}-${{ parameters.host }}/Library/tensorflow-$(tensorflow.version)

      toolchain.directory: $(Build.StagingDirectory)/swift-toolchain/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
    steps:
      - checkout: self
        displayName: checkout compnerd/swift-build

      - download: current
        artifact: toolchain-darwin-${{ parameters.host }}

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - download: tensorflow
          artifact: tensorflow-${{ parameters.platform }}-${{ parameters.host }}

        - download: current
          artifact: sdk-darwin-${{ parameters.host }}

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            mkdir -v -p $(Build.StagingDirectory)/swift-toolchain
            rsync -v -a -l $(Pipeline.Workspace)/toolchain-darwin-${{ parameters.host }}/Library $(Build.StagingDirectory)/swift-toolchain

            # remove testing binaries
            rm -v $(toolchain.directory)/usr/bin/complete-test
            rm -v $(toolchain.directory)/usr/bin/lldb-moduleimport-test
            rm -v $(toolchain.directory)/usr/bin/sil-func-extractor
            rm -v $(toolchain.directory)/usr/bin/sil-llvm-gen
            rm -v $(toolchain.directory)/usr/bin/sil-nm
            rm -v $(toolchain.directory)/usr/bin/sil-opt
            rm -v $(toolchain.directory)/usr/bin/sil-passpipeline-dumper
            rm -v $(toolchain.directory)/usr/bin/sourcekitd-repl
            rm -v $(toolchain.directory)/usr/bin/sourcekitd-test
            rm -v $(toolchain.directory)/usr/bin/swift-api-dump.py
            rm -v $(toolchain.directory)/usr/bin/swift-ast-script
            rm -v $(toolchain.directory)/usr/bin/swift-demangle-yamldump
            rm -v $(toolchain.directory)/usr/bin/swift-ide-test
            rm -v $(toolchain.directory)/usr/bin/swift-indent
            rm -v $(toolchain.directory)/usr/bin/swift-llvm-opt
            rm -v $(toolchain.directory)/usr/bin/swift-reflection-dump
            rm -v $(toolchain.directory)/usr/bin/swift-remoteast-test
            rm -v $(toolchain.directory)/usr/bin/swift-syntax-parser-test
            rm -v $(toolchain.directory)/usr/bin/swift-syntax-test

            # remove swift docs
            rm -v -r -f $(toolchain.directory)/usr/share/docs/swift

            # make IndexStore headers part of `/usr` instead of `/usr/local`
            mv -v $(toolchain.directory)/usr/local/include/indexstore $(toolchain.directory)/usr/include/indexstore
            rmdir -v $(toolchain.directory)/usr/local

            # symlink in clang resource headers
            cd $(toolchain.directory)/usr/lib/swift
            rm -v -r -f clang
            ln -v -s ../clang/*/include/.. clang

            # fixup the symlinks being replaced with binaries
            cd $(toolchain.directory)/usr/lib
            rm -v libLTO.so ; ln -vs libLTO.so.* libLTO.so
            rm -v libIndexStore.so ; ln -vs libIndexStore.so.* libIndexStore.so
            rm -v libclang.so ; ln -vs libclang.so.* libclang.so
            # TODO(compnerd) figure out how to update this automatically
            rm -v liblldb.so ; ln -vs liblldb.so.9 liblldb.so
            rm -v liblldb.so.9 ; ln -vs liblldb.so.9.0 liblldb.so.9
            rm -v liblldb.so.9.0 ; ln -vs liblldb.so.9.0.0 liblldb.so.9.0

            cd $(toolchain.directory)/usr/bin
            rm -v addr2line ; ln -vs llvm-symbolizer addr2line
            rm -v ar ; ln -vs llvm-ar ar
            rm -v c++filt ; ln -vs llvm-cxxfilt c++filt
            rm -v clang ; ln -vs clang-[0-9]* clang
            rm -v clang++ ; ln -vs clang-[0-9]* clang++
            rm -v clang-cl ; ln -vs clang-[0-9]* clang-cl
            rm -v clang-cpp ; ln -vs clang-[0-9]* clang-cpp
            rm -v dwp ; ln -vs llvm-dwp dwp
            rm -v ld64.lld ; ln -vs lld ld64.lld
            rm -v ld.lld ; ln -vs lld ld.lld
            rm -v lld-link ; ln -vs lld lld-link
            rm -v llvm-dlltool ; ln -vs llvm-ar llvm-dlltool
            rm -v llvm-lib ; ln -vs llvm-ar llvm-lib
            rm -v llvm-ranlib ; ln -vs llvm-ar llvm-ranlib
            rm -v llvm-readelf ; ln -vs llvm-readobj llvm-readelf
            rm -v llvm-strip ; ln -vs llvm-objcopy llvm-strip
            rm -v nm ; ln -vs llvm-nm nm
            rm -v objcopy ; ln -vs llvm-objcopy objcopy
            rm -v objdump ; ln -vs llvm-objdump objdump
            rm -v ranlib ; ln -vs llvm-ranlib ranlib
            rm -v readelf ; ln -vs llvm-readelf readelf
            rm -v size ; ln -vs llvm-size size
            rm -v strings ; ln -vs llvm-strings strings
            rm -v strip ; ln -vs llvm-strip strip
            rm -v swift-autolink-extract ; ln -vs swift swift-autolink-extract
            rm -v swiftc ; ln -vs swift swiftc
            rm -v wasm-ld ; ln -vs lld wasm-ld

            # fix permissions
            chmod -v +x $(toolchain.directory)/usr/bin/*
            chmod -v +x $(toolchain.directory)/usr/lib/*.dylib
            chmod -v +x $(toolchain.directory)/Library/PrivateFrameworks/LLDB.framework/LLDB
            chmod -v +x $(toolchain.directory)/Library/PrivateFrameworks/LLDB.framework/Resources/lldb-argdumper
            chmod -v +x $(toolchain.directory)/Library/PrivateFrameworks/LLDB.framework/Resources/repl_swift
        displayName: cleanup image

      - ${{ if eq(parameters.TENSORFLOW, true) }}:
        - script: |
            rsync -v -a -l $(Pipeline.Workspace)/sdk-darwin-${{ parameters.host }}/Library/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/bin/sdk-module-lists $(toolchain.directory)/usr/bin
            rsync -v -a -l $(Pipeline.Workspace)/sdk-darwin-${{ parameters.host }}/Library/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/swift/macosx $(toolchain.directory)/usr/lib/swift
            rsync -v -a -l $(Pipeline.Workspace)/sdk-darwin-${{ parameters.host }}/Library/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/swift/shims $(toolchain.directory)/usr/lib/swift
            rsync -v -a -l $(Pipeline.Workspace)/sdk-darwin-${{ parameters.host }}/Library/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/swift/tensorflow $(toolchain.directory)/usr/lib/swift

            cp -v $(tensorflow.directory)/usr/lib/libtensorflow.2.1.0.dylib $(toolchain.directory)/usr/lib/swift/macosx
            ln -v -s libtensorflow.2.1.0.dylib $(toolchain.directory)/usr/lib/swift/macosx/libtensorflow.2.1.dylib
            ln -v -s libtensorflow.2.1.dylib $(toolchain.directory)/usr/lib/swift/macosx/libtensorflow.2.dylib
            ln -v -s libtensorflow.2.dylib $(toolchain.directory)/usr/lib/swift/macosx/libtensorflow.dylib
          displayName: augment image

      - script: |
          cat <<-EOF > $(toolchain.directory)/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>Aliases</key>
              <array>
                <string>${{ parameters.alias }}</string>
              </array>
              <key>CFBundleIdentifier</key>
              <string>org.compnerd.dt.toolchain.${{ parameters.alias }}-$(date -j +%Y%m%d)</string>
              <key>CompatibilityVersion</key>
              <integer>2</integer>
              <key>CompatibilityVersionDisplayString</key>
              <string>Xcode 8.0</string>
              <key>CreatedDate</key>
              <date>$(date -j -u +%Y-%m-%dT%TZ)</date>
              <key>DisplayName</key>
              <string>Swift ${{ parameters.variant }}[$(date -j +%Y/%m/%d) Snapshot]</string>
              <key>OverrideBuildSettings</key>
              <dict>
                <key>ENABLE_BITCODE</key>
                <string>NO</string>
                <key>SWIFT_DEVELOPMENT_TOOLCHAIN</key>
                <string>YES</string>
                <key>SWIFT_DISABLE_REQUIRED_ARCLITE</key>
                <string>YES</string>
                <key>SWIFT_LINK_OBJC_RUNTIME</key>
                <string>YES</string>
                <key>SWIFT_USE_DEVELOPMENT_TOOLCHAIN_RUNTIME</key>
                <string>YES</string>
              </dict>
              <key>ReportProblemURL</key>
              <string>https://bugs.swift.org</string>
              <key>ShortDisplayName</key>
              <string>${{ parameters.variant }}Swift</string>
              <key>Version</key>
              <string>$(date -j +%Y%m%d)</string>
            </dict>
          </plist>
          EOF
        displayName: construct Info.plist

      - script: |
          cat <<-EOF > $(toolchain.directory)/entitlements.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true />

              <key>com.apple.security.cs.allow-jit</key>
              <true />

              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true />

              <key>com.apple.security.cs.debugger</key>
              <true />
            </dict>
          </plist>
          EOF
        displayName: construct entitlements.plist

      - task: InstallAppleCertificate@2
        displayName: Install Signing Certificate
        inputs:
          certSecureFile: dt.compnerd.org.p12
          certPwd: $(CERTIFICATE_PASSWORD)
          keychain: temp

      - script: |
          codesign --verbose --deep --force --sign dt.compnerd.org $(toolchain.directory)
        displayName: Sign Bundle

      - script: |
          mkdir -p $(Build.BinariesDirectory)/pkgscripts
          cat <<-EOF > $(Build.BinariesDirectory)/pkgscripts/postinstall
          #!/usr/bin/env bash
          ln -s -f "\${2}" "\$(dirname \${2})/unknown-Asserts-development.xctoolchain"
          EOF
          chmod -v +x $(Build.BinariesDirectory)/pkgscripts/postinstall

          pkgbuild --identifier org.compnerd.dt.toolchain.${{ parameters.alias }}-$(date -j +%Y%m%d)              \
                   --install-location /Library/Developer/Toolchains/unknown-Asserts-$(Build.BuildId).xctoolchain  \
                   --scripts $(Build.BinariesDirectory)/pkgscripts                                                \
                   --version $(Build.BuildId)                                                                     \
                   --root $(toolchain.directory)                                                                  \
                   $(Build.ArtifactStagingDirectory)/toolchain-darwin-${{ parameters.host }}.pkg
        displayName: Build pkg

      - publish: $(Build.ArtifactStagingDirectory)/toolchain-darwin-${{ parameters.host }}.pkg
        artifact: toolchain-darwin-${{ parameters.host }}.pkg

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.StagingDirectory)/swift-toolchain
          includeRootFolder: false
          archiveType: tar
          tarCompression: xz
          archiveFile: $(Build.ArtifactStagingDirectory)/toolchain-darwin-${{ parameters.host }}-$(Build.BuildId).tar.xz
          replaceExistingArchive: true
        displayName: create archive

      - publish: $(Build.ArtifactStagingDirectory)/toolchain-darwin-${{ parameters.host }}-$(Build.BuildId).tar.xz
        artifact: toolchain-darwin-${{ parameters.host }}-$(Build.BuildId).tar.xz
