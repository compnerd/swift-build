trigger:
  batch: yes
  branches:
    include:
      - master

pool:
  vmImage: windows-2022

resources:
  repositories:
    - repository: apple/indexstore-db
      endpoint: GitHub
      name: apple/indexstore-db
      ref: release/5.5
      type: github
    - repository: apple/llvm-project
      endpoint: GitHub
      name: apple/llvm-project
      ref: swift/release/5.5
      type: github
    - repository: apple/sourcekit-lsp
      endpoint: GitHub
      name: apple/sourcekit-lsp
      ref: release/5.5
      type: github
    - repository: apple/swift
      endpoint: GitHub
      name: apple/swift
      ref: release/5.5
      type: github
    - repository: apple/swift-argument-parser
      endpoint: GitHub
      name: apple/swift-argument-parser
      ref: refs/tags/0.4.3
      type: github
    - repository: apple/swift-cmark
      endpoint: GitHub
      name: apple/swift-cmark
      ref: release/5.5
      type: github
    - repository: apple/swift-corelibs-libdispatch
      endpoint: GitHub
      name: apple/swift-corelibs-libdispatch
      ref: release/5.5
      type: github
    - repository: apple/swift-corelibs-foundation
      endpoint: GitHub
      name: apple/swift-corelibs-foundation
      ref: release/5.5
      type: github
    - repository: apple/swift-corelibs-xctest
      endpoint: GitHub
      name: apple/swift-corelibs-xctest
      ref: release/5.5
      type: github
    - repository: apple/swift-crypto
      endpoint: GitHub
      name: apple/swift-crypto
      ref: refs/tags/1.1.5
      type: github
    - repository: apple/swift-driver
      endpoint: GitHub
      name: apple/swift-driver
      ref: release/5.5
      type: github
    - repository: apple/swift-installer-scripts
      endpoint: GitHub
      name: apple/swift-installer-scripts
      ref: release/5.5
      type: github
    - repository: apple/swift-llbuild
      endpoint: GitHub
      name: apple/swift-llbuild
      ref: release/5.5
      type: github
    - repository: apple/swift-package-manager
      endpoint: GitHub
      name: apple/swift-package-manager
      ref: release/5.5
      type: github
    - repository: apple/swift-tools-support-core
      endpoint: GitHub
      name: apple/swift-tools-support-core
      ref: release/5.5
      type: github
    - repository: curl/curl
      endpoint: GitHub
      name: curl/curl
      ref: refs/tags/curl-7_77_0
      type: github
    - repository: gnome/libxml2
      endpoint: GitHub
      name: gnome/libxml2
      ref: refs/tags/v2.9.12
      type: github
    - repository: jpsim/Yams
      endpoint: GitHub
      name: jpsim/Yams
      ref: refs/tags/4.0.6
      type: github
    - repository: madler/zlib
      endpoint: GitHub
      name: madler/zlib
      ref: refs/heads/master
      type: github
    - repository: swift-server/vscode-swift
      endpoint: GitHub
      name: swift-server/vscode-swift
      ref: refs/heads/main
      type: github
    - repository: unicode-org/icu
      endpoint: GitHub
      name: unicode-org/icu
      ref: refs/heads/maint/maint-69
      type: github


stages:
  - stage: tools
    dependsOn: []
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift-cmark
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/0
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D LLVM_ENABLE_ASSERTIONS=NO
                -D LLVM_ENABLE_LIBEDIT=NO
                -D LLVM_ENABLE_PROJECTS="clang;lldb"
                -D LLVM_EXTERNAL_PROJECTS="cmark;swift"
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=$(Build.SourcesDirectory)/swift-cmark
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D LLDB_ENABLE_PYTHON=NO
                -D LLDB_INCLUDE_TESTS=NO
                -D SWIFT_INCLUDE_DOCS=NO
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_STATIC_STDLIB=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
                -D SWIFT_BUILD_STATIC_SDK_OVERLAY=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target clang-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target lldb-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-config
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target swift-def-to-yaml-converter
          - task: CMake@1
            inputs:
             cmakeArgs:
               --build $(Agent.BuildDirectory)/0 --target swift-serialize-diagnostics
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Agent.BuildDirectory)/0
              Contents: |
                bin/llvm-tblgen.exe
                bin/clang-tblgen.exe
                bin/lldb-tblgen.exe
                bin/llvm-config.exe
                bin/swift-def-to-yaml-converter.exe
                bin/swift-serialize-diagnostics.exe
              TargetFolder: $(Build.StagingDirectory)/build-tools
          - publish: $(Build.StagingDirectory)/build-tools
            artifact: build-tools

  - stage: toolchain
    dependsOn: [tools]
    jobs:
      - job: build
        timeoutInMinutes: 0
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x64
              EXTRA_CMAKE_ARGS: -D PYTHON_EXECUTABLE=$(PYTHON_EXECUTABLE) -D Python3_ROOT_DIR=$(PYTHON_ROOT) -D Python3_INCLUDE_DIR=$(PYTHON_ROOT)/include -D Python3_LIBRARY=$(PYTHON_ROOT)/libs/python310.lib
            # TODO(compnerd) enable AArch64 SDK
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: build-tools
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self
            fetchDepth: 1
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift-cmark
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - script: |
              git -C $(Build.SourcesDirectory)/swift apply $(Build.SourcesDirectory)/swift-build/patch/swift-release-5.5.patch
            displayName: Patch Swift
          - powershell: |
              if ("$(arch)" -eq "amd64") {
                $ArchComponent = ".x86.x64"
                $AtlArchComponent = ""
              } else {
                $ArchComponent = ".ARM64"
                $AtlArchComponent = ".ARM64"
              }
              $InstallerArguments = "modify --quiet --norestart --productId Microsoft.VisualStudio.Product.Enterprise --channelId VisualStudio.17.Release --add Microsoft.VisualStudio.Component.VC.14.31.17.1$ArchComponent --add Microsoft.VisualStudio.Component.VC.14.31.17.1.ATL$AtlArchComponent"
              Start-Process -FilePath "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" -Wait -ArgumentList $InstallerArguments
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64 -vcvars_ver=14.31
              modifyEnvironment: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.10' 
              addToPath: true 
              architecture: 'x64'
          - script: |
              CALL :where python.exe PYTHON_EXECUTABLE
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%PYTHON_EXECUTABLE%"`) DO (
                SET PYTHON_EXECUTABLE=%%i
              )
              ECHO PYTHON_EXECUTABLE=%PYTHON_EXECUTABLE%

              CALL :getpath "%PYTHON_EXECUTABLE%" PYTHON_ROOT
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%PYTHON_ROOT%\"`) DO (
                SET PYTHON_ROOT=%%i
              )
              ECHO PYTHON_ROOT=%PYTHON_ROOT%

              @echo ##vso[task.setvariable variable=PYTHON_ROOT;]%PYTHON_ROOT%
              @echo ##vso[task.setvariable variable=PYTHON_EXECUTABLE;]%PYTHON_EXECUTABLE%
              GOTO :eof

              :where
              SET %2=%~$PATH:1
              EXIT /b

              :getpath
              SET %2=%~dp1
              EXIT /b
            displayName: Find Python
          - script: |
              CALL :where clang-cl.exe CLANG_CL_EXECUTABLE
              ECHO CLANG_CL_EXECUTABLE=%CLANG_CL_EXECUTABLE%
              
              CALL :getpath "%CLANG_CL_EXECUTABLE%" CLANG_LOCATION
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%CLANG_LOCATION%\"`) DO (
                SET CLANG_LOCATION=%%i
              )
              ECHO CLANG_LOCATION=%CLANG_LOCATION%
              @echo ##vso[task.setvariable variable=ClangLocation;]%CLANG_LOCATION%
              GOTO :eof
              
              :where
              SET %2=%~$PATH:1
              EXIT /b
              
              :getpath
              SET %2=%~dp1
              EXIT /b
            displayName: Find clang-cl
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/1
                -C $(Build.SourcesDirectory)/swift/cmake/caches/Windows-x86_64.cmake
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D PACKAGE_VENDOR=compnerd.org
                -D CLANG_VENDOR=compnerd.org
                -D CLANG_VENDOR_UTI=org.compnerd.dt
                -D SWIFT_VENDOR=compnerd.org
                -D LLVM_APPEND_VC_REV=NO
                -D LLVM_VERSION_SUFFIX=""
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=$(Build.SourcesDirectory)/swift-cmark
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D LLVM_USE_HOST_TOOLS=NO
                -D LLVM_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/llvm-tblgen.exe
                -D CLANG_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/clang-tblgen.exe
                -D LLDB_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/lldb-tblgen.exe
                -D LLVM_CONFIG_PATH=$(Pipeline.Workspace)/build-tools/bin/llvm-config.exe
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(Pipeline.Workspace)/build-tools/bin
                -D LLVM_PARALLEL_LINK_JOBS=2
                -D SWIFT_PARALLEL_LINK_JOBS=2
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
                -D LLDB_USE_STATIC_BINDINGS=YES
                -D SWIFT_CLANG_LOCATION="$(ClangLocation)"
                $(EXTRA_CMAKE_ARGS)
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target distribution
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target install-distribution-stripped
          - publish: $(Build.StagingDirectory)
            artifact: toolchain-$(arch)

  - stage: icu
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
              BUILD_TOOLS: NO
            'x64':
              arch: amd64
              BUILD_TOOLS: YES
            'arm64':
              arch: arm64
              BUILD_TOOLS: NO
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self
            fetchDepth: 1
          - checkout: unicode-org/icu
            fetchDepth: 1
          - script: |
              copy $(Build.SourcesDirectory)\swift-build\cmake\ICU\CMakeLists69.txt $(Build.SourcesDirectory)\icu\icu4c\CMakeLists.txt
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
            condition: eq(variables['BUILD_TOOLS'], 'NO')
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1-build
                -D BUILD_SHARED_LIBS=NO
                -D BUILD_TOOLS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: eq(variables['BUILD_TOOLS'], 'NO')
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1-build
            condition: eq(variables['BUILD_TOOLS'], 'NO')
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1
                -D BUILD_SHARED_LIBS=YES
                -D ICU_TOOLS_DIR=$(Agent.BuildDirectory)/icu-69.1-build
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: eq(variables['BUILD_TOOLS'], 'NO')
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TOOLS=$(BUILD_TOOLS)
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
            condition: eq(variables['BUILD_TOOLS'], 'YES')
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1 --target install
          - publish: $(Build.StagingDirectory)
            artifact: icu-$(arch)-69.1

  - stage: zlib
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: madler/zlib
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/zlib-1.2.11
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/zlib-1.2.11/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D SKIP_INSTALL_FILES=YES
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.2.11
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.2.11 --target install
          - publish: $(Build.StagingDirectory)
            artifact: zlib-$(arch)-1.2.11

  - stage: curl
    dependsOn: [zlib]
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: zlib-$(arch)-1.2.11
          - checkout: curl/curl
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/curl-7.77.0
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/curl-7.77.0/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D BUILD_TESTING=NO
                -D BUILD_CURL_EXE=NO
                -D CMAKE_USE_OPENSSL=NO
                -D CURL_CA_PATH=none
                -D CMAKE_USE_SCHANNEL=YES
                -D CMAKE_USE_LIBSSH2=NO
                -D HAVE_POLL_FINE=NO
                -D CURL_DISABLE_LDAP=YES
                -D CURL_DISABLE_LDAPS=YES
                -D CURL_DISABLE_TELNET=YES
                -D CURL_DISABLE_DICT=YES
                -D CURL_DISABLE_FILE=YES
                -D CURL_DISABLE_TFTP=YES
                -D CURL_DISABLE_RTSP=YES
                -D CURL_DISABLE_PROXY=YES
                -D CURL_DISABLE_POP3=YES
                -D CURL_DISABLE_IMAP=YES
                -D CURL_DISABLE_SMTP=YES
                -D CURL_DISABLE_GOPHER=YES
                -D CURL_ZLIB=YES
                -D ENABLE_UNIX_SOCKETS=NO
                -D ENABLE_THREADED_RESOLVER=NO
                -D ZLIB_ROOT=$(Pipeline.Workspace)/zlib-x64-1.2.11/Library/zlib-1.2.11/usr
                -D ZLIB_LIBRARY=$(Pipeline.Workspace)/zlib-x64-1.2.11/Library/zlib-1.2.11/usr/lib/zlibstatic.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-7.77.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-7.77.0 --target install
          - publish: $(Build.StagingDirectory)
            artifact: curl-$(arch)-7.77.0

  - stage: sqlite
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self
            fetchDepth: 1
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                curl.exe -sL "https://sqlite.org/2021/sqlite-amalgamation-3360000.zip" -o $env:TEMP\sqlite-amalgamation-3360000.zip
                New-Item -ItemType Directory -Path $(Build.SourcesDirectory)\sqlite-3.36.0
                unzip.exe -j -o $env:TEMP\sqlite-amalgamation-3360000.zip -d $(Build.SourcesDirectory)\sqlite-3.36.0
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/cmake/SQLite
              Contents: |
                CMakeLists.txt
              TargetFolder: $(Build.SourcesDirectory)/sqlite-3.36.0
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/sqlite-3.36.0
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/sqlite-3.36.0/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/sqlite-3.36.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.36.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.36.0 --target install
          - publish: $(Build.StagingDirectory)
            artifact: sqlite-$(arch)-3.36.0

  - stage: libxml2
    dependsOn: []
    jobs:
      - job: build
        strategy:
          matrix:
            'x86':
              arch: x86
            'x64':
              arch: amd64
            'arm64':
              arch: arm64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: gnome/libxml2
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/libxml2-2.9.12
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPLER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/libxml2-2.9.12/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D LIBXML2_WITH_ICONV=NO
                -D LIBXML2_WITH_ICU=NO
                -D LIBXML2_WITH_LZMA=NO
                -D LIBXML2_WITH_PYTHON=NO
                -D LIBXML2_WITH_TESTS=NO
                -D LIBXML2_WITH_THREADS=YES
                -D LIBXML2_WITH_ZLIB=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libxml2-2.9.12
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libxml2-2.9.12 --target install
          - publish: $(Build.StagingDirectory)
            artifact: libxml2-$(arch)-2.9.12

  - stage: sdk
    dependsOn: [icu, libxml2, curl, zlib, toolchain]
    jobs:
      - job: build
        strategy:
          matrix:
            # 'x86':
            #   arch: x86
            #   platform: i686
            'x64':
              arch: amd64
              platform: x86_64
            # TODO(compnerd) enable AArch64 SDK
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: icu-$(arch)-69.1
          - download: current
            artifact: libxml2-$(arch)-2.9.12
          - download: current
            artifact: curl-$(arch)-7.77.0
          - download: current
            artifact: zlib-$(arch)-1.2.11
          - download: current
            artifact: toolchain-amd64
          - checkout: self
            fetchDepth: 1
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - checkout: apple/swift-corelibs-foundation
            fetchDepth: 1
          - checkout: apple/swift-corelibs-xctest
            fetchDepth: 1
          - script: |
              git -C $(Build.SourcesDirectory)/swift apply $(Build.SourcesDirectory)/swift-build/patch/swift-release-5.5.patch
          - powershell: |
              if ("$(arch)" -eq "amd64") {
                $ArchComponent = ".x86.x64"
                $AtlArchComponent = ""
              } else {
                $ArchComponent = ".ARM64"
                $AtlArchComponent = ".ARM64"
              }
              $InstallerArguments = "modify --quiet --norestart --productId Microsoft.VisualStudio.Product.Enterprise --channelId VisualStudio.17.Release --add Microsoft.VisualStudio.Component.VC.14.31.17.1$ArchComponent --add Microsoft.VisualStudio.Component.VC.14.31.17.1.ATL$AtlArchComponent"
              Start-Process -FilePath "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" -Wait -ArgumentList $InstallerArguments
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64 -vcvars_ver=14.31
              modifyEnvironment: true
          - script: |
              CALL :where clang-cl.exe CLANG_CL_EXECUTABLE
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%CLANG_CL_EXECUTABLE%"`) DO (
                SET CLANG_CL_EXECUTABLE=%%i
              )
              ECHO CLANG_CL_EXECUTABLE=%CLANG_CL_EXECUTABLE%
              @echo ##vso[task.setvariable variable=ClangClExecutable;]%CLANG_CL_EXECUTABLE%
              GOTO :eof

              :where
              SET %2=%~$PATH:1
              EXIT /b
            displayName: Find clang-cl
          - task: PowerShell@2
            inputs:
              targetType: inline
              script: |
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"
          - bash: |
              echo "##vso[task.setvariable variable=root;isOutput=true]$(cygpath -m '$(Pipeline.Workspace)')"
            name: workspace
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/llvm
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(arch)
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D LLVM_ENABLE_ASSERTIONS=NO
          - task: CMake@1
            inputs:
             cmakeArgs:
                -B $(Agent.BuildDirectory)/swift
                -C $(Build.SourcesDirectory)/swift/cmake/caches/Runtime-Windows-$(platform).cmake
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER="$(ClangClExecutable)"
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER="$(ClangClExecutable)"
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -G Ninja
                -S $(Build.SourcesDirectory)/swift
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D LLVM_DIR=$(Agent.BuildDirectory)/llvm/lib/cmake/llvm
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(Workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D SWIFT_LIBDISPATCH_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D SWIFT_LIBDISPATCH_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=YES
                -D SWIFT_WINDOWS_$(platform)_ICU_UC_INCLUDE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/include/unicode
                -D SWIFT_WINDOWS_$(platform)_ICU_UC=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/icuuc69.lib
                -D SWIFT_WINDOWS_$(platform)_ICU_I18N_INCLUDE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/include
                -D SWIFT_WINDOWS_$(platform)_ICU_I18N=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/icuin69.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/libdispatch
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D BUILD_TESTING=NO
                -D ENABLE_SWIFT=YES
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libdispatch
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/foundation
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_ASM_COMPILE_OPTIONS_MSVC_RUNTIME_LIBRARY_MultiThreadedDLL="/MD"
                -D CMAKE_ASM_FLAGS="--target=$(platform)-unknown-windows-msvc"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-foundation
                -D BUILD_TESTING=NO
                -D dispatch_DIR=$(Agent.BuildDirectory)/libdispatch/cmake/modules
                -D ICU_ROOT=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr
                -D ICU_UC_LIBRARY_RELEASE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/icuuc69.lib
                -D ICU_I18N_LIBRARY_RELEASE=$(Pipeline.Workspace)/icu-$(arch)-69.1/Library/icu-69.1/usr/lib/icuin69.lib
                -D LIBXML2_LIBRARY=$(Pipeline.Workspace)/libxml2-$(arch)-2.9.12/Library/libxml2-2.9.12/usr/lib/libxml2s.lib
                -D LIBXML2_INCLUDE_DIR=$(Pipeline.Workspace)/libxml2-$(arch)-2.9.12/Library/libxml2-2.9.12/usr/include/libxml2
                -D LIBXML2_DEFINITIONS="/DLIBXML_STATIC"
                -D CURL_DIR=$(Pipeline.Workspace)/curl-$(arch)-7.77.0/Library/curl-7.77.0/usr/lib/cmake/CURL
                -D ZLIB_ROOT=$(Pipeline.Workspace)/zlib-$(arch)-1.2.11/Library/zlib-1.2.11/usr
                -D ZLIB_LIBRARY=$(Pipeline.Workspace)/zlib-$(arch)-1.2.11/Library/zlib-1.2.11/usr/lib/zlibstatic.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/foundation
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/xctest
                -D BUILD_SHARED_LIBS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
                -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr
                -D CMAKE_SYSTEM_NAME=Windows
                -D CMAKE_SYSTEM_PROCESSOR=$(platform)
                -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
                -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
                -D CMAKE_Swift_FLAGS="-resource-dir $(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
                -G Ninja
                -S $(Build.SourcesDirectory)/swift-corelibs-xctest
                -D BUILD_TESTING=NO
                -D dispatch_DIR=$(Agent.BuildDirectory)/libdispatch/cmake/modules
                -D Foundation_DIR=$(Agent.BuildDirectory)/foundation/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/xctest
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/libdispatch --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/foundation --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/xctest --target install
          - task: PythonScript@0
            inputs:
              scriptSource: inline
              script: |
                import os
                import plistlib

                info_plist = r'$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Info.plist'
                with open(os.path.normpath(info_plist), 'wb') as plist:
                  # TODO(compnerd) derive this from the install directory
                  plistlib.dump({ 'DefaultProperties': { 'XCTEST_VERSION': 'development', 'SWIFTC_FLAGS': ['-use-ld=lld'] } }, plist)

                sdk_settings_plist = r'$(Build.StagingDirectory)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/SDKSettings.plist'
                with open(os.path.normpath(sdk_settings_plist), 'wb') as plist:
                  # TODO(compnerd) derive this from the CMAKE_BUILD_TYPE for the
                  # runtime.
                  plistlib.dump({ 'DefaultProperties': { 'DEFAULT_USE_RUNTIME': 'MD' } }, plist)
              failOnStderr: true
          - publish: $(Build.StagingDirectory)
            artifact: windows-sdk-$(arch)

  - stage: devtools
    dependsOn: [sqlite, toolchain, sdk]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x86_64
            # TODO(compnerd) enable AArch64 SDK
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: current
            artifact: sqlite-$(arch)-3.36.0
          - download: current
            artifact: toolchain-amd64
          - download: current
            artifact: windows-sdk-$(arch)
          - checkout: apple/indexstore-db
            fetchDepth: 1
          - checkout: apple/sourcekit-lsp
            fetchDepth: 1
          - checkout: apple/swift-argument-parser
            fetchDepth: 1
          - checkout: apple/swift-crypto
            fetchDepth: 1
          - checkout: apple/swift-driver
            fetchDepth: 1
          - checkout: apple/swift-llbuild
            fetchDepth: 1
          - checkout: apple/swift-package-manager
            fetchDepth: 1
          - checkout: apple/swift-tools-support-core
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: jpsim/Yams
            fetchDepth: 1
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - script: |
              CALL :where clang-cl.exe CLANG_CL_EXECUTABLE
              FOR /F "tokens=* USEBACKQ" %%i IN (`cygpath -m "%CLANG_CL_EXECUTABLE%"`) DO (
                SET CLANG_CL_EXECUTABLE=%%i
              )
              ECHO CLANG_CL_EXECUTABLE=%CLANG_CL_EXECUTABLE%
              @echo ##vso[task.setvariable variable=ClangClExecutable;]%CLANG_CL_EXECUTABLE%
              GOTO :eof

              :where
              SET %2=%~$PATH:1
              EXIT /b
            displayName: Find clang-cl
          - task: PowerShell@2
            inputs:
              targetType: inline
              script: |
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
                Copy-Item "$(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"
          - bash: |
              echo "##vso[task.setvariable variable=root;isOutput=true]$(cygpath -m '$(Pipeline.Workspace)')"
            name: workspace
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-argument-parser
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-argument-parser
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-argument-parser
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-crypto
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-crypto
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-crypto
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/Yams
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/Yams
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/Yams
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-llbuild
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER="$(ClangClExecutable)"
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER="$(ClangClExecutable)"
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-llbuild
               -D LLBUILD_SUPPORT_BINDINGS=Swift
               -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/lib/SQLite3.lib
               -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-llbuild
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-tools-support-core
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-tools-support-core
               -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/lib/SQLite3.lib
               -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-tools-support-core
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-driver
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-driver
               -D ArgumentParser_DIR=$(Agent.BuildDirectory)/swift-argument-parser/cmake/modules
               -D LLBuild_DIR=$(Agent.BuildDirectory)/swift-llbuild/cmake/modules
               -D TSC_DIR=$(Agent.BuildDirectory)/swift-tools-support-core/cmake/modules
               -D Yams_DIR=$(Agent.BuildDirectory)/Yams/cmake/modules
               -D SQLite3_LIBRARY=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/lib/SQLite3.lib
               -D SQLite3_INCLUDE_DIR=$(Pipeline.Workspace)/sqlite-$(arch)-3.36.0/Library/sqlite-3.36.0/usr/include
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-driver
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/swift-package-manager
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/swift-package-manager
               -D ArgumentParser_DIR=$(Agent.BuildDirectory)/swift-argument-parser/cmake/modules
               -D LLBuild_DIR=$(Agent.BuildDirectory)/swift-llbuild/cmake/modules
               -D SwiftCrypto_DIR=$(Agent.BuildDirectory)/swift-crypto/cmake/modules
               -D SwiftDriver_DIR=$(Agent.BuildDirectory)/swift-driver/cmake/modules
               -D TSC_DIR=$(Agent.BuildDirectory)/swift-tools-support-core/cmake/modules
               -D Yams_DIR=$(Agent.BuildDirectory)/Yams/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-package-manager
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/indexstore-db
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER="$(ClangClExecutable)"
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/Block"
               -D CMAKE_CXX_COMPILER="$(ClangClExecutable)"
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -I $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/Block"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows -I$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -I$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/Block"
               -G Ninja
               -S $(Build.SourcesDirectory)/indexstore-db
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/indexstore-db
          - task: CMake@1
            inputs:
             cmakeArgs:
               -B $(Agent.BuildDirectory)/sourcekit-lsp
               -D BUILD_SHARED_LIBS=YES
               -D BUILD_TESTING=NO
               -D CMAKE_BUILD_TYPE=Release
               -D CMAKE_C_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_C_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
               -D CMAKE_CXX_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/clang-cl.exe
               -D CMAKE_CXX_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy -Xclang -fno-split-cold-code"
               -D CMAKE_MT=mt
               -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
               -D CMAKE_Swift_COMPILER=$(workspace.root)/toolchain-amd64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe
               -D CMAKE_Swift_COMPILER_TARGET=$(platform)-unknown-windows-msvc
               -D CMAKE_Swift_FLAGS="-resource-dir $(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift -L$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows"
               -G Ninja
               -S $(Build.SourcesDirectory)/sourcekit-lsp
               -D ArgumentParser_DIR=$(Agent.BuildDirectory)/swift-argument-parser/cmake/modules
               -D IndexStoreDB_DIR=$(Agent.BuildDirectory)/indexstore-db/cmake/modules
               -D LLBuild_DIR=$(Agent.BuildDirectory)/swift-llbuild/cmake/modules
               -D SwiftPM_DIR=$(Agent.BuildDirectory)/swift-package-manager/cmake/modules
               -D TSC_DIR=$(Agent.BuildDirectory)/swift-tools-support-core/cmake/modules
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sourcekit-lsp
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-argument-parser --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-crypto --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/Yams --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-llbuild --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-tools-support-core --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-driver --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/swift-package-manager --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/indexstore-db --target install
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sourcekit-lsp --target install
          - publish: $(Build.StagingDirectory)
            artifact: devtools-$(arch)

  - stage: vscode
    dependsOn: []
    jobs:
      - job: build
        steps:
          - checkout: swift-server/vscode-swift
            fetchDepth: 1
          - script: |
              cd $(Build.SourcesDirectory)
              call npm install
              call npm run dev-package
          - publish: $(Build.SourcesDirectory)/swift-lang-development.vsix
            artifact: swift-lang-vsix

  - stage: package_icu
    displayName: ICU MSI
    dependsOn: [icu]
    jobs:
      - job: build
        strategy:
          matrix:
            # TODO(compnerd) enable the x86 SDK
            # 'x86':
            #  arch: x86
            #  platform: i686
            'x64':
              arch: amd64
              platform: x64
            # TODO(compnerd) enable AArch64 SDK
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: icu-$(arch)-69.1
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/icu.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              restoreNugetPackages: false
              createLogFile: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:ICU_ROOT=$(Pipeline.Workspace)/icu-$(arch)-69.1
                -p:ProductVersion=69.1
                -p:ProductVersionMajor=69
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - script: |
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/icu.msi
          - publish: $(Agent.BuildDirectory)/icu.msi
            artifact: icu-$(arch)-msi

  - stage: package_toolchain
    displayName: Toolchain MSI
    dependsOn: [toolchain, devtools]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x64
            # TODO(compnerd) enable AArch64 toolchain
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: toolchain-$(arch)
          - download: current
            artifact: devtools-$(arch)
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth:  1
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/swift-installer-scripts/platforms/Windows/toolchain.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              restoreNugetPackages: false
              createLogFile: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/devtools-$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:TOOLCHAIN_ROOT=$(Pipeline.Workspace)/toolchain-$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - script: |
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/toolchain.msi
          - publish: $(Agent.BuildDirectory)/toolchain.msi
            artifact: toolchain-$(arch)-msi

  - stage: package_sdk_runtime
    displayName: SDK/Runtime MSI
    dependsOn: [sdk]
    jobs:
      - job: build
        strategy:
          matrix:
            # TODO(compnerd) enable the x86 SDK
            # 'x86':
            #  arch: x86
            #  platform: i686
            'x64':
              arch: amd64
              platform: x64
            # TODO(compnerd) enable AArch64 SDK
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: windows-sdk-$(arch)
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/swift-installer-scripts/platforms/Windows/CustomActions/SwiftInstaller/SwiftInstaller.vcxproj
              msbuildArchitecture: x64
              platform: $(platform)
              configuration: Release
              msbuildArguments:
                -restore
              maximumCpuCount: true
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/swift-installer-scripts/platforms/Windows/sdk.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:PLATFORM_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform
                -p:SDK_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
                -p:SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/swift-installer-scripts/platforms/Windows/runtime.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:PLATFORM_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform
                -p:SDK_ROOT=$(Pipeline.Workspace)/windows-sdk-$(arch)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
                -p:SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - script: |
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/sdk.msi
          - script: |
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/runtime.msi
          - publish: $(Agent.BuildDirectory)/sdk.msi
            artifact: sdk-windows-$(arch)-msi
          - publish: $(Agent.BuildDirectory)/runtime.msi
            artifact: runtime-windows-$(arch)-msi

  - stage: package_devtools
    displayName: Developer Tools MSI
    dependsOn: [devtools, vscode]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x64
            # TODO(compnerd) enable AArch64 toolchain
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: devtools-$(arch)
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/devtools.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              restoreNugetPackages: false
              createLogFile: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:DEVTOOLS_ROOT=$(Pipeline.Workspace)/devtools-$(arch)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - script: |
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/devtools.msi
          - publish: $(Agent.BuildDirectory)/devtools.msi
            artifact: devtools-$(arch)-msi

  - stage: installer
    dependsOn: [package_icu, package_toolchain, package_sdk_runtime, package_devtools]
    jobs:
      - job: build
        strategy:
          matrix:
            'x64':
              arch: amd64
              platform: x64
            # TODO(compnerd) enable AArch64 toolchain
            # 'arm64':
            #  arch: arm64
            #  platform: aarch64
        steps:
          - download: current
            artifact: icu-$(arch)-msi
          - download: current
            artifact: toolchain-$(arch)-msi
          - download: current
            artifact: runtime-windows-$(arch)-msi
          - download: current
            artifact: sdk-windows-$(arch)-msi
          - download: current
            artifact: devtools-$(arch)-msi
          - checkout: apple/swift-installer-scripts
            fetchDepth: 1
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Pipeline.Workspace)
              Contents: |
                icu-$(arch)-msi/icu.msi
                toolchain-$(arch)-msi/toolchain.msi
                runtime-windows-$(arch)-msi/runtime.msi
                sdk-windows-$(arch)-msi/sdk.msi
                devtools-$(arch)-msi/devtools.msi
              TargetFolder: $(Build.SourcesDirectory)
              flattenFolders: true
          - task: MSBuild@1
            inputs:
              solution: $(Build.SourcesDirectory)/platforms/Windows/installer.wixproj
              msbuildArchitecture: $(arch)
              platform: $(platform)
              configuration: Release
              maximumCpuCount: true
              restoreNugetPackages: false
              createLogFile: true
              msbuildArguments:
                -p:RunWixToolsOutOfProc=true
                -p:ProductVersion=5.5.3
                -p:MSI_LOCATION=$(Build.SourcesDirectory)
                -p:IntermediateOutputPath=$(Agent.BuildDirectory)\
                -p:OutputPath=$(Agent.BuildDirectory)\
          - script: |
              SET vswhere="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
              FOR /f "usebackq delims=" %%i IN (`%vswhere% -latest -property installationPath`) DO (
                SET vs="%%i"
                IF EXIST "%%i\Common7\Tools\VsDevCmd.bat" (
                  SET VsDevCmd="%%i\Common7\Tools\VsDevCmd.bat"
                )
              )
              @echo ##vso[task.setvariable variable=vs;]%vs%
              @echo ##vso[task.setvariable variable=vsdevcmd;]%VsDevCmd%
          - task: BatchScript@1
            inputs:
              filename: $(VsDevCmd)
              arguments: -no_logo -arch=$(arch) -host_arch=amd64
              modifyEnvironment: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: dt.compnerd.org.p12
            name: certificate
          - script: |
              "%WIX%bin\insignia.exe" -ib $(Agent.BuildDirectory)/installer.exe -o $(Agent.BuildDirectory)/engine.exe
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/engine.exe
              "%WIX%bin\insignia.exe" -ab $(Agent.BuildDirectory)/engine.exe $(Agent.BuildDirectory)/installer.exe -o $(Agent.BuildDirectory)/installer.exe
              signtool sign /f $(certificate.secureFilePath) /p "$(CERTIFICATE_PASSWORD)" /tr http://timestamp.digicert.com /fd sha256 /td sha256 $(Agent.BuildDirectory)/installer.exe
          - publish: $(Agent.BuildDirectory)/installer.exe
            artifact: installer-$(arch)
