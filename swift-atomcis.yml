# swift-atomics

pool:
  vmImage: windows-latest

resources:
 repositories:
   - repository: apple/swift-atomics
     type: github
     name: apple/swift-atomics
     endpoint: GitHub

pr:
 paths:
   include:
     - .ci/swift-atomics.yml

trigger:
  branches:
    include:
      - master

variables:
  toolchain.directory: $(Pipeline.Workspace)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
  sdk.directory: $(Pipeline.Workspace)/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk
  developer.directory: $(Pipeline.Workspace)/Library/Developer/Platforms/Windows.platform/Developer/Library
  icu.directory: $(Pipeline.Workspace)/Library/icu-67

steps:
  - script: |
      git config --global --add core.autocrlf false
      git config --global --add core.symlinks true
    displayName: configure git

  - checkout: apple/swift-atomics
    displayName: checkout apple/swift-atomics

  - script: |
      git config --global user.name builder
      git config --global user.email builder@compnerd.org

      call :ApplyPatches "%SWIFT_ATOMICS_PR%" .
      goto :eof

      :ApplyPatches
      setlocal
      set list=%~1
      set repository=%~2
      for /F "tokens=1*" %%P in ("%list%") do (
        git -C %repository% fetch origin pull/%%P/merge
        git -C %repository% merge FETCH_HEAD
        if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
      )
    displayName: apply patches

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      definition: '7'
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'toolchain-windows-x64'
      targetPath: '$(Pipeline.Workspace)'

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      definition: '7'
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'sdk-windows-x64'
      targetPath: '$(Pipeline.Workspace)'

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
      definition: '9'
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'icu-windows-x64'
      targetPath: '$(Pipeline.Workspace)'

  - task: BatchScript@1
    displayName: VsDevCmd
    inputs:
      filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
      arguments: -no_logo -arch=x64 -host_arch=x64
      modifyEnvironment: true

  - script: |
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/ucrt.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/visualc.modulemap" -o "%VCToolsInstallDir%\include\module.modulemap"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/visualc.apinotes" -o "%VCToolsInstallDir%\include\visualc.apinotes"
      curl -L "https://raw.githubusercontent.com/apple/swift/main/stdlib/public/Platform/winsdk.modulemap" -o "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
    displayName: Configure SDK

  - script: |
      echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
    displayName: Update PATH

  - task: CMake@1
    displayName: configure swift-atomics
    inputs:
      cmakeArgs:
        -B $(Build.BinariesDirectory)/swift-atomics
        -D BUILD_SHARED_LIBS=YES
        -D CMAKE_BUILD_TYPE=Release
        -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/swift-atomics-windows-x64/Library/swift-atomics/usr
        -D CMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -L$(sdk.directory)/usr/lib/swift/windows -I$(developer.directory)/XCTest-development/usr/lib/swift/windows/x86_64 -L$(developer.directory)/XCTest-development/usr/lib/swift/windows"
        -G Ninja
        -S $(Build.SourcesDirectory)

  - task: CMake@1
    displayName: build swift-atomics
    inputs:
      cmakeArgs: --build $(Build.BinariesDirectory)/swift-atomics

  - task: CMake@1
    displayName: install swift-atomics
    inputs:
     cmakeArgs: --build $(Build.BinariesDirectory)/swift-atomics --target install

  - publish: $(Build.StagingDirectory)/swift-atomics-windows-x64
    artifact: swift-atomics-windows-x64

  - script: |
      echo ##vso[task.prependpath]$(icu.directory)/usr/bin
      echo ##vso[task.prependpath]$(sdk.directory)/usr/bin
      echo ##vso[task.prependpath]$(developer.directory)/XCTest-development/usr/bin
      echo ##vso[task.setvariable variable=CTEST_OUTPUT_ON_FAILURE]1
    displayName: Configure CTest

  - task: CMake@1
    continueOnError: true
    displayName: Test swift-atomics
    inputs:
      cmakeArgs: --build $(Build.BinariesDirectory)/swift-atomics --target test
