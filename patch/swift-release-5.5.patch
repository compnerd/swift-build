diff --git a/cmake/modules/Libdispatch.cmake b/cmake/modules/Libdispatch.cmake
index bc03326d90..9c6e241e50 100644
--- a/cmake/modules/Libdispatch.cmake
+++ b/cmake/modules/Libdispatch.cmake
@@ -4,8 +4,12 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
   if(CMAKE_C_COMPILER_ID STREQUAL Clang AND
     CMAKE_C_COMPILER_VERSION VERSION_GREATER 3.8
     OR LLVM_USE_SANITIZER)
-    set(SWIFT_LIBDISPATCH_C_COMPILER ${CMAKE_C_COMPILER})
-    set(SWIFT_LIBDISPATCH_CXX_COMPILER ${CMAKE_CXX_COMPILER})
+    if (NOT DEFINED SWIFT_LIBDISPATCH_C_COMPILER)
+      set(SWIFT_LIBDISPATCH_C_COMPILER ${CMAKE_C_COMPILER})
+    endif()
+    if (NOT DEFINED SWIFT_LIBDISPATCH_C_COMPILER)
+      set(SWIFT_LIBDISPATCH_CXX_COMPILER ${CMAKE_CXX_COMPILER})
+    endif()
   elseif(${CMAKE_SYSTEM_NAME} STREQUAL ${CMAKE_HOST_SYSTEM_NAME})
     if(CMAKE_SYSTEM_NAME STREQUAL Windows)
       if(CMAKE_SYSTEM_PROCESSOR STREQUAL CMAKE_HOST_SYSTEM_PROCESSOR AND
diff --git a/cmake/modules/SwiftWindowsSupport.cmake b/cmake/modules/SwiftWindowsSupport.cmake
index 7d97cdbadc..8ed4cd6183 100644
--- a/cmake/modules/SwiftWindowsSupport.cmake
+++ b/cmake/modules/SwiftWindowsSupport.cmake
@@ -81,21 +81,30 @@ endfunction()
 # NOTE(compnerd) we use a macro here as this modifies global variables
 macro(swift_swap_compiler_if_needed target)
   if(NOT CMAKE_C_COMPILER_ID MATCHES Clang)
-    if(CMAKE_SYSTEM_NAME STREQUAL CMAKE_HOST_SYSTEM_NAME)
+    if(CMAKE_SYSTEM_NAME STREQUAL CMAKE_HOST_SYSTEM_NAME AND NOT DEFINED SWIFT_CLANG_LOCATION)
       if(SWIFT_BUILT_STANDALONE)
-        get_target_property(CLANG_LOCATION clang LOCATION)
-        get_filename_component(CLANG_LOCATION ${CLANG_LOCATION} DIRECTORY)
+        get_target_property(SWIFT_CLANG_LOCATION clang LOCATION)
+        get_filename_component(SWIFT_CLANG_LOCATION ${SWIFT_CLANG_LOCATION} DIRECTORY)
       else()
-        set(CLANG_LOCATION ${LLVM_RUNTIME_OUTPUT_INTDIR})
+        set(SWIFT_CLANG_LOCATION ${LLVM_RUNTIME_OUTPUT_INTDIR})
       endif()
+    endif()
 
+    if (DEFINED SWIFT_CLANG_LOCATION)
       if("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC" OR "${CMAKE_C_SIMULATE_ID}" STREQUAL "MSVC")
-        set(CMAKE_C_COMPILER ${CLANG_LOCATION}/clang-cl${CMAKE_EXECUTABLE_SUFFIX})
-        set(CMAKE_CXX_COMPILER ${CLANG_LOCATION}/clang-cl${CMAKE_EXECUTABLE_SUFFIX})
+        set(CMAKE_C_COMPILER ${SWIFT_CLANG_LOCATION}/clang-cl${CMAKE_EXECUTABLE_SUFFIX})
+        set(CMAKE_CXX_COMPILER ${SWIFT_CLANG_LOCATION}/clang-cl${CMAKE_EXECUTABLE_SUFFIX})
+        set(CMAKE_C_SIMULATE_ID MSVC)
+        set(CMAKE_C_COMPILER_FRONTEND_VARIANT MSVC)
+        set(CMAKE_CXX_SIMULATE_ID MSVC)
+        set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT MSVC)
       else()
-        set(CMAKE_C_COMPILER ${CLANG_LOCATION}/clang${CMAKE_EXECUTABLE_SUFFIX})
-        set(CMAKE_CXX_COMPILER ${CLANG_LOCATION}/clang++${CMAKE_EXECUTABLE_SUFFIX})
+        set(CMAKE_C_COMPILER ${SWIFT_CLANG_LOCATION}/clang${CMAKE_EXECUTABLE_SUFFIX})
+        set(CMAKE_CXX_COMPILER ${SWIFT_CLANG_LOCATION}/clang++${CMAKE_EXECUTABLE_SUFFIX})
       endif()
+      set(CMAKE_C_COMPILER_ID Clang)
+      set(CMAKE_CXX_COMPILER_ID Clang)
+      message(STATUS "C/C++ compiler for ${target} is set to: ${CMAKE_C_COMPILER}")
     else()
       message(SEND_ERROR "${target} requires a clang based compiler")
     endif()
